sdocp('sdoc::js::core/caterwaul.init', 'Init method.\nThis is the main entry point of caterwaul when you use it as a function. As of version 0.6.4, the init() property is polymorphic in semantics as well as structure. There are two cases:\n\n| 1. You invoke caterwaul on a syntax node. In this case only macroexpansion is performed.\n  2. You invoke caterwaul on anything else. In this case the object is decompiled, macroexpanded, and then compiled.\n\nThis pattern is then closed under intent; that is, caterwaul functions compose both in the context of function -> function compilers (though composition here isn\'t advisable), and in the\ncontext of tree -> tree compilers (macroexpansion). Having such an arrangement is important for before() and after() to work properly.\n\n  caterwaul_global.method(\'init_not_precompiled\', function (f, environment) {\n                                                    var result = f.constructor === this.syntax ? this.macroexpand(f) : this.compile(this(this.decompile(f)), environment);\n                                                    if (f.constructor === this.syntax) for (var i = 0, l = this.after_functions.length; i < l; ++i) result = this.after_functions[i](result);\n                                                    return result}).\n\n                   method(\'init\',                 function (f, environment) {return this.is_precompiled(f) || this.init_not_precompiled(f, environment)});');