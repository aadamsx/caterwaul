sdocp('sdoc::js::core/caterwaul.bake', 'Baking support.\nTo "bake" a caterwaul function is to freeze its settings and apply long-run optimizations such as macroexpander compilation. Once a function is baked you can\'t do certain things, most notably\nadding macros. (Other restrictions may apply later as further optimizations are implemented.)\n\n  Meta-methods.\n  Baking is a state transition, and these are hooks and behaviors that are aware of the state (so that your code doesn\'t have to be). method_until_baked() is just like method(), but replaces\n  the method with an error generator once bake() is called. when_baked() installs an event listener and allows you to perform some optimization.\n\n    caterwaul_global.shallow(\'bake_listeners\', []).method(\'bake\', function () {for (var i = 0, l = this.bake_listeners.length; i < l; ++i) this.bake_listeners[i].call(this); return this}).\n                      method(\'when_baked\', function (f) {this.bake_listeners.push(f); return this}).\n\n                      method(\'method_until_baked\', function (name, f) {return this.method(name, f).when_baked(function () {\n                                                                                this.method(name, function () {throw new Error(\'cannot call \' + name + \' on a baked caterwaul\')})})});');