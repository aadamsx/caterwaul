// Baking support.
// To "bake" a caterwaul function is to freeze its settings and apply long-run optimizations such as macroexpander compilation. Once a function is baked you can't do certain things, most notably
// adding macros. (Other restrictions may apply later as further optimizations are implemented.) You also can't re-bake a caterwaul instance.

//   Meta-methods.
//   Baking is a state transition, and these are hooks and behaviors that are aware of the state (so that your code doesn't have to be). method_until_baked() is just like method(), but replaces
//   the method with an error generator once bake() is called. when_baked() installs an event listener and allows you to perform some optimization. 'this' within a when_baked() listener always
//   refers to the caterwaul being baked.

    caterwaul_global.shallow('bake_listeners', []).method('when_baked', function () {for (var i = 0, l = arguments.length; i < l; ++i) this.bake_listeners.push(arguments[i]); return this}).
                      method('method_until_baked', function (name, f) {return this.method(name, f).when_baked(function () {
                                                                              this.method(name, function () {throw new Error('cannot call ' + name + ' on a baked caterwaul')})})}).

          method_until_baked('bake', function () {for (var i = 0, l = this.bake_listeners.length; i < l; ++i) this.bake_listeners[i].call(this); delete this.bake_listeners; return this});
// Generated by SDoc 
