// Init method.
// This is the main entry point of caterwaul when you use it as a function. As of version 0.6.4, the init() property is polymorphic in semantics as well as structure. There are two cases:

// | 1. You invoke caterwaul on a syntax node. In this case only macroexpansion is performed.
//   2. You invoke caterwaul on anything else. In this case the object is decompiled, macroexpanded, and then compiled.

// This pattern is then closed under intent; that is, caterwaul functions compose both in the context of function -> function compilers (though composition here isn't advisable), and in the
// context of tree -> tree compilers (macroexpansion). Having such an arrangement is important for before() and after() to work properly.

// Even though the caterwaul core doesn't support precompilation, I've built in mechanisms here to support it. The reason is that the precompiler will begin referencing the
// internal_precompiled() function possibly before it is loaded, and in that situation the function needs to be ready.

  caterwaul_global.field('precompiled_internal_table', {}).
                  method('precompiled_internal', function (f) {var k = gensym(); return this.precompiled_internal_table[k] = f, k}).
                  method('is_precompiled',       function (f) {return f.constructor === String && this.precompiled_internal_table[f]}).

                  method('init',                 function (f, environment) {return this.is_precompiled(f) || this.init_not_precompiled(f, environment)}).
                  method('init_not_precompiled', function (f, environment) {
                                                   var result = f.constructor === this.syntax ? this.macroexpand(f) : this.compile(this(this.decompile(f)), environment);
                                                   if (f.constructor === this.syntax) for (var i = 0, l = this.after_functions.length; i < l; ++i) result = this.after_functions[i](result);
                                                   return result});
// Generated by SDoc 
