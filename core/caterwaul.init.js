// Init method.
// There are two init methods worth thinking about. One is the global caterwaul's init method, which takes a driver function and returns a compiler. The other is the compiler's init method, which
// takes a string, function, or syntax tree and returns a value or syntax tree.

  caterwaul_global.init = function (f) {var result = function () {return result.init.apply(result, arguments)};
                                        return caterwaul_global.setup_state(result, f || caterwaul_global.macroexpand)};

//   Compiler instance methods/attributes.
//   These are installed on each generated compiler function. You can change some of them if you know what you're doing (for instance, you can create a compiler for a different programming
//   language by changing the 'parse' function to handle different input). Unlike caterwaul < 1.0 there is no support for cloning a compiler function. However, you can compose things nicely by
//   doing stuff like this:

//   | var my_caterwaul    = caterwaul(function (code) {...});
//     var other_caterwaul = caterwaul(my_caterwaul);
//     other_caterwaul.parse = function (x) {...};

//   In this example, other_caterwaul delegates its macroexpansion to my_caterwaul, but it uses a custom parse function. (You could also customize the compile function, though generally there
//   isn't a good reason to.)

//   I'm (ab)using the constructor property here. I'd like to convey the idea that functions produced by caterwaul() are instances of caterwaul, even though Javascript won't see it that way.

    caterwaul_global.instance_methods = {
      constructor:          caterwaul_global,
      parse:                caterwaul_global.parse,
      compile:              caterwaul_global.compile,
      macroexpand:          caterwaul_global.macroexpand,
      syntax:               caterwaul_global.syntax,
      ref:                  caterwaul_global.ref,
      id:                   caterwaul_global.syntax_common.id,

      ensure_syntax:        caterwaul_global.ensure_syntax,
      ensure_pattern:       caterwaul_global.ensure_pattern,
      ensure_expander:      caterwaul_global.ensure_expander,

      macros:               function () {return arguments.length ? (this._macros = caterwaul_global.flatten.apply(this, arguments), this) : this._macros},

      toString:             function () {return '[caterwaul insatnce ' + this.id() + ']'},

      init:                 function (f, environment) {return caterwaul_global.is_precompiled(f) || this.init_not_precompiled(f, environment)},
      init_not_precompiled: function (f, environment) {return f.constructor === this.syntax ? this.driver_function(f) : this.compile(this(this.parse(f)))}};

    caterwaul_global.setup_state = function (compiler, driver_function) {
      return merge(compiler, caterwaul_global.instance_methods, {driver_function: driver_function}, {_macros: [], environment: {}})};
// Generated by SDoc 
