caterwaul.module( 'javascript-grammar' ,function($) {$.javascript_grammar=caterwaul.regexp_grammar( {statement: /v:block|v:with_semi|;|v:statement_/ ,block: /\{:statements\}/ ,with_semi: /:statement_;/ ,statement_: /:if_|:for_iterator|:for_in|:while_|:do_|:switch_|:throw_|:try_|:expression/ ,if_: /if(pre:ws@)\((cond:expression@)\)(lhs:statement@)(else(rhs:statement@))?/ ,for_iterator: /for(pre:ws@)\((init:statement@)(cond:expression@)(post_cond:ws@);(inc:expression@)\)(lhs:statement@)/ ,for_in: /for(pre:ws@)\(var?(variable:identifier@)(post_variable:ws@)in(cond:expression@)\)(lhs:statement@)/ ,while_: /while(pre:ws@)\((cond:expression@)\)(lhs:statement@)/ ,do_: /do(lhs:statement@)while(pre:ws@)\((cond:expression@)\)/ ,switch_: /switch(pre:ws@)\((cond:expression@)\)(post:ws@)\{(cases:cases@)\}/ ,cases: /(lhs:case_@)(rhs:cases@)|(lhs:default_@)(rhs:cases@)|(rhs:statements@)/ ,case_: /(pre:ws@)case(cond:expression@)[:]/ ,default_: /(pre:ws@)default(post:ws@)[:]/ ,throw_: /throw(lhs:expression@)/ ,try_: /try(lhs:statements@)(rhs:catch_or_finally@)/ ,catch_or_finally: /:catch_|:finally_/ ,catch_: /catch(pre:ws@)\((cond:expression@)\)(rhs:finally_@)?/ ,finally_: /finally(lhs:statements@)/ ,ws: /\s\s*:ws|:line_comment(rest:ws@)|:block_comment(rest:ws@)|\s*/ ,line_comment: /\/\/.*/ ,block_comment: /\/\*([^*]|\*[^\/])*\*\// ,expression: /:literal|(s:identifier@)|:group|:unary|:binary/ ,literal: /(v:dstring@)|(v:sstring@)|(v:number@)|(v:regexp@)|:array|:object/ ,dstring: /"([^\\"]|\\.)*"/ ,sstring: /'([^\\']|\\.)*"/ ,number: /-?0x[0-9a-fA-F]*|-?0[0-7]*|-?[0-9][0-9]*(\.[0-9]*([eE][-+]?[0-9][0-9]*)?)?|-?[0-9]*\.[0-9]*([eE][-+]?[0-9][0-9]*)?/ ,regexp: /\/([^\\\/]|\\.)*\// ,identifier: /[A-Za-z$_][A-Za-z0-9$_]*/ ,group: /\((x:expression@)\)/ ,array: /\[(xs:expression_list@)\]/ ,object: /\{(xs:expression_list@)\}/ } ) } ) ;
