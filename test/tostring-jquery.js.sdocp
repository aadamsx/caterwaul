sdocp('test/tostring-jquery.js.sdoc', 'Serialization via serialize()\n\ntest(function () {\n  var n = function (s)    {return caterwaul.lex(s).join(\' \').replace(/\\s+/g, \' \').replace(/;\\s*\\}/g, \'}\').replace(/^\\s+|\\s+$/g, \'\')},\n      s = function (s, i) {return eq(caterwaul.parse(s).serialize(), i)},\n      i = function (f)    {return eq(n(caterwaul.decompile(f).serialize()),\n                                     n(f.toString()))}; //.replace(/\\s+/g, \'\'))};\n\n  Does it preserve jQuery?\n\n  i(function () {\n  /*!\n   * jQuery JavaScript Library v1.4.2\n   * http://jquery.com/\n   *\n   * Copyright 2010, John Resig\n   * Dual licensed under the MIT or GPL Version 2 licenses.\n   * http://jquery.org/license\n   *\n   * Includes Sizzle.js\n   * http://sizzlejs.com/\n   * Copyright 2010, The Dojo Foundation\n   * Released under the MIT, BSD, and GPL Licenses.\n   *\n   * Date: Sat Feb 13 22:33:48 2010 -0500\n   */\n  (function( window, undefined ) {\n  // Define a local copy of jQuery\n  var jQuery = function( selector, context ) {\n                  // The jQuery object is actually just the init constructor \'enhanced\'\n                  return new jQuery.fn.init( selector, context );\n          },\n          // Map over jQuery in case of overwrite\n          _jQuery = window.jQuery,\n          // Map over the $ in case of overwrite\n          _$ = window.$,\n          // Use the correct document accordingly with window argument (sandbox)\n          document = window.document,\n          // A central reference to the root jQuery(document)\n          rootjQuery,\n          // A simple way to check for HTML strings or ID strings\n          // (both of which we optimize for)\n          quickExpr = /^[^<]*(<[\\w\\W]+>)[^>]*$|^#([\\w-]+)$/,\n          // Is it a simple selector\n          isSimple = /^.[^:#\\[\\.,]*$/,\n          // Check if a string has a non-whitespace character in it\n          rnotwhite = /\\S/,\n          // Used for trimming whitespace\n          rtrim = /^(\\s|\\u00A0)+|(\\s|\\u00A0)+$/g,\n          // Match a standalone tag\n          rsingleTag = /^<(\\w+)\\s*\\/?>(?:<\\/\\1>)?$/,\n          // Keep a UserAgent string for use with jQuery.browser\n          userAgent = navigator.userAgent,\n          // For matching the engine and version of the browser\n          browserMatch,\n          \n          // Has the ready events already been bound?\n          readyBound = false,\n          \n          // The functions to execute on DOM ready\n          readyList = [],\n          // The ready event handler\n          DOMContentLoaded,\n          // Save a reference to some core methods\n          toString = Object.prototype.toString,\n          hasOwnProperty = Object.prototype.hasOwnProperty,\n          push = Array.prototype.push,\n          slice = Array.prototype.slice,\n          indexOf = Array.prototype.indexOf;\n  jQuery.fn = jQuery.prototype = {\n          init: function( selector, context ) {\n                  var match, elem, ret, doc;\n                  // Handle $(""), $(null), or $(undefined)\n                  if ( !selector ) {\n                          return this;\n                  }\n                  // Handle $(DOMElement)\n                  if ( selector.nodeType ) {\n                          this.context = this[0] = selector;\n                          this.length = 1;\n                          return this;\n                  }\n                  \n                  // The body element only exists once, optimize finding it\n                  if ( selector === "body" && !context ) {\n                          this.context = document;\n                          this[0] = document.body;\n                          this.selector = "body";\n                          this.length = 1;\n                          return this;\n                  }\n                  // Handle HTML strings\n                  if ( typeof selector === "string" ) {\n                          // Are we dealing with HTML string or an ID?\n                          match = quickExpr.exec( selector );\n                          // Verify a match, and that no context was specified for #id\n                          if ( match && (match[1] || !context) ) {\n                                  // HANDLE: $(html) -> $(array)\n                                  if ( match[1] ) {\n                                          doc = (context ? context.ownerDocument || context : document);\n                                          // If a single string is passed in and it\'s a single tag\n                                          // just do a createElement and skip the rest\n                                          ret = rsingleTag.exec( selector );\n                                          if ( ret ) {\n                                                  if ( jQuery.isPlainObject( context ) ) {\n                                                          selector = [ document.createElement( ret[1] ) ];\n                                                          jQuery.fn.attr.call( selector, context, true );\n                                                  } else {\n                                                          selector = [ doc.createElement( ret[1] ) ];\n                                                  }\n                                          } else {\n                                                  ret = buildFragment( [ match[1] ], [ doc ] );\n                                                  selector = (ret.cacheable ? ret.fragment.cloneNode(true) : ret.fragment).childNodes;\n                                          }\n                                          \n                                          return jQuery.merge( this, selector );\n                                          \n                                  // HANDLE: $("#id")\n                                  } else {\n                                          elem = document.getElementById( match[2] );\n                                          if ( elem ) {\n                                                  // Handle the case where IE and Opera return items\n                                                  // by name instead of ID\n                                                  if ( elem.id !== match[2] ) {\n                                                          return rootjQuery.find( selector );\n                                                  }\n                                                  // Otherwise, we inject the element directly into the jQuery object\n                                                  this.length = 1;\n                                                  this[0] = elem;\n                                          }\n                                          this.context = document;\n                                          this.selector = selector;\n                                          return this;\n                                  }\n                          // HANDLE: $("TAG")\n                          } else if ( !context && /^\\w+$/.test( selector ) ) {\n                                  this.selector = selector;\n                                  this.context = document;\n                                  selector = document.getElementsByTagName( selector );\n                                  return jQuery.merge( this, selector );\n                          // HANDLE: $(expr, $(...))\n                          } else if ( !context || context.jquery ) {\n                                  return (context || rootjQuery).find( selector );\n                          // HANDLE: $(expr, context)\n                          // (which is just equivalent to: $(context).find(expr)\n                          } else {\n                                  return jQuery( context ).find( selector );\n                          }\n                  // HANDLE: $(function)\n                  // Shortcut for document ready\n                  } else if ( jQuery.isFunction( selector ) ) {\n                          return rootjQuery.ready( selector );\n                  }\n                  if (selector.selector !== undefined) {\n                          this.selector = selector.selector;\n                          this.context = selector.context;\n                  }\n                  return jQuery.makeArray( selector, this );\n          },\n          // Start with an empty selector\n          selector: "",\n          // The current version of jQuery being used\n          jquery: "1.4.2",\n          // The default length of a jQuery object is 0\n          length: 0,\n          // The number of elements contained in the matched element set\n          size: function() {\n                  return this.length;\n          },\n          toArray: function() {\n                  return slice.call( this, 0 );\n          },\n          // Get the Nth element in the matched element set OR\n          // Get the whole matched element set as a clean array\n          get: function( num ) {\n                  return num == null ?\n                          // Return a \'clean\' array\n                          this.toArray() :\n                          // Return just the object\n                          ( num < 0 ? this.slice(num)[ 0 ] : this[ num ] );\n          },\n          // Take an array of elements and push it onto the stack\n          // (returning the new matched element set)\n          pushStack: function( elems, name, selector ) {\n                  // Build a new jQuery matched element set\n                  var ret = jQuery();\n                  if ( jQuery.isArray( elems ) ) {\n                          push.apply( ret, elems );\n                  \n                  } else {\n                          jQuery.merge( ret, elems );\n                  }\n                  // Add the old object onto the stack (as a reference)\n                  ret.prevObject = this;\n                  ret.context = this.context;\n                  if ( name === "find" ) {\n                          ret.selector = this.selector + (this.selector ? " " : "") + selector;\n                  } else if ( name ) {\n                          ret.selector = this.selector + "." + name + "(" + selector + ")";\n                  }\n                  // Return the newly-formed element set\n                  return ret;\n          },\n          // Execute a callback for every element in the matched set.\n          // (You can seed the arguments with an array of args, but this is\n          // only used internally.)\n          each: function( callback, args ) {\n                  return jQuery.each( this, callback, args );\n          },\n          \n          ready: function( fn ) {\n                  // Attach the listeners\n                  jQuery.bindReady();\n                  // If the DOM is already ready\n                  if ( jQuery.isReady ) {\n                          // Execute the function immediately\n                          fn.call( document, jQuery );\n                  // Otherwise, remember the function for later\n                  } else if ( readyList ) {\n                          // Add the function to the wait list\n                          readyList.push( fn );\n                  }\n                  return this;\n          },\n          \n          eq: function( i ) {\n                  return i === -1 ?\n                          this.slice( i ) :\n                          this.slice( i, +i + 1 );\n          },\n          first: function() {\n                  return this.eq( 0 );\n          },\n          last: function() {\n                  return this.eq( -1 );\n          },\n          slice: function() {\n                  return this.pushStack( slice.apply( this, arguments ),\n                          "slice", slice.call(arguments).join(",") );\n          },\n          map: function( callback ) {\n                  return this.pushStack( jQuery.map(this, function( elem, i ) {\n                          return callback.call( elem, i, elem );\n                  }));\n          },\n          \n          end: function() {\n                  return this.prevObject || jQuery(null);\n          },\n          // For internal use only.\n          // Behaves like an Array\'s method, not like a jQuery method.\n          push: push,\n          sort: [].sort,\n          splice: [].splice\n  };\n  // Give the init function the jQuery prototype for later instantiation\n  jQuery.fn.init.prototype = jQuery.fn;\n  jQuery.extend = jQuery.fn.extend = function() {\n          // copy reference to target object\n          var target = arguments[0] || {}, i = 1, length = arguments.length, deep = false, options, name, src, copy;\n          // Handle a deep copy situation\n          if ( typeof target === "boolean" ) {\n                  deep = target;\n                  target = arguments[1] || {};\n                  // skip the boolean and the target\n                  i = 2;\n          }\n          // Handle case when target is a string or something (possible in deep copy)\n          if ( typeof target !== "object" && !jQuery.isFunction(target) ) {\n                  target = {};\n          }\n          // extend jQuery itself if only one argument is passed\n          if ( length === i ) {\n                  target = this;\n                  --i;\n          }\n          for ( ; i < length; i++ ) {\n                  // Only deal with non-null/undefined values\n                  if ( (options = arguments[ i ]) != null ) {\n                          // Extend the base object\n                          for ( name in options ) {\n                                  src = target[ name ];\n                                  copy = options[ name ];\n                                  // Prevent never-ending loop\n                                  if ( target === copy ) {\n                                          continue;\n                                  }\n                                  // Recurse if we\'re merging object literal values or arrays\n                                  if ( deep && copy && ( jQuery.isPlainObject(copy) || jQuery.isArray(copy) ) ) {\n                                          var clone = src && ( jQuery.isPlainObject(src) || jQuery.isArray(src) ) ? src\n                                                  : jQuery.isArray(copy) ? [] : {};\n                                          // Never move original objects, clone them\n                                          target[ name ] = jQuery.extend( deep, clone, copy );\n                                  // Don\'t bring in undefined values\n                                  } else if ( copy !== undefined ) {\n                                          target[ name ] = copy;\n                                  }\n                          }\n                  }\n          }\n          // Return the modified object\n          return target;\n  };\n  jQuery.extend({\n          noConflict: function( deep ) {\n                  window.$ = _$;\n                  if ( deep ) {\n                          window.jQuery = _jQuery;\n                  }\n                  return jQuery;\n          },\n          \n          // Is the DOM ready to be used? Set to true once it occurs.\n          isReady: false,\n          \n          // Handle when the DOM is ready\n          ready: function() {\n                  // Make sure that the DOM is not already loaded\n                  if ( !jQuery.isReady ) {\n                          // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).\n                          if ( !document.body ) {\n                                  return setTimeout( jQuery.ready, 13 );\n                          }\n                          // Remember that the DOM is ready\n                          jQuery.isReady = true;\n                          // If there are functions bound, to execute\n                          if ( readyList ) {\n                                  // Execute all of them\n                                  var fn, i = 0;\n                                  while ( (fn = readyList[ i++ ]) ) {\n                                          fn.call( document, jQuery );\n                                  }\n                                  // Reset the list of functions\n                                  readyList = null;\n                          }\n                          // Trigger any bound ready events\n                          if ( jQuery.fn.triggerHandler ) {\n                                  jQuery( document ).triggerHandler( "ready" );\n                          }\n                  }\n          },\n          \n          bindReady: function() {\n                  if ( readyBound ) {\n                          return;\n                  }\n                  readyBound = true;\n                  // Catch cases where $(document).ready() is called after the\n                  // browser event has already occurred.\n                  if ( document.readyState === "complete" ) {\n                          return jQuery.ready();\n                  }\n                  // Mozilla, Opera and webkit nightlies currently support this event\n                  if ( document.addEventListener ) {\n                          // Use the handy event callback\n                          document.addEventListener( "DOMContentLoaded", DOMContentLoaded, false );\n                          \n                          // A fallback to window.onload, that will always work\n                          window.addEventListener( "load", jQuery.ready, false );\n                  // If IE event model is used\n                  } else if ( document.attachEvent ) {\n                          // ensure firing before onload,\n                          // maybe late but safe also for iframes\n                          document.attachEvent("onreadystatechange", DOMContentLoaded);\n                          \n                          // A fallback to window.onload, that will always work\n                          window.attachEvent( "onload", jQuery.ready );\n                          // If IE and not a frame\n                          // continually check to see if the document is ready\n                          var toplevel = false;\n                          try {\n                                  toplevel = window.frameElement == null;\n                          } catch(e) {}\n                          if ( document.documentElement.doScroll && toplevel ) {\n                                  doScrollCheck();\n                          }\n                  }\n          },\n          // See test/unit/core.js for details concerning isFunction.\n          // Since version 1.3, DOM methods and functions like alert\n          // aren\'t supported. They return false on IE (#2968).\n          isFunction: function( obj ) {\n                  return toString.call(obj) === "[object Function]";\n          },\n          isArray: function( obj ) {\n                  return toString.call(obj) === "[object Array]";\n          },\n          isPlainObject: function( obj ) {\n                  // Must be an Object.\n                  // Because of IE, we also have to check the presence of the constructor property.\n                  // Make sure that DOM nodes and window objects don\'t pass through, as well\n                  if ( !obj || toString.call(obj) !== "[object Object]" || obj.nodeType || obj.setInterval ) {\n                          return false;\n                  }\n                  \n                  // Not own constructor property must be Object\n                  if ( obj.constructor\n                          && !hasOwnProperty.call(obj, "constructor")\n                          && !hasOwnProperty.call(obj.constructor.prototype, "isPrototypeOf") ) {\n                          return false;\n                  }\n                  \n                  // Own properties are enumerated firstly, so to speed up,\n                  // if last one is own, then all properties are own.\n          \n                  var key;\n                  for ( key in obj ) {}\n                  \n                  return key === undefined || hasOwnProperty.call( obj, key );\n          },\n          isEmptyObject: function( obj ) {\n                  for ( var name in obj ) {\n                          return false;\n                  }\n                  return true;\n          },\n          \n          error: function( msg ) {\n                  throw msg;\n          },\n          \n          parseJSON: function( data ) {\n                  if ( typeof data !== "string" || !data ) {\n                          return null;\n                  }\n                  // Make sure leading/trailing whitespace is removed (IE can\'t handle it)\n                  data = jQuery.trim( data );\n                  \n                  // Make sure the incoming data is actual JSON\n                  // Logic borrowed from http://json.org/json2.js\n                  if ( /^[\\],:{}\\s]*$/.test(data.replace(/\\\\(?:["\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@")\n                          .replace(/"[^"\\\\\\n\\r]*"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, "]")\n                          .replace(/(?:^|:|,)(?:\\s*\\[)+/g, "")) ) {\n                          // Try to use the native JSON parser first\n                          return window.JSON && window.JSON.parse ?\n                                  window.JSON.parse( data ) :\n                                  (new Function("return " + data))();\n                  } else {\n                          jQuery.error( "Invalid JSON: " + data );\n                  }\n          },\n          noop: function() {},\n          // Evalulates a script in a global context\n          globalEval: function( data ) {\n                  if ( data && rnotwhite.test(data) ) {\n                          // Inspired by code by Andrea Giammarchi\n                          // http://webreflection.blogspot.com/2007/08/global-scope-evaluation-and-dom.html\n                          var head = document.getElementsByTagName("head")[0] || document.documentElement,\n                                  script = document.createElement("script");\n                          script.type = "text/javascript";\n                          if ( jQuery.support.scriptEval ) {\n                                  script.appendChild( document.createTextNode( data ) );\n                          } else {\n                                  script.text = data;\n                          }\n                          // Use insertBefore instead of appendChild to circumvent an IE6 bug.\n                          // This arises when a base node is used (#2709).\n                          head.insertBefore( script, head.firstChild );\n                          head.removeChild( script );\n                  }\n          },\n          nodeName: function( elem, name ) {\n                  return elem.nodeName && elem.nodeName.toUpperCase() === name.toUpperCase();\n          },\n          // args is for internal usage only\n          each: function( object, callback, args ) {\n                  var name, i = 0,\n                          length = object.length,\n                          isObj = length === undefined || jQuery.isFunction(object);\n                  if ( args ) {\n                          if ( isObj ) {\n                                  for ( name in object ) {\n                                          if ( callback.apply( object[ name ], args ) === false ) {\n                                                  break;\n                                          }\n                                  }\n                          } else {\n                                  for ( ; i < length; ) {\n                                          if ( callback.apply( object[ i++ ], args ) === false ) {\n                                                  break;\n                                          }\n                                  }\n                          }\n                  // A special, fast, case for the most common use of each\n                  } else {\n                          if ( isObj ) {\n                                  for ( name in object ) {\n                                          if ( callback.call( object[ name ], name, object[ name ] ) === false ) {\n                                                  break;\n                                          }\n                                  }\n                          } else {\n                                  for ( var value = object[0];\n                                          i < length && callback.call( value, i, value ) !== false; value = object[++i] ) {}\n                          }\n                  }\n                  return object;\n          },\n          trim: function( text ) {\n                  return (text || "").replace( rtrim, "" );\n          },\n          // results is for internal usage only\n          makeArray: function( array, results ) {\n                  var ret = results || [];\n                  if ( array != null ) {\n                          // The window, strings (and functions) also have \'length\'\n                          // The extra typeof function check is to prevent crashes\n                          // in Safari 2 (See: #3039)\n                          if ( array.length == null || typeof array === "string" || jQuery.isFunction(array) || (typeof array !== "function" && array.setInterval) ) {\n                                  push.call( ret, array );\n                          } else {\n                                  jQuery.merge( ret, array );\n                          }\n                  }\n                  return ret;\n          },\n          inArray: function( elem, array ) {\n                  if ( array.indexOf ) {\n                          return array.indexOf( elem );\n                  }\n                  for ( var i = 0, length = array.length; i < length; i++ ) {\n                          if ( array[ i ] === elem ) {\n                                  return i;\n                          }\n                  }\n                  return -1;\n          },\n          merge: function( first, second ) {\n                  var i = first.length, j = 0;\n                  if ( typeof second.length === "number" ) {\n                          for ( var l = second.length; j < l; j++ ) {\n                                  first[ i++ ] = second[ j ];\n                          }\n                  \n                  } else {\n                          while ( second[j] !== undefined ) {\n                                  first[ i++ ] = second[ j++ ];\n                          }\n                  }\n                  first.length = i;\n                  return first;\n          },\n          grep: function( elems, callback, inv ) {\n                  var ret = [];\n                  // Go through the array, only saving the items\n                  // that pass the validator function\n                  for ( var i = 0, length = elems.length; i < length; i++ ) {\n                          if ( !inv !== !callback( elems[ i ], i ) ) {\n                                  ret.push( elems[ i ] );\n                          }\n                  }\n                  return ret;\n          },\n          // arg is for internal usage only\n          map: function( elems, callback, arg ) {\n                  var ret = [], value;\n                  // Go through the array, translating each of the items to their\n                  // new value (or values).\n                  for ( var i = 0, length = elems.length; i < length; i++ ) {\n                          value = callback( elems[ i ], i, arg );\n                          if ( value != null ) {\n                                  ret[ ret.length ] = value;\n                          }\n                  }\n                  return ret.concat.apply( [], ret );\n          },\n          // A global GUID counter for objects\n          guid: 1,\n          proxy: function( fn, proxy, thisObject ) {\n                  if ( arguments.length === 2 ) {\n                          if ( typeof proxy === "string" ) {\n                                  thisObject = fn;\n                                  fn = thisObject[ proxy ];\n                                  proxy = undefined;\n                          } else if ( proxy && !jQuery.isFunction( proxy ) ) {\n                                  thisObject = proxy;\n                                  proxy = undefined;\n                          }\n                  }\n                  if ( !proxy && fn ) {\n                          proxy = function() {\n                                  return fn.apply( thisObject || this, arguments );\n                          };\n                  }\n                  // Set the guid of unique handler to the same of original handler, so it can be removed\n                  if ( fn ) {\n                          proxy.guid = fn.guid = fn.guid || proxy.guid || jQuery.guid++;\n                  }\n                  // So proxy can be declared as an argument\n                  return proxy;\n          },\n          // Use of jQuery.browser is frowned upon.\n          // More details: http://docs.jquery.com/Utilities/jQuery.browser\n          uaMatch: function( ua ) {\n                  ua = ua.toLowerCase();\n                  var match = /(webkit)[ \\/]([\\w.]+)/.exec( ua ) ||\n                          /(opera)(?:.*version)?[ \\/]([\\w.]+)/.exec( ua ) ||\n                          /(msie) ([\\w.]+)/.exec( ua ) ||\n                          !/compatible/.test( ua ) && /(mozilla)(?:.*? rv:([\\w.]+))?/.exec( ua ) ||\n                          [];\n                  return { browser: match[1] || "", version: match[2] || "0" };\n          },\n          browser: {}\n  });\n  browserMatch = jQuery.uaMatch( userAgent );\n  if ( browserMatch.browser ) {\n          jQuery.browser[ browserMatch.browser ] = true;\n          jQuery.browser.version = browserMatch.version;\n  }\n  // Deprecated, use jQuery.browser.webkit instead\n  if ( jQuery.browser.webkit ) {\n          jQuery.browser.safari = true;\n  }\n  if ( indexOf ) {\n          jQuery.inArray = function( elem, array ) {\n                  return indexOf.call( array, elem );\n          };\n  }\n  // All jQuery objects should point back to these\n  rootjQuery = jQuery(document);\n  // Cleanup functions for the document ready method\n  if ( document.addEventListener ) {\n          DOMContentLoaded = function() {\n                  document.removeEventListener( "DOMContentLoaded", DOMContentLoaded, false );\n                  jQuery.ready();\n          };\n  } else if ( document.attachEvent ) {\n          DOMContentLoaded = function() {\n                  // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).\n                  if ( document.readyState === "complete" ) {\n                          document.detachEvent( "onreadystatechange", DOMContentLoaded );\n                          jQuery.ready();\n                  }\n          };\n  }\n  // The DOM ready check for Internet Explorer\n  function doScrollCheck() {\n          if ( jQuery.isReady ) {\n                  return;\n          }\n          try {\n                  // If IE is used, use the trick by Diego Perini\n                  // http://javascript.nwbox.com/IEContentLoaded/\n                  document.documentElement.doScroll("left");\n          } catch( error ) {\n                  setTimeout( doScrollCheck, 1 );\n                  return;\n          }\n          // and execute any waiting functions\n          jQuery.ready();\n  }\n  function evalScript( i, elem ) {\n          if ( elem.src ) {\n                  jQuery.ajax({\n                          url: elem.src,\n                          async: false,\n                          dataType: "script"\n                  });\n          } else {\n                  jQuery.globalEval( elem.text || elem.textContent || elem.innerHTML || "" );\n          }\n          if ( elem.parentNode ) {\n                  elem.parentNode.removeChild( elem );\n          }\n  }\n  // Mutifunctional method to get and set values to a collection\n  // The value/s can be optionally by executed if its a function\n  function access( elems, key, value, exec, fn, pass ) {\n          var length = elems.length;\n          \n          // Setting many attributes\n          if ( typeof key === "object" ) {\n                  for ( var k in key ) {\n                          access( elems, k, key[k], exec, fn, value );\n                  }\n                  return elems;\n          }\n          \n          // Setting one attribute\n          if ( value !== undefined ) {\n                  // Optionally, function values get executed if exec is true\n                  exec = !pass && exec && jQuery.isFunction(value);\n                  \n                  for ( var i = 0; i < length; i++ ) {\n                          fn( elems[i], key, exec ? value.call( elems[i], i, fn( elems[i], key ) ) : value, pass );\n                  }\n                  \n                  return elems;\n          }\n          \n          // Getting an attribute\n          return length ? fn( elems[0], key ) : undefined;\n  }\n  function now() {\n          return (new Date).getTime();\n  }\n  (function() {\n          jQuery.support = {};\n          var root = document.documentElement,\n                  script = document.createElement("script"),\n                  div = document.createElement("div"),\n                  id = "script" + now();\n          div.style.display = "none";\n          div.innerHTML = "   <link/><table></table><a href=\'/a\' style=\'color:red;float:left;opacity:.55;\'>a</a><input type=\'checkbox\'/>";\n          var all = div.getElementsByTagName("*"),\n                  a = div.getElementsByTagName("a")[0];\n          // Can\'t get basic test support\n          if ( !all || !all.length || !a ) {\n                  return;\n          }\n          jQuery.support = {\n                  // IE strips leading whitespace when .innerHTML is used\n                  leadingWhitespace: div.firstChild.nodeType === 3,\n                  // Make sure that tbody elements aren\'t automatically inserted\n                  // IE will insert them into empty tables\n                  tbody: !div.getElementsByTagName("tbody").length,\n                  // Make sure that link elements get serialized correctly by innerHTML\n                  // This requires a wrapper element in IE\n                  htmlSerialize: !!div.getElementsByTagName("link").length,\n                  // Get the style information from getAttribute\n                  // (IE uses .cssText insted)\n                  style: /red/.test( a.getAttribute("style") ),\n                  // Make sure that URLs aren\'t manipulated\n                  // (IE normalizes it by default)\n                  hrefNormalized: a.getAttribute("href") === "/a",\n                  // Make sure that element opacity exists\n                  // (IE uses filter instead)\n                  // Use a regex to work around a WebKit issue. See #5145\n                  opacity: /^0.55$/.test( a.style.opacity ),\n                  // Verify style float existence\n                  // (IE uses styleFloat instead of cssFloat)\n                  cssFloat: !!a.style.cssFloat,\n                  // Make sure that if no value is specified for a checkbox\n                  // that it defaults to "on".\n                  // (WebKit defaults to "" instead)\n                  checkOn: div.getElementsByTagName("input")[0].value === "on",\n                  // Make sure that a selected-by-default option has a working selected property.\n                  // (WebKit defaults to false instead of true, IE too, if it\'s in an optgroup)\n                  optSelected: document.createElement("select").appendChild( document.createElement("option") ).selected,\n                  parentNode: div.removeChild( div.appendChild( document.createElement("div") ) ).parentNode === null,\n                  // Will be defined later\n                  deleteExpando: true,\n                  checkClone: false,\n                  scriptEval: false,\n                  noCloneEvent: true,\n                  boxModel: null\n          };\n          script.type = "text/javascript";\n          try {\n                  script.appendChild( document.createTextNode( "window." + id + "=1;" ) );\n          } catch(e) {}\n          root.insertBefore( script, root.firstChild );\n          // Make sure that the execution of code works by injecting a script\n          // tag with appendChild/createTextNode\n          // (IE doesn\'t support this, fails, and uses .text instead)\n          if ( window[ id ] ) {\n                  jQuery.support.scriptEval = true;\n                  delete window[ id ];\n          }\n          // Test to see if it\'s possible to delete an expando from an element\n          // Fails in Internet Explorer\n          try {\n                  delete script.test;\n          \n          } catch(e) {\n                  jQuery.support.deleteExpando = false;\n          }\n          root.removeChild( script );\n          if ( div.attachEvent && div.fireEvent ) {\n                  div.attachEvent("onclick", function click() {\n                          // Cloning a node shouldn\'t copy over any\n                          // bound event handlers (IE does this)\n                          jQuery.support.noCloneEvent = false;\n                          div.detachEvent("onclick", click);\n                  });\n                  div.cloneNode(true).fireEvent("onclick");\n          }\n          div = document.createElement("div");\n          div.innerHTML = "<input type=\'radio\' name=\'radiotest\' checked=\'checked\'/>";\n          var fragment = document.createDocumentFragment();\n          fragment.appendChild( div.firstChild );\n          // WebKit doesn\'t clone checked state correctly in fragments\n          jQuery.support.checkClone = fragment.cloneNode(true).cloneNode(true).lastChild.checked;\n          // Figure out if the W3C box model works as expected\n          // document.body must exist before we can do this\n          jQuery(function() {\n                  var div = document.createElement("div");\n                  div.style.width = div.style.paddingLeft = "1px";\n                  document.body.appendChild( div );\n                  jQuery.boxModel = jQuery.support.boxModel = div.offsetWidth === 2;\n                  document.body.removeChild( div ).style.display = \'none\';\n                  div = null;\n          });\n          // Technique from Juriy Zaytsev\n          // http://thinkweb2.com/projects/prototype/detecting-event-support-without-browser-sniffing/\n          var eventSupported = function( eventName ) { \n                  var el = document.createElement("div"); \n                  eventName = "on" + eventName; \n                  var isSupported = (eventName in el); \n                  if ( !isSupported ) { \n                          el.setAttribute(eventName, "return;"); \n                          isSupported = typeof el[eventName] === "function"; \n                  } \n                  el = null; \n                  return isSupported; \n          };\n          \n          jQuery.support.submitBubbles = eventSupported("submit");\n          jQuery.support.changeBubbles = eventSupported("change");\n          // release memory in IE\n          root = script = div = all = a = null;\n  })();\n  jQuery.props = {\n          "for": "htmlFor",\n          "class": "className",\n          readonly: "readOnly",\n          maxlength: "maxLength",\n          cellspacing: "cellSpacing",\n          rowspan: "rowSpan",\n          colspan: "colSpan",\n          tabindex: "tabIndex",\n          usemap: "useMap",\n          frameborder: "frameBorder"\n  };\n  var expando = "jQuery" + now(), uuid = 0, windowData = {};\n  jQuery.extend({\n          cache: {},\n          \n          expando:expando,\n          // The following elements throw uncatchable exceptions if you\n          // attempt to add expando properties to them.\n          noData: {\n                  "embed": true,\n                  "object": true,\n                  "applet": true\n          },\n          data: function( elem, name, data ) {\n                  if ( elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()] ) {\n                          return;\n                  }\n                  elem = elem == window ?\n                          windowData :\n                          elem;\n                  var id = elem[ expando ], cache = jQuery.cache, thisCache;\n                  if ( !id && typeof name === "string" && data === undefined ) {\n                          return null;\n                  }\n                  // Compute a unique ID for the element\n                  if ( !id ) { \n                          id = ++uuid;\n                  }\n                  // Avoid generating a new cache unless none exists and we\n                  // want to manipulate it.\n                  if ( typeof name === "object" ) {\n                          elem[ expando ] = id;\n                          thisCache = cache[ id ] = jQuery.extend(true, {}, name);\n                  } else if ( !cache[ id ] ) {\n                          elem[ expando ] = id;\n                          cache[ id ] = {};\n                  }\n                  thisCache = cache[ id ];\n                  // Prevent overriding the named cache with undefined values\n                  if ( data !== undefined ) {\n                          thisCache[ name ] = data;\n                  }\n                  return typeof name === "string" ? thisCache[ name ] : thisCache;\n          },\n          removeData: function( elem, name ) {\n                  if ( elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()] ) {\n                          return;\n                  }\n                  elem = elem == window ?\n                          windowData :\n                          elem;\n                  var id = elem[ expando ], cache = jQuery.cache, thisCache = cache[ id ];\n                  // If we want to remove a specific section of the element\'s data\n                  if ( name ) {\n                          if ( thisCache ) {\n                                  // Remove the section of cache data\n                                  delete thisCache[ name ];\n                                  // If we\'ve removed all the data, remove the element\'s cache\n                                  if ( jQuery.isEmptyObject(thisCache) ) {\n                                          jQuery.removeData( elem );\n                                  }\n                          }\n                  // Otherwise, we want to remove all of the element\'s data\n                  } else {\n                          if ( jQuery.support.deleteExpando ) {\n                                  delete elem[ jQuery.expando ];\n                          } else if ( elem.removeAttribute ) {\n                                  elem.removeAttribute( jQuery.expando );\n                          }\n                          // Completely remove the data cache\n                          delete cache[ id ];\n                  }\n          }\n  });\n  jQuery.fn.extend({\n          data: function( key, value ) {\n                  if ( typeof key === "undefined" && this.length ) {\n                          return jQuery.data( this[0] );\n                  } else if ( typeof key === "object" ) {\n                          return this.each(function() {\n                                  jQuery.data( this, key );\n                          });\n                  }\n                  var parts = key.split(".");\n                  parts[1] = parts[1] ? "." + parts[1] : "";\n                  if ( value === undefined ) {\n                          var data = this.triggerHandler("getData" + parts[1] + "!", [parts[0]]);\n                          if ( data === undefined && this.length ) {\n                                  data = jQuery.data( this[0], key );\n                          }\n                          return data === undefined && parts[1] ?\n                                  this.data( parts[0] ) :\n                                  data;\n                  } else {\n                          return this.trigger("setData" + parts[1] + "!", [parts[0], value]).each(function() {\n                                  jQuery.data( this, key, value );\n                          });\n                  }\n          },\n          removeData: function( key ) {\n                  return this.each(function() {\n                          jQuery.removeData( this, key );\n                  });\n          }\n  });\n  jQuery.extend({\n          queue: function( elem, type, data ) {\n                  if ( !elem ) {\n                          return;\n                  }\n                  type = (type || "fx") + "queue";\n                  var q = jQuery.data( elem, type );\n                  // Speed up dequeue by getting out quickly if this is just a lookup\n                  if ( !data ) {\n                          return q || [];\n                  }\n                  if ( !q || jQuery.isArray(data) ) {\n                          q = jQuery.data( elem, type, jQuery.makeArray(data) );\n                  } else {\n                          q.push( data );\n                  }\n                  return q;\n          },\n          dequeue: function( elem, type ) {\n                  type = type || "fx";\n                  var queue = jQuery.queue( elem, type ), fn = queue.shift();\n                  // If the fx queue is dequeued, always remove the progress sentinel\n                  if ( fn === "inprogress" ) {\n                          fn = queue.shift();\n                  }\n                  if ( fn ) {\n                          // Add a progress sentinel to prevent the fx queue from being\n                          // automatically dequeued\n                          if ( type === "fx" ) {\n                                  queue.unshift("inprogress");\n                          }\n                          fn.call(elem, function() {\n                                  jQuery.dequeue(elem, type);\n                          });\n                  }\n          }\n  });\n  jQuery.fn.extend({\n          queue: function( type, data ) {\n                  if ( typeof type !== "string" ) {\n                          data = type;\n                          type = "fx";\n                  }\n                  if ( data === undefined ) {\n                          return jQuery.queue( this[0], type );\n                  }\n                  return this.each(function( i, elem ) {\n                          var queue = jQuery.queue( this, type, data );\n                          if ( type === "fx" && queue[0] !== "inprogress" ) {\n                                  jQuery.dequeue( this, type );\n                          }\n                  });\n          },\n          dequeue: function( type ) {\n                  return this.each(function() {\n                          jQuery.dequeue( this, type );\n                  });\n          },\n          // Based off of the plugin by Clint Helfers, with permission.\n          // http://blindsignals.com/index.php/2009/07/jquery-delay/\n          delay: function( time, type ) {\n                  time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;\n                  type = type || "fx";\n                  return this.queue( type, function() {\n                          var elem = this;\n                          setTimeout(function() {\n                                  jQuery.dequeue( elem, type );\n                          }, time );\n                  });\n          },\n          clearQueue: function( type ) {\n                  return this.queue( type || "fx", [] );\n          }\n  });\n  var rclass = /[\\n\\t]/g,\n          rspace = /\\s+/,\n          rreturn = /\\r/g,\n          rspecialurl = /href|src|style/,\n          rtype = /(button|input)/i,\n          rfocusable = /(button|input|object|select|textarea)/i,\n          rclickable = /^(a|area)$/i,\n          rradiocheck = /radio|checkbox/;\n  jQuery.fn.extend({\n          attr: function( name, value ) {\n                  return access( this, name, value, true, jQuery.attr );\n          },\n          removeAttr: function( name, fn ) {\n                  return this.each(function(){\n                          jQuery.attr( this, name, "" );\n                          if ( this.nodeType === 1 ) {\n                                  this.removeAttribute( name );\n                          }\n                  });\n          },\n          addClass: function( value ) {\n                  if ( jQuery.isFunction(value) ) {\n                          return this.each(function(i) {\n                                  var self = jQuery(this);\n                                  self.addClass( value.call(this, i, self.attr("class")) );\n                          });\n                  }\n                  if ( value && typeof value === "string" ) {\n                          var classNames = (value || "").split( rspace );\n                          for ( var i = 0, l = this.length; i < l; i++ ) {\n                                  var elem = this[i];\n                                  if ( elem.nodeType === 1 ) {\n                                          if ( !elem.className ) {\n                                                  elem.className = value;\n                                          } else {\n                                                  var className = " " + elem.className + " ", setClass = elem.className;\n                                                  for ( var c = 0, cl = classNames.length; c < cl; c++ ) {\n                                                          if ( className.indexOf( " " + classNames[c] + " " ) < 0 ) {\n                                                                  setClass += " " + classNames[c];\n                                                          }\n                                                  }\n                                                  elem.className = jQuery.trim( setClass );\n                                          }\n                                  }\n                          }\n                  }\n                  return this;\n          },\n          removeClass: function( value ) {\n                  if ( jQuery.isFunction(value) ) {\n                          return this.each(function(i) {\n                                  var self = jQuery(this);\n                                  self.removeClass( value.call(this, i, self.attr("class")) );\n                          });\n                  }\n                  if ( (value && typeof value === "string") || value === undefined ) {\n                          var classNames = (value || "").split(rspace);\n                          for ( var i = 0, l = this.length; i < l; i++ ) {\n                                  var elem = this[i];\n                                  if ( elem.nodeType === 1 && elem.className ) {\n                                          if ( value ) {\n                                                  var className = (" " + elem.className + " ").replace(rclass, " ");\n                                                  for ( var c = 0, cl = classNames.length; c < cl; c++ ) {\n                                                          className = className.replace(" " + classNames[c] + " ", " ");\n                                                  }\n                                                  elem.className = jQuery.trim( className );\n                                          } else {\n                                                  elem.className = "";\n                                          }\n                                  }\n                          }\n                  }\n                  return this;\n          },\n          toggleClass: function( value, stateVal ) {\n                  var type = typeof value, isBool = typeof stateVal === "boolean";\n                  if ( jQuery.isFunction( value ) ) {\n                          return this.each(function(i) {\n                                  var self = jQuery(this);\n                                  self.toggleClass( value.call(this, i, self.attr("class"), stateVal), stateVal );\n                          });\n                  }\n                  return this.each(function() {\n                          if ( type === "string" ) {\n                                  // toggle individual class names\n                                  var className, i = 0, self = jQuery(this),\n                                          state = stateVal,\n                                          classNames = value.split( rspace );\n                                  while ( (className = classNames[ i++ ]) ) {\n                                          // check each className given, space seperated list\n                                          state = isBool ? state : !self.hasClass( className );\n                                          self[ state ? "addClass" : "removeClass" ]( className );\n                                  }\n                          } else if ( type === "undefined" || type === "boolean" ) {\n                                  if ( this.className ) {\n                                          // store className if set\n                                          jQuery.data( this, "__className__", this.className );\n                                  }\n                                  // toggle whole className\n                                  this.className = this.className || value === false ? "" : jQuery.data( this, "__className__" ) || "";\n                          }\n                  });\n          },\n          hasClass: function( selector ) {\n                  var className = " " + selector + " ";\n                  for ( var i = 0, l = this.length; i < l; i++ ) {\n                          if ( (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) > -1 ) {\n                                  return true;\n                          }\n                  }\n                  return false;\n          },\n          val: function( value ) {\n                  if ( value === undefined ) {\n                          var elem = this[0];\n                          if ( elem ) {\n                                  if ( jQuery.nodeName( elem, "option" ) ) {\n                                          return (elem.attributes.value || {}).specified ? elem.value : elem.text;\n                                  }\n                                  // We need to handle select boxes special\n                                  if ( jQuery.nodeName( elem, "select" ) ) {\n                                          var index = elem.selectedIndex,\n                                                  values = [],\n                                                  options = elem.options,\n                                                  one = elem.type === "select-one";\n                                          // Nothing was selected\n                                          if ( index < 0 ) {\n                                                  return null;\n                                          }\n                                          // Loop through all the selected options\n                                          for ( var i = one ? index : 0, max = one ? index + 1 : options.length; i < max; i++ ) {\n                                                  var option = options[ i ];\n                                                  if ( option.selected ) {\n                                                          // Get the specifc value for the option\n                                                          value = jQuery(option).val();\n                                                          // We don\'t need an array for one selects\n                                                          if ( one ) {\n                                                                  return value;\n                                                          }\n                                                          // Multi-Selects return an array\n                                                          values.push( value );\n                                                  }\n                                          }\n                                          return values;\n                                  }\n                                  // Handle the case where in Webkit "" is returned instead of "on" if a value isn\'t specified\n                                  if ( rradiocheck.test( elem.type ) && !jQuery.support.checkOn ) {\n                                          return elem.getAttribute("value") === null ? "on" : elem.value;\n                                  }\n                                  \n                                  // Everything else, we just grab the value\n                                  return (elem.value || "").replace(rreturn, "");\n                          }\n                          return undefined;\n                  }\n                  var isFunction = jQuery.isFunction(value);\n                  return this.each(function(i) {\n                          var self = jQuery(this), val = value;\n                          if ( this.nodeType !== 1 ) {\n                                  return;\n                          }\n                          if ( isFunction ) {\n                                  val = value.call(this, i, self.val());\n                          }\n                          // Typecast each time if the value is a Function and the appended\n                          // value is therefore different each time.\n                          if ( typeof val === "number" ) {\n                                  val += "";\n                          }\n                          if ( jQuery.isArray(val) && rradiocheck.test( this.type ) ) {\n                                  this.checked = jQuery.inArray( self.val(), val ) >= 0;\n                          } else if ( jQuery.nodeName( this, "select" ) ) {\n                                  var values = jQuery.makeArray(val);\n                                  jQuery( "option", this ).each(function() {\n                                          this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;\n                                  });\n                                  if ( !values.length ) {\n                                          this.selectedIndex = -1;\n                                  }\n                          } else {\n                                  this.value = val;\n                          }\n                  });\n          }\n  });\n  jQuery.extend({\n          attrFn: {\n                  val: true,\n                  css: true,\n                  html: true,\n                  text: true,\n                  data: true,\n                  width: true,\n                  height: true,\n                  offset: true\n          },\n                  \n          attr: function( elem, name, value, pass ) {\n                  // don\'t set attributes on text and comment nodes\n                  if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 ) {\n                          return undefined;\n                  }\n                  if ( pass && name in jQuery.attrFn ) {\n                          return jQuery(elem)[name](value);\n                  }\n                  var notxml = elem.nodeType !== 1 || !jQuery.isXMLDoc( elem ),\n                          // Whether we are setting (or getting)\n                          set = value !== undefined;\n                  // Try to normalize/fix the name\n                  name = notxml && jQuery.props[ name ] || name;\n                  // Only do all the following if this is a node (faster for style)\n                  if ( elem.nodeType === 1 ) {\n                          // These attributes require special treatment\n                          var special = rspecialurl.test( name );\n                          // Safari mis-reports the default selected property of an option\n                          // Accessing the parent\'s selectedIndex property fixes it\n                          if ( name === "selected" && !jQuery.support.optSelected ) {\n                                  var parent = elem.parentNode;\n                                  if ( parent ) {\n                                          parent.selectedIndex;\n          \n                                          // Make sure that it also works with optgroups, see #5701\n                                          if ( parent.parentNode ) {\n                                                  parent.parentNode.selectedIndex;\n                                          }\n                                  }\n                          }\n                          // If applicable, access the attribute via the DOM 0 way\n                          if ( name in elem && notxml && !special ) {\n                                  if ( set ) {\n                                          // We can\'t allow the type property to be changed (since it causes problems in IE)\n                                          if ( name === "type" && rtype.test( elem.nodeName ) && elem.parentNode ) {\n                                                  jQuery.error( "type property can\'t be changed" );\n                                          }\n                                          elem[ name ] = value;\n                                  }\n                                  // browsers index elements by id/name on forms, give priority to attributes.\n                                  if ( jQuery.nodeName( elem, "form" ) && elem.getAttributeNode(name) ) {\n                                          return elem.getAttributeNode( name ).nodeValue;\n                                  }\n                                  // elem.tabIndex doesn\'t always return the correct value when it hasn\'t been explicitly set\n                                  // http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n                                  if ( name === "tabIndex" ) {\n                                          var attributeNode = elem.getAttributeNode( "tabIndex" );\n                                          return attributeNode && attributeNode.specified ?\n                                                  attributeNode.value :\n                                                  rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?\n                                                          0 :\n                                                          undefined;\n                                  }\n                                  return elem[ name ];\n                          }\n                          if ( !jQuery.support.style && notxml && name === "style" ) {\n                                  if ( set ) {\n                                          elem.style.cssText = "" + value;\n                                  }\n                                  return elem.style.cssText;\n                          }\n                          if ( set ) {\n                                  // convert the value to a string (all browsers do this but IE) see #1070\n                                  elem.setAttribute( name, "" + value );\n                          }\n                          var attr = !jQuery.support.hrefNormalized && notxml && special ?\n                                          // Some attributes require a special call on IE\n                                          elem.getAttribute( name, 2 ) :\n                                          elem.getAttribute( name );\n                          // Non-existent attributes return null, we normalize to undefined\n                          return attr === null ? undefined : attr;\n                  }\n                  // elem is actually elem.style ... set the style\n                  // Using attr for specific style information is now deprecated. Use style instead.\n                  return jQuery.style( elem, name, value );\n          }\n  });\n  var rnamespaces = /\\.(.*)$/,\n          fcleanup = function( nm ) {\n                  return nm.replace(/[^\\w\\s\\.\\|`]/g, function( ch ) {\n                          return "\\\\" + ch;\n                  });\n          };\n  /*\n   * A number of helper functions used for managing events.\n   * Many of the ideas behind this code originated from\n   * Dean Edwards\' addEvent library.\n   */\n  jQuery.event = {\n          // Bind an event to an element\n          // Original by Dean Edwards\n          add: function( elem, types, handler, data ) {\n                  if ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n                          return;\n                  }\n                  // For whatever reason, IE has trouble passing the window object\n                  // around, causing it to be cloned in the process\n                  if ( elem.setInterval && ( elem !== window && !elem.frameElement ) ) {\n                          elem = window;\n                  }\n                  var handleObjIn, handleObj;\n                  if ( handler.handler ) {\n                          handleObjIn = handler;\n                          handler = handleObjIn.handler;\n                  }\n                  // Make sure that the function being executed has a unique ID\n                  if ( !handler.guid ) {\n                          handler.guid = jQuery.guid++;\n                  }\n                  // Init the element\'s event structure\n                  var elemData = jQuery.data( elem );\n                  // If no elemData is found then we must be trying to bind to one of the\n                  // banned noData elements\n                  if ( !elemData ) {\n                          return;\n                  }\n                  var events = elemData.events = elemData.events || {},\n                          eventHandle = elemData.handle, eventHandle;\n                  if ( !eventHandle ) {\n                          elemData.handle = eventHandle = function() {\n                                  // Handle the second event of a trigger and when\n                                  // an event is called after a page has unloaded\n                                  return typeof jQuery !== "undefined" && !jQuery.event.triggered ?\n                                          jQuery.event.handle.apply( eventHandle.elem, arguments ) :\n                                          undefined;\n                          };\n                  }\n                  // Add elem as a property of the handle function\n                  // This is to prevent a memory leak with non-native events in IE.\n                  eventHandle.elem = elem;\n                  // Handle multiple events separated by a space\n                  // jQuery(...).bind("mouseover mouseout", fn);\n                  types = types.split(" ");\n                  var type, i = 0, namespaces;\n                  while ( (type = types[ i++ ]) ) {\n                          handleObj = handleObjIn ?\n                                  jQuery.extend({}, handleObjIn) :\n                                  { handler: handler, data: data };\n                          // Namespaced event handlers\n                          if ( type.indexOf(".") > -1 ) {\n                                  namespaces = type.split(".");\n                                  type = namespaces.shift();\n                                  handleObj.namespace = namespaces.slice(0).sort().join(".");\n                          } else {\n                                  namespaces = [];\n                                  handleObj.namespace = "";\n                          }\n                          handleObj.type = type;\n                          handleObj.guid = handler.guid;\n                          // Get the current list of functions bound to this event\n                          var handlers = events[ type ],\n                                  special = jQuery.event.special[ type ] || {};\n                          // Init the event handler queue\n                          if ( !handlers ) {\n                                  handlers = events[ type ] = [];\n                                  // Check for a special event handler\n                                  // Only use addEventListener/attachEvent if the special\n                                  // events handler returns false\n                                  if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n                                          // Bind the global event handler to the element\n                                          if ( elem.addEventListener ) {\n                                                  elem.addEventListener( type, eventHandle, false );\n                                          } else if ( elem.attachEvent ) {\n                                                  elem.attachEvent( "on" + type, eventHandle );\n                                          }\n                                  }\n                          }\n                          \n                          if ( special.add ) { \n                                  special.add.call( elem, handleObj ); \n                                  if ( !handleObj.handler.guid ) {\n                                          handleObj.handler.guid = handler.guid;\n                                  }\n                          }\n                          // Add the function to the element\'s handler list\n                          handlers.push( handleObj );\n                          // Keep track of which events have been used, for global triggering\n                          jQuery.event.global[ type ] = true;\n                  }\n                  // Nullify elem to prevent memory leaks in IE\n                  elem = null;\n          },\n          global: {},\n          // Detach an event or set of events from an element\n          remove: function( elem, types, handler, pos ) {\n                  // don\'t do events on text and comment nodes\n                  if ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n                          return;\n                  }\n                  var ret, type, fn, i = 0, all, namespaces, namespace, special, eventType, handleObj, origType,\n                          elemData = jQuery.data( elem ),\n                          events = elemData && elemData.events;\n                  if ( !elemData || !events ) {\n                          return;\n                  }\n                  // types is actually an event object here\n                  if ( types && types.type ) {\n                          handler = types.handler;\n                          types = types.type;\n                  }\n                  // Unbind all events for the element\n                  if ( !types || typeof types === "string" && types.charAt(0) === "." ) {\n                          types = types || "";\n                          for ( type in events ) {\n                                  jQuery.event.remove( elem, type + types );\n                          }\n                          return;\n                  }\n                  // Handle multiple events separated by a space\n                  // jQuery(...).unbind("mouseover mouseout", fn);\n                  types = types.split(" ");\n                  while ( (type = types[ i++ ]) ) {\n                          origType = type;\n                          handleObj = null;\n                          all = type.indexOf(".") < 0;\n                          namespaces = [];\n                          if ( !all ) {\n                                  // Namespaced event handlers\n                                  namespaces = type.split(".");\n                                  type = namespaces.shift();\n                                  namespace = new RegExp("(^|\\\\.)" + \n                                          jQuery.map( namespaces.slice(0).sort(), fcleanup ).join("\\\\.(?:.*\\\\.)?") + "(\\\\.|$)")\n                          }\n                          eventType = events[ type ];\n                          if ( !eventType ) {\n                                  continue;\n                          }\n                          if ( !handler ) {\n                                  for ( var j = 0; j < eventType.length; j++ ) {\n                                          handleObj = eventType[ j ];\n                                          if ( all || namespace.test( handleObj.namespace ) ) {\n                                                  jQuery.event.remove( elem, origType, handleObj.handler, j );\n                                                  eventType.splice( j--, 1 );\n                                          }\n                                  }\n                                  continue;\n                          }\n                          special = jQuery.event.special[ type ] || {};\n                          for ( var j = pos || 0; j < eventType.length; j++ ) {\n                                  handleObj = eventType[ j ];\n                                  if ( handler.guid === handleObj.guid ) {\n                                          // remove the given handler for the given type\n                                          if ( all || namespace.test( handleObj.namespace ) ) {\n                                                  if ( pos == null ) {\n                                                          eventType.splice( j--, 1 );\n                                                  }\n                                                  if ( special.remove ) {\n                                                          special.remove.call( elem, handleObj );\n                                                  }\n                                          }\n                                          if ( pos != null ) {\n                                                  break;\n                                          }\n                                  }\n                          }\n                          // remove generic event handler if no more handlers exist\n                          if ( eventType.length === 0 || pos != null && eventType.length === 1 ) {\n                                  if ( !special.teardown || special.teardown.call( elem, namespaces ) === false ) {\n                                          removeEvent( elem, type, elemData.handle );\n                                  }\n                                  ret = null;\n                                  delete events[ type ];\n                          }\n                  }\n                  // Remove the expando if it\'s no longer used\n                  if ( jQuery.isEmptyObject( events ) ) {\n                          var handle = elemData.handle;\n                          if ( handle ) {\n                                  handle.elem = null;\n                          }\n                          delete elemData.events;\n                          delete elemData.handle;\n                          if ( jQuery.isEmptyObject( elemData ) ) {\n                                  jQuery.removeData( elem );\n                          }\n                  }\n          },\n          // bubbling is internal\n          trigger: function( event, data, elem /*, bubbling */ ) {\n                  // Event object or event type\n                  var type = event.type || event,\n                          bubbling = arguments[3];\n                  if ( !bubbling ) {\n                          event = typeof event === "object" ?\n                                  // jQuery.Event object\n                                  event[expando] ? event :\n                                  // Object literal\n                                  jQuery.extend( jQuery.Event(type), event ) :\n                                  // Just the event type (string)\n                                  jQuery.Event(type);\n                          if ( type.indexOf("!") >= 0 ) {\n                                  event.type = type = type.slice(0, -1);\n                                  event.exclusive = true;\n                          }\n                          // Handle a global trigger\n                          if ( !elem ) {\n                                  // Don\'t bubble custom events when global (to avoid too much overhead)\n                                  event.stopPropagation();\n                                  // Only trigger if we\'ve ever bound an event for it\n                                  if ( jQuery.event.global[ type ] ) {\n                                          jQuery.each( jQuery.cache, function() {\n                                                  if ( this.events && this.events[type] ) {\n                                                          jQuery.event.trigger( event, data, this.handle.elem );\n                                                  }\n                                          });\n                                  }\n                          }\n                          // Handle triggering a single element\n                          // don\'t do events on text and comment nodes\n                          if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 ) {\n                                  return undefined;\n                          }\n                          // Clean up in case it is reused\n                          event.result = undefined;\n                          event.target = elem;\n                          // Clone the incoming data, if any\n                          data = jQuery.makeArray( data );\n                          data.unshift( event );\n                  }\n                  event.currentTarget = elem;\n                  // Trigger the event, it is assumed that "handle" is a function\n                  var handle = jQuery.data( elem, "handle" );\n                  if ( handle ) {\n                          handle.apply( elem, data );\n                  }\n                  var parent = elem.parentNode || elem.ownerDocument;\n                  // Trigger an inline bound script\n                  try {\n                          if ( !(elem && elem.nodeName && jQuery.noData[elem.nodeName.toLowerCase()]) ) {\n                                  if ( elem[ "on" + type ] && elem[ "on" + type ].apply( elem, data ) === false ) {\n                                          event.result = false;\n                                  }\n                          }\n                  // prevent IE from throwing an error for some elements with some event types, see #3533\n                  } catch (e) {}\n                  if ( !event.isPropagationStopped() && parent ) {\n                          jQuery.event.trigger( event, data, parent, true );\n                  } else if ( !event.isDefaultPrevented() ) {\n                          var target = event.target, old,\n                                  isClick = jQuery.nodeName(target, "a") && type === "click",\n                                  special = jQuery.event.special[ type ] || {};\n                          if ( (!special._default || special._default.call( elem, event ) === false) && \n                                  !isClick && !(target && target.nodeName && jQuery.noData[target.nodeName.toLowerCase()]) ) {\n                                  try {\n                                          if ( target[ type ] ) {\n                                                  // Make sure that we don\'t accidentally re-trigger the onFOO events\n                                                  old = target[ "on" + type ];\n                                                  if ( old ) {\n                                                          target[ "on" + type ] = null;\n                                                  }\n                                                  jQuery.event.triggered = true;\n                                                  target[ type ]();\n                                          }\n                                  // prevent IE from throwing an error for some elements with some event types, see #3533\n                                  } catch (e) {}\n                                  if ( old ) {\n                                          target[ "on" + type ] = old;\n                                  }\n                                  jQuery.event.triggered = false;\n                          }\n                  }\n          },\n          handle: function( event ) {\n                  var all, handlers, namespaces, namespace, events;\n                  event = arguments[0] = jQuery.event.fix( event || window.event );\n                  event.currentTarget = this;\n                  // Namespaced event handlers\n                  all = event.type.indexOf(".") < 0 && !event.exclusive;\n                  if ( !all ) {\n                          namespaces = event.type.split(".");\n                          event.type = namespaces.shift();\n                          namespace = new RegExp("(^|\\\\.)" + namespaces.slice(0).sort().join("\\\\.(?:.*\\\\.)?") + "(\\\\.|$)");\n                  }\n                  var events = jQuery.data(this, "events"), handlers = events[ event.type ];\n                  if ( events && handlers ) {\n                          // Clone the handlers to prevent manipulation\n                          handlers = handlers.slice(0);\n                          for ( var j = 0, l = handlers.length; j < l; j++ ) {\n                                  var handleObj = handlers[ j ];\n                                  // Filter the functions by class\n                                  if ( all || namespace.test( handleObj.namespace ) ) {\n                                          // Pass in a reference to the handler function itself\n                                          // So that we can later remove it\n                                          event.handler = handleObj.handler;\n                                          event.data = handleObj.data;\n                                          event.handleObj = handleObj;\n          \n                                          var ret = handleObj.handler.apply( this, arguments );\n                                          if ( ret !== undefined ) {\n                                                  event.result = ret;\n                                                  if ( ret === false ) {\n                                                          event.preventDefault();\n                                                          event.stopPropagation();\n                                                  }\n                                          }\n                                          if ( event.isImmediatePropagationStopped() ) {\n                                                  break;\n                                          }\n                                  }\n                          }\n                  }\n                  return event.result;\n          },\n          props: "altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode layerX layerY metaKey newValue offsetX offsetY originalTarget pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta which".split(" "),\n          fix: function( event ) {\n                  if ( event[ expando ] ) {\n                          return event;\n                  }\n                  // store a copy of the original event object\n                  // and "clone" to set read-only properties\n                  var originalEvent = event;\n                  event = jQuery.Event( originalEvent );\n                  for ( var i = this.props.length, prop; i; ) {\n                          prop = this.props[ --i ];\n                          event[ prop ] = originalEvent[ prop ];\n                  }\n                  // Fix target property, if necessary\n                  if ( !event.target ) {\n                          event.target = event.srcElement || document; // Fixes #1925 where srcElement might not be defined either\n                  }\n                  // check if target is a textnode (safari)\n                  if ( event.target.nodeType === 3 ) {\n                          event.target = event.target.parentNode;\n                  }\n                  // Add relatedTarget, if necessary\n                  if ( !event.relatedTarget && event.fromElement ) {\n                          event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;\n                  }\n                  // Calculate pageX/Y if missing and clientX/Y available\n                  if ( event.pageX == null && event.clientX != null ) {\n                          var doc = document.documentElement, body = document.body;\n                          event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);\n                          event.pageY = event.clientY + (doc && doc.scrollTop  || body && body.scrollTop  || 0) - (doc && doc.clientTop  || body && body.clientTop  || 0);\n                  }\n                  // Add which for key events\n                  if ( !event.which && ((event.charCode || event.charCode === 0) ? event.charCode : event.keyCode) ) {\n                          event.which = event.charCode || event.keyCode;\n                  }\n                  // Add metaKey to non-Mac browsers (use ctrl for PC\'s and Meta for Macs)\n                  if ( !event.metaKey && event.ctrlKey ) {\n                          event.metaKey = event.ctrlKey;\n                  }\n                  // Add which for click: 1 === left; 2 === middle; 3 === right\n                  // Note: button is not normalized, so don\'t use it\n                  if ( !event.which && event.button !== undefined ) {\n                          event.which = (event.button & 1 ? 1 : ( event.button & 2 ? 3 : ( event.button & 4 ? 2 : 0 ) ));\n                  }\n                  return event;\n          },\n          // Deprecated, use jQuery.guid instead\n          guid: 1E8,\n          // Deprecated, use jQuery.proxy instead\n          proxy: jQuery.proxy,\n          special: {\n                  ready: {\n                          // Make sure the ready event is setup\n                          setup: jQuery.bindReady,\n                          teardown: jQuery.noop\n                  },\n                  live: {\n                          add: function( handleObj ) {\n                                  jQuery.event.add( this, handleObj.origType, jQuery.extend({}, handleObj, {handler: liveHandler}) ); \n                          },\n                          remove: function( handleObj ) {\n                                  var remove = true,\n                                          type = handleObj.origType.replace(rnamespaces, "");\n                                  \n                                  jQuery.each( jQuery.data(this, "events").live || [], function() {\n                                          if ( type === this.origType.replace(rnamespaces, "") ) {\n                                                  remove = false;\n                                                  return false;\n                                          }\n                                  });\n                                  if ( remove ) {\n                                          jQuery.event.remove( this, handleObj.origType, liveHandler );\n                                  }\n                          }\n                  },\n                  beforeunload: {\n                          setup: function( data, namespaces, eventHandle ) {\n                                  // We only want to do this special case on windows\n                                  if ( this.setInterval ) {\n                                          this.onbeforeunload = eventHandle;\n                                  }\n                                  return false;\n                          },\n                          teardown: function( namespaces, eventHandle ) {\n                                  if ( this.onbeforeunload === eventHandle ) {\n                                          this.onbeforeunload = null;\n                                  }\n                          }\n                  }\n          }\n  };\n  var removeEvent = document.removeEventListener ?\n          function( elem, type, handle ) {\n                  elem.removeEventListener( type, handle, false );\n          } : \n          function( elem, type, handle ) {\n                  elem.detachEvent( "on" + type, handle );\n          };\n  jQuery.Event = function( src ) {\n          // Allow instantiation without the \'new\' keyword\n          if ( !this.preventDefault ) {\n                  return new jQuery.Event( src );\n          }\n          // Event object\n          if ( src && src.type ) {\n                  this.originalEvent = src;\n                  this.type = src.type;\n          // Event type\n          } else {\n                  this.type = src;\n          }\n          // timeStamp is buggy for some events on Firefox(#3843)\n          // So we won\'t rely on the native value\n          this.timeStamp = now();\n          // Mark it as fixed\n          this[ expando ] = true;\n  };\n  function returnFalse() {\n          return false;\n  }\n  function returnTrue() {\n          return true;\n  }\n  // jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n  // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\n  jQuery.Event.prototype = {\n          preventDefault: function() {\n                  this.isDefaultPrevented = returnTrue;\n                  var e = this.originalEvent;\n                  if ( !e ) {\n                          return;\n                  }\n                  \n                  // if preventDefault exists run it on the original event\n                  if ( e.preventDefault ) {\n                          e.preventDefault();\n                  }\n                  // otherwise set the returnValue property of the original event to false (IE)\n                  e.returnValue = false;\n          },\n          stopPropagation: function() {\n                  this.isPropagationStopped = returnTrue;\n                  var e = this.originalEvent;\n                  if ( !e ) {\n                          return;\n                  }\n                  // if stopPropagation exists run it on the original event\n                  if ( e.stopPropagation ) {\n                          e.stopPropagation();\n                  }\n                  // otherwise set the cancelBubble property of the original event to true (IE)\n                  e.cancelBubble = true;\n          },\n          stopImmediatePropagation: function() {\n                  this.isImmediatePropagationStopped = returnTrue;\n                  this.stopPropagation();\n          },\n          isDefaultPrevented: returnFalse,\n          isPropagationStopped: returnFalse,\n          isImmediatePropagationStopped: returnFalse\n  };\n  // Checks if an event happened on an element within another element\n  // Used in jQuery.event.special.mouseenter and mouseleave handlers\n  var withinElement = function( event ) {\n          // Check if mouse(over|out) are still within the same parent element\n          var parent = event.relatedTarget;\n          // Firefox sometimes assigns relatedTarget a XUL element\n          // which we cannot access the parentNode property of\n          try {\n                  // Traverse up the tree\n                  while ( parent && parent !== this ) {\n                          parent = parent.parentNode;\n                  }\n                  if ( parent !== this ) {\n                          // set the correct event type\n                          event.type = event.data;\n                          // handle event if we actually just moused on to a non sub-element\n                          jQuery.event.handle.apply( this, arguments );\n                  }\n          // assuming we\'ve left the element since we most likely mousedover a xul element\n          } catch(e) { }\n  },\n  // In case of event delegation, we only need to rename the event.type,\n  // liveHandler will take care of the rest.\n  delegate = function( event ) {\n          event.type = event.data;\n          jQuery.event.handle.apply( this, arguments );\n  };\n  // Create mouseenter and mouseleave events\n  jQuery.each({\n          mouseenter: "mouseover",\n          mouseleave: "mouseout"\n  }, function( orig, fix ) {\n          jQuery.event.special[ orig ] = {\n                  setup: function( data ) {\n                          jQuery.event.add( this, fix, data && data.selector ? delegate : withinElement, orig );\n                  },\n                  teardown: function( data ) {\n                          jQuery.event.remove( this, fix, data && data.selector ? delegate : withinElement );\n                  }\n          };\n  });\n  // submit delegation\n  if ( !jQuery.support.submitBubbles ) {\n          jQuery.event.special.submit = {\n                  setup: function( data, namespaces ) {\n                          if ( this.nodeName.toLowerCase() !== "form" ) {\n                                  jQuery.event.add(this, "click.specialSubmit", function( e ) {\n                                          var elem = e.target, type = elem.type;\n                                          if ( (type === "submit" || type === "image") && jQuery( elem ).closest("form").length ) {\n                                                  return trigger( "submit", this, arguments );\n                                          }\n                                  });\n           \n                                  jQuery.event.add(this, "keypress.specialSubmit", function( e ) {\n                                          var elem = e.target, type = elem.type;\n                                          if ( (type === "text" || type === "password") && jQuery( elem ).closest("form").length && e.keyCode === 13 ) {\n                                                  return trigger( "submit", this, arguments );\n                                          }\n                                  });\n                          } else {\n                                  return false;\n                          }\n                  },\n                  teardown: function( namespaces ) {\n                          jQuery.event.remove( this, ".specialSubmit" );\n                  }\n          };\n  }\n  // change delegation, happens here so we have bind.\n  if ( !jQuery.support.changeBubbles ) {\n          var formElems = /textarea|input|select/i,\n          changeFilters,\n          getVal = function( elem ) {\n                  var type = elem.type, val = elem.value;\n                  if ( type === "radio" || type === "checkbox" ) {\n                          val = elem.checked;\n                  } else if ( type === "select-multiple" ) {\n                          val = elem.selectedIndex > -1 ?\n                                  jQuery.map( elem.options, function( elem ) {\n                                          return elem.selected;\n                                  }).join("-") :\n                                  "";\n                  } else if ( elem.nodeName.toLowerCase() === "select" ) {\n                          val = elem.selectedIndex;\n                  }\n                  return val;\n          },\n          testChange = function testChange( e ) {\n                  var elem = e.target, data, val;\n                  if ( !formElems.test( elem.nodeName ) || elem.readOnly ) {\n                          return;\n                  }\n                  data = jQuery.data( elem, "_change_data" );\n                  val = getVal(elem);\n                  // the current data will be also retrieved by beforeactivate\n                  if ( e.type !== "focusout" || elem.type !== "radio" ) {\n                          jQuery.data( elem, "_change_data", val );\n                  }\n                  \n                  if ( data === undefined || val === data ) {\n                          return;\n                  }\n                  if ( data != null || val ) {\n                          e.type = "change";\n                          return jQuery.event.trigger( e, arguments[1], elem );\n                  }\n          };\n          jQuery.event.special.change = {\n                  filters: {\n                          focusout: testChange, \n                          click: function( e ) {\n                                  var elem = e.target, type = elem.type;\n                                  if ( type === "radio" || type === "checkbox" || elem.nodeName.toLowerCase() === "select" ) {\n                                          return testChange.call( this, e );\n                                  }\n                          },\n                          // Change has to be called before submit\n                          // Keydown will be called before keypress, which is used in submit-event delegation\n                          keydown: function( e ) {\n                                  var elem = e.target, type = elem.type;\n                                  if ( (e.keyCode === 13 && elem.nodeName.toLowerCase() !== "textarea") ||\n                                          (e.keyCode === 32 && (type === "checkbox" || type === "radio")) ||\n                                          type === "select-multiple" ) {\n                                          return testChange.call( this, e );\n                                  }\n                          },\n                          // Beforeactivate happens also before the previous element is blurred\n                          // with this event you can\'t trigger a change event, but you can store\n                          // information/focus[in] is not needed anymore\n                          beforeactivate: function( e ) {\n                                  var elem = e.target;\n                                  jQuery.data( elem, "_change_data", getVal(elem) );\n                          }\n                  },\n                  setup: function( data, namespaces ) {\n                          if ( this.type === "file" ) {\n                                  return false;\n                          }\n                          for ( var type in changeFilters ) {\n                                  jQuery.event.add( this, type + ".specialChange", changeFilters[type] );\n                          }\n                          return formElems.test( this.nodeName );\n                  },\n                  teardown: function( namespaces ) {\n                          jQuery.event.remove( this, ".specialChange" );\n                          return formElems.test( this.nodeName );\n                  }\n          };\n          changeFilters = jQuery.event.special.change.filters;\n  }\n  function trigger( type, elem, args ) {\n          args[0].type = type;\n          return jQuery.event.handle.apply( elem, args );\n  }\n  // Create "bubbling" focus and blur events\n  if ( document.addEventListener ) {\n          jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {\n                  jQuery.event.special[ fix ] = {\n                          setup: function() {\n                                  this.addEventListener( orig, handler, true );\n                          }, \n                          teardown: function() { \n                                  this.removeEventListener( orig, handler, true );\n                          }\n                  };\n                  function handler( e ) { \n                          e = jQuery.event.fix( e );\n                          e.type = fix;\n                          return jQuery.event.handle.call( this, e );\n                  }\n          });\n  }\n  jQuery.each(["bind", "one"], function( i, name ) {\n          jQuery.fn[ name ] = function( type, data, fn ) {\n                  // Handle object literals\n                  if ( typeof type === "object" ) {\n                          for ( var key in type ) {\n                                  this[ name ](key, data, type[key], fn);\n                          }\n                          return this;\n                  }\n                  \n                  if ( jQuery.isFunction( data ) ) {\n                          fn = data;\n                          data = undefined;\n                  }\n                  var handler = name === "one" ? jQuery.proxy( fn, function( event ) {\n                          jQuery( this ).unbind( event, handler );\n                          return fn.apply( this, arguments );\n                  }) : fn;\n                  if ( type === "unload" && name !== "one" ) {\n                          this.one( type, data, fn );\n                  } else {\n                          for ( var i = 0, l = this.length; i < l; i++ ) {\n                                  jQuery.event.add( this[i], type, handler, data );\n                          }\n                  }\n                  return this;\n          };\n  });\n  jQuery.fn.extend({\n          unbind: function( type, fn ) {\n                  // Handle object literals\n                  if ( typeof type === "object" && !type.preventDefault ) {\n                          for ( var key in type ) {\n                                  this.unbind(key, type[key]);\n                          }\n                  } else {\n                          for ( var i = 0, l = this.length; i < l; i++ ) {\n                                  jQuery.event.remove( this[i], type, fn );\n                          }\n                  }\n                  return this;\n          },\n          \n          delegate: function( selector, types, data, fn ) {\n                  return this.live( types, data, fn, selector );\n          },\n          \n          undelegate: function( selector, types, fn ) {\n                  if ( arguments.length === 0 ) {\n                                  return this.unbind( "live" );\n                  \n                  } else {\n                          return this.die( types, null, fn, selector );\n                  }\n          },\n          \n          trigger: function( type, data ) {\n                  return this.each(function() {\n                          jQuery.event.trigger( type, data, this );\n                  });\n          },\n          triggerHandler: function( type, data ) {\n                  if ( this[0] ) {\n                          var event = jQuery.Event( type );\n                          event.preventDefault();\n                          event.stopPropagation();\n                          jQuery.event.trigger( event, data, this[0] );\n                          return event.result;\n                  }\n          },\n          toggle: function( fn ) {\n                  // Save reference to arguments for access in closure\n                  var args = arguments, i = 1;\n                  // link all the functions, so any of them can unbind this click handler\n                  while ( i < args.length ) {\n                          jQuery.proxy( fn, args[ i++ ] );\n                  }\n                  return this.click( jQuery.proxy( fn, function( event ) {\n                          // Figure out which function to execute\n                          var lastToggle = ( jQuery.data( this, "lastToggle" + fn.guid ) || 0 ) % i;\n                          jQuery.data( this, "lastToggle" + fn.guid, lastToggle + 1 );\n                          // Make sure that clicks stop\n                          event.preventDefault();\n                          // and execute the function\n                          return args[ lastToggle ].apply( this, arguments ) || false;\n                  }));\n          },\n          hover: function( fnOver, fnOut ) {\n                  return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n          }\n  });\n  var liveMap = {\n          focus: "focusin",\n          blur: "focusout",\n          mouseenter: "mouseover",\n          mouseleave: "mouseout"\n  };\n  jQuery.each(["live", "die"], function( i, name ) {\n          jQuery.fn[ name ] = function( types, data, fn, origSelector /* Internal Use Only */ ) {\n                  var type, i = 0, match, namespaces, preType,\n                          selector = origSelector || this.selector,\n                          context = origSelector ? this : jQuery( this.context );\n                  if ( jQuery.isFunction( data ) ) {\n                          fn = data;\n                          data = undefined;\n                  }\n                  types = (types || "").split(" ");\n                  while ( (type = types[ i++ ]) != null ) {\n                          match = rnamespaces.exec( type );\n                          namespaces = "";\n                          if ( match )  {\n                                  namespaces = match[0];\n                                  type = type.replace( rnamespaces, "" );\n                          }\n                          if ( type === "hover" ) {\n                                  types.push( "mouseenter" + namespaces, "mouseleave" + namespaces );\n                                  continue;\n                          }\n                          preType = type;\n                          if ( type === "focus" || type === "blur" ) {\n                                  types.push( liveMap[ type ] + namespaces );\n                                  type = type + namespaces;\n                          } else {\n                                  type = (liveMap[ type ] || type) + namespaces;\n                          }\n                          if ( name === "live" ) {\n                                  // bind live handler\n                                  context.each(function(){\n                                          jQuery.event.add( this, liveConvert( type, selector ),\n                                                  { data: data, selector: selector, handler: fn, origType: type, origHandler: fn, preType: preType } );\n                                  });\n                          } else {\n                                  // unbind live handler\n                                  context.unbind( liveConvert( type, selector ), fn );\n                          }\n                  }\n                  \n                  return this;\n          }\n  });\n  function liveHandler( event ) {\n          var stop, elems = [], selectors = [], args = arguments,\n                  related, match, handleObj, elem, j, i, l, data,\n                  events = jQuery.data( this, "events" );\n          // Make sure we avoid non-left-click bubbling in Firefox (#3861)\n          if ( event.liveFired === this || !events || !events.live || event.button && event.type === "click" ) {\n                  return;\n          }\n          event.liveFired = this;\n          var live = events.live.slice(0);\n          for ( j = 0; j < live.length; j++ ) {\n                  handleObj = live[j];\n                  if ( handleObj.origType.replace( rnamespaces, "" ) === event.type ) {\n                          selectors.push( handleObj.selector );\n                  } else {\n                          live.splice( j--, 1 );\n                  }\n          }\n          match = jQuery( event.target ).closest( selectors, event.currentTarget );\n          for ( i = 0, l = match.length; i < l; i++ ) {\n                  for ( j = 0; j < live.length; j++ ) {\n                          handleObj = live[j];\n                          if ( match[i].selector === handleObj.selector ) {\n                                  elem = match[i].elem;\n                                  related = null;\n                                  // Those two events require additional checking\n                                  if ( handleObj.preType === "mouseenter" || handleObj.preType === "mouseleave" ) {\n                                          related = jQuery( event.relatedTarget ).closest( handleObj.selector )[0];\n                                  }\n                                  if ( !related || related !== elem ) {\n                                          elems.push({ elem: elem, handleObj: handleObj });\n                                  }\n                          }\n                  }\n          }\n          for ( i = 0, l = elems.length; i < l; i++ ) {\n                  match = elems[i];\n                  event.currentTarget = match.elem;\n                  event.data = match.handleObj.data;\n                  event.handleObj = match.handleObj;\n                  if ( match.handleObj.origHandler.apply( match.elem, args ) === false ) {\n                          stop = false;\n                          break;\n                  }\n          }\n          return stop;\n  }\n  function liveConvert( type, selector ) {\n          return "live." + (type && type !== "*" ? type + "." : "") + selector.replace(/\\./g, "`").replace(/ /g, "&");\n  }\n  jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +\n          "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +\n          "change select submit keydown keypress keyup error").split(" "), function( i, name ) {\n          // Handle event binding\n          jQuery.fn[ name ] = function( fn ) {\n                  return fn ? this.bind( name, fn ) : this.trigger( name );\n          };\n          if ( jQuery.attrFn ) {\n                  jQuery.attrFn[ name ] = true;\n          }\n  });\n  // Prevent memory leaks in IE\n  // Window isn\'t included so as not to unbind existing unload events\n  // More info:\n  //  - http://isaacschlueter.com/2006/10/msie-memory-leaks/\n  if ( window.attachEvent && !window.addEventListener ) {\n          window.attachEvent("onunload", function() {\n                  for ( var id in jQuery.cache ) {\n                          if ( jQuery.cache[ id ].handle ) {\n                                  // Try/Catch is to handle iframes being unloaded, see #4280\n                                  try {\n                                          jQuery.event.remove( jQuery.cache[ id ].handle.elem );\n                                  } catch(e) {}\n                          }\n                  }\n          });\n  }\n  /*!\n   * Sizzle CSS Selector Engine - v1.0\n   *  Copyright 2009, The Dojo Foundation\n   *  Released under the MIT, BSD, and GPL Licenses.\n   *  More information: http://sizzlejs.com/\n   */\n  (function(){\n  var chunker = /((?:\\((?:\\([^()]+\\)|[^()]+)+\\)|\\[(?:\\[[^[\\]]*\\]|[\'"][^\'"]*[\'"]|[^[\\]\'"]+)+\\]|\\\\.|[^ >+~,(\\[\\\\]+)+|[>+~])(\\s*,\\s*)?((?:.|\\r|\\n)*)/g,\n          done = 0,\n          toString = Object.prototype.toString,\n          hasDuplicate = false,\n          baseHasDuplicate = true;\n  // Here we check if the JavaScript engine is using some sort of\n  // optimization where it does not always call our comparision\n  // function. If that is the case, discard the hasDuplicate value.\n  //   Thus far that includes Google Chrome.\n  [0, 0].sort(function(){\n          baseHasDuplicate = false;\n          return 0;\n  });\n  var Sizzle = function(selector, context, results, seed) {\n          results = results || [];\n          var origContext = context = context || document;\n          if ( context.nodeType !== 1 && context.nodeType !== 9 ) {\n                  return [];\n          }\n          \n          if ( !selector || typeof selector !== "string" ) {\n                  return results;\n          }\n          var parts = [], m, set, checkSet, extra, prune = true, contextXML = isXML(context),\n                  soFar = selector;\n          \n          // Reset the position of the chunker regexp (start from head)\n          while ( (chunker.exec(""), m = chunker.exec(soFar)) !== null ) {\n                  soFar = m[3];\n                  \n                  parts.push( m[1] );\n                  \n                  if ( m[2] ) {\n                          extra = m[3];\n                          break;\n                  }\n          }\n          if ( parts.length > 1 && origPOS.exec( selector ) ) {\n                  if ( parts.length === 2 && Expr.relative[ parts[0] ] ) {\n                          set = posProcess( parts[0] + parts[1], context );\n                  } else {\n                          set = Expr.relative[ parts[0] ] ?\n                                  [ context ] :\n                                  Sizzle( parts.shift(), context );\n                          while ( parts.length ) {\n                                  selector = parts.shift();\n                                  if ( Expr.relative[ selector ] ) {\n                                          selector += parts.shift();\n                                  }\n                                  \n                                  set = posProcess( selector, set );\n                          }\n                  }\n          } else {\n                  // Take a shortcut and set the context if the root selector is an ID\n                  // (but not if it\'ll be faster if the inner selector is an ID)\n                  if ( !seed && parts.length > 1 && context.nodeType === 9 && !contextXML &&\n                                  Expr.match.ID.test(parts[0]) && !Expr.match.ID.test(parts[parts.length - 1]) ) {\n                          var ret = Sizzle.find( parts.shift(), context, contextXML );\n                          context = ret.expr ? Sizzle.filter( ret.expr, ret.set )[0] : ret.set[0];\n                  }\n                  if ( context ) {\n                          var ret = seed ?\n                                  { expr: parts.pop(), set: makeArray(seed) } :\n                                  Sizzle.find( parts.pop(), parts.length === 1 && (parts[0] === "~" || parts[0] === "+") && context.parentNode ? context.parentNode : context, contextXML );\n                          set = ret.expr ? Sizzle.filter( ret.expr, ret.set ) : ret.set;\n                          if ( parts.length > 0 ) {\n                                  checkSet = makeArray(set);\n                          } else {\n                                  prune = false;\n                          }\n                          while ( parts.length ) {\n                                  var cur = parts.pop(), pop = cur;\n                                  if ( !Expr.relative[ cur ] ) {\n                                          cur = "";\n                                  } else {\n                                          pop = parts.pop();\n                                  }\n                                  if ( pop == null ) {\n                                          pop = context;\n                                  }\n                                  Expr.relative[ cur ]( checkSet, pop, contextXML );\n                          }\n                  } else {\n                          checkSet = parts = [];\n                  }\n          }\n          if ( !checkSet ) {\n                  checkSet = set;\n          }\n          if ( !checkSet ) {\n                  Sizzle.error( cur || selector );\n          }\n          if ( toString.call(checkSet) === "[object Array]" ) {\n                  if ( !prune ) {\n                          results.push.apply( results, checkSet );\n                  } else if ( context && context.nodeType === 1 ) {\n                          for ( var i = 0; checkSet[i] != null; i++ ) {\n                                  if ( checkSet[i] && (checkSet[i] === true || checkSet[i].nodeType === 1 && contains(context, checkSet[i])) ) {\n                                          results.push( set[i] );\n                                  }\n                          }\n                  } else {\n                          for ( var i = 0; checkSet[i] != null; i++ ) {\n                                  if ( checkSet[i] && checkSet[i].nodeType === 1 ) {\n                                          results.push( set[i] );\n                                  }\n                          }\n                  }\n          } else {\n                  makeArray( checkSet, results );\n          }\n          if ( extra ) {\n                  Sizzle( extra, origContext, results, seed );\n                  Sizzle.uniqueSort( results );\n          }\n          return results;\n  };\n  Sizzle.uniqueSort = function(results){\n          if ( sortOrder ) {\n                  hasDuplicate = baseHasDuplicate;\n                  results.sort(sortOrder);\n                  if ( hasDuplicate ) {\n                          for ( var i = 1; i < results.length; i++ ) {\n                                  if ( results[i] === results[i-1] ) {\n                                          results.splice(i--, 1);\n                                  }\n                          }\n                  }\n          }\n          return results;\n  };\n  Sizzle.matches = function(expr, set){\n          return Sizzle(expr, null, null, set);\n  };\n  Sizzle.find = function(expr, context, isXML){\n          var set, match;\n          if ( !expr ) {\n                  return [];\n          }\n          for ( var i = 0, l = Expr.order.length; i < l; i++ ) {\n                  var type = Expr.order[i], match;\n                  \n                  if ( (match = Expr.leftMatch[ type ].exec( expr )) ) {\n                          var left = match[1];\n                          match.splice(1,1);\n                          if ( left.substr( left.length - 1 ) !== "\\\\" ) {\n                                  match[1] = (match[1] || "").replace(/\\\\/g, "");\n                                  set = Expr.find[ type ]( match, context, isXML );\n                                  if ( set != null ) {\n                                          expr = expr.replace( Expr.match[ type ], "" );\n                                          break;\n                                  }\n                          }\n                  }\n          }\n          if ( !set ) {\n                  set = context.getElementsByTagName("*");\n          }\n          return {set: set, expr: expr};\n  };\n  Sizzle.filter = function(expr, set, inplace, not){\n          var old = expr, result = [], curLoop = set, match, anyFound,\n                  isXMLFilter = set && set[0] && isXML(set[0]);\n          while ( expr && set.length ) {\n                  for ( var type in Expr.filter ) {\n                          if ( (match = Expr.leftMatch[ type ].exec( expr )) != null && match[2] ) {\n                                  var filter = Expr.filter[ type ], found, item, left = match[1];\n                                  anyFound = false;\n                                  match.splice(1,1);\n                                  if ( left.substr( left.length - 1 ) === "\\\\" ) {\n                                          continue;\n                                  }\n                                  if ( curLoop === result ) {\n                                          result = [];\n                                  }\n                                  if ( Expr.preFilter[ type ] ) {\n                                          match = Expr.preFilter[ type ]( match, curLoop, inplace, result, not, isXMLFilter );\n                                          if ( !match ) {\n                                                  anyFound = found = true;\n                                          } else if ( match === true ) {\n                                                  continue;\n                                          }\n                                  }\n                                  if ( match ) {\n                                          for ( var i = 0; (item = curLoop[i]) != null; i++ ) {\n                                                  if ( item ) {\n                                                          found = filter( item, match, i, curLoop );\n                                                          var pass = not ^ !!found;\n                                                          if ( inplace && found != null ) {\n                                                                  if ( pass ) {\n                                                                          anyFound = true;\n                                                                  } else {\n                                                                          curLoop[i] = false;\n                                                                  }\n                                                          } else if ( pass ) {\n                                                                  result.push( item );\n                                                                  anyFound = true;\n                                                          }\n                                                  }\n                                          }\n                                  }\n                                  if ( found !== undefined ) {\n                                          if ( !inplace ) {\n                                                  curLoop = result;\n                                          }\n                                          expr = expr.replace( Expr.match[ type ], "" );\n                                          if ( !anyFound ) {\n                                                  return [];\n                                          }\n                                          break;\n                                  }\n                          }\n                  }\n                  // Improper expression\n                  if ( expr === old ) {\n                          if ( anyFound == null ) {\n                                  Sizzle.error( expr );\n                          } else {\n                                  break;\n                          }\n                  }\n                  old = expr;\n          }\n          return curLoop;\n  };\n  Sizzle.error = function( msg ) {\n          throw "Syntax error, unrecognized expression: " + msg;\n  };\n  var Expr = Sizzle.selectors = {\n          order: [ "ID", "NAME", "TAG" ],\n          match: {\n                  ID: /#((?:[\\w\\u00c0-\\uFFFF-]|\\\\.)+)/,\n                  CLASS: /\\.((?:[\\w\\u00c0-\\uFFFF-]|\\\\.)+)/,\n                  NAME: /\\[name=[\'"]*((?:[\\w\\u00c0-\\uFFFF-]|\\\\.)+)[\'"]*\\]/,\n                  ATTR: /\\[\\s*((?:[\\w\\u00c0-\\uFFFF-]|\\\\.)+)\\s*(?:(\\S?=)\\s*([\'"]*)(.*?)\\3|)\\s*\\]/,\n                  TAG: /^((?:[\\w\\u00c0-\\uFFFF\\*-]|\\\\.)+)/,\n                  CHILD: /:(only|nth|last|first)-child(?:\\((even|odd|[\\dn+-]*)\\))?/,\n                  POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\\((\\d*)\\))?(?=[^-]|$)/,\n                  PSEUDO: /:((?:[\\w\\u00c0-\\uFFFF-]|\\\\.)+)(?:\\(([\'"]?)((?:\\([^\\)]+\\)|[^\\(\\)]*)+)\\2\\))?/\n          },\n          leftMatch: {},\n          attrMap: {\n                  "class": "className",\n                  "for": "htmlFor"\n          },\n          attrHandle: {\n                  href: function(elem){\n                          return elem.getAttribute("href");\n                  }\n          },\n          relative: {\n                  "+": function(checkSet, part){\n                          var isPartStr = typeof part === "string",\n                                  isTag = isPartStr && !/\\W/.test(part),\n                                  isPartStrNotTag = isPartStr && !isTag;\n                          if ( isTag ) {\n                                  part = part.toLowerCase();\n                          }\n                          for ( var i = 0, l = checkSet.length, elem; i < l; i++ ) {\n                                  if ( (elem = checkSet[i]) ) {\n                                          while ( (elem = elem.previousSibling) && elem.nodeType !== 1 ) {}\n                                          checkSet[i] = isPartStrNotTag || elem && elem.nodeName.toLowerCase() === part ?\n                                                  elem || false :\n                                                  elem === part;\n                                  }\n                          }\n                          if ( isPartStrNotTag ) {\n                                  Sizzle.filter( part, checkSet, true );\n                          }\n                  },\n                  ">": function(checkSet, part){\n                          var isPartStr = typeof part === "string";\n                          if ( isPartStr && !/\\W/.test(part) ) {\n                                  part = part.toLowerCase();\n                                  for ( var i = 0, l = checkSet.length; i < l; i++ ) {\n                                          var elem = checkSet[i];\n                                          if ( elem ) {\n                                                  var parent = elem.parentNode;\n                                                  checkSet[i] = parent.nodeName.toLowerCase() === part ? parent : false;\n                                          }\n                                  }\n                          } else {\n                                  for ( var i = 0, l = checkSet.length; i < l; i++ ) {\n                                          var elem = checkSet[i];\n                                          if ( elem ) {\n                                                  checkSet[i] = isPartStr ?\n                                                          elem.parentNode :\n                                                          elem.parentNode === part;\n                                          }\n                                  }\n                                  if ( isPartStr ) {\n                                          Sizzle.filter( part, checkSet, true );\n                                  }\n                          }\n                  },\n                  "": function(checkSet, part, isXML){\n                          var doneName = done++, checkFn = dirCheck;\n                          if ( typeof part === "string" && !/\\W/.test(part) ) {\n                                  var nodeCheck = part = part.toLowerCase();\n                                  checkFn = dirNodeCheck;\n                          }\n                          checkFn("parentNode", part, doneName, checkSet, nodeCheck, isXML);\n                  },\n                  "~": function(checkSet, part, isXML){\n                          var doneName = done++, checkFn = dirCheck;\n                          if ( typeof part === "string" && !/\\W/.test(part) ) {\n                                  var nodeCheck = part = part.toLowerCase();\n                                  checkFn = dirNodeCheck;\n                          }\n                          checkFn("previousSibling", part, doneName, checkSet, nodeCheck, isXML);\n                  }\n          },\n          find: {\n                  ID: function(match, context, isXML){\n                          if ( typeof context.getElementById !== "undefined" && !isXML ) {\n                                  var m = context.getElementById(match[1]);\n                                  return m ? [m] : [];\n                          }\n                  },\n                  NAME: function(match, context){\n                          if ( typeof context.getElementsByName !== "undefined" ) {\n                                  var ret = [], results = context.getElementsByName(match[1]);\n                                  for ( var i = 0, l = results.length; i < l; i++ ) {\n                                          if ( results[i].getAttribute("name") === match[1] ) {\n                                                  ret.push( results[i] );\n                                          }\n                                  }\n                                  return ret.length === 0 ? null : ret;\n                          }\n                  },\n                  TAG: function(match, context){\n                          return context.getElementsByTagName(match[1]);\n                  }\n          },\n          preFilter: {\n                  CLASS: function(match, curLoop, inplace, result, not, isXML){\n                          match = " " + match[1].replace(/\\\\/g, "") + " ";\n                          if ( isXML ) {\n                                  return match;\n                          }\n                          for ( var i = 0, elem; (elem = curLoop[i]) != null; i++ ) {\n                                  if ( elem ) {\n                                          if ( not ^ (elem.className && (" " + elem.className + " ").replace(/[\\t\\n]/g, " ").indexOf(match) >= 0) ) {\n                                                  if ( !inplace ) {\n                                                          result.push( elem );\n                                                  }\n                                          } else if ( inplace ) {\n                                                  curLoop[i] = false;\n                                          }\n                                  }\n                          }\n                          return false;\n                  },\n                  ID: function(match){\n                          return match[1].replace(/\\\\/g, "");\n                  },\n                  TAG: function(match, curLoop){\n                          return match[1].toLowerCase();\n                  },\n                  CHILD: function(match){\n                          if ( match[1] === "nth" ) {\n                                  // parse equations like \'even\', \'odd\', \'5\', \'2n\', \'3n+2\', \'4n-1\', \'-n+6\'\n                                  var test = /(-?)(\\d*)n((?:\\+|-)?\\d*)/.exec(\n                                          match[2] === "even" && "2n" || match[2] === "odd" && "2n+1" ||\n                                          !/\\D/.test( match[2] ) && "0n+" + match[2] || match[2]);\n                                  // calculate the numbers (first)n+(last) including if they are negative\n                                  match[2] = (test[1] + (test[2] || 1)) - 0;\n                                  match[3] = test[3] - 0;\n                          }\n                          // TODO: Move to normal caching system\n                          match[0] = done++;\n                          return match;\n                  },\n                  ATTR: function(match, curLoop, inplace, result, not, isXML){\n                          var name = match[1].replace(/\\\\/g, "");\n                          \n                          if ( !isXML && Expr.attrMap[name] ) {\n                                  match[1] = Expr.attrMap[name];\n                          }\n                          if ( match[2] === "~=" ) {\n                                  match[4] = " " + match[4] + " ";\n                          }\n                          return match;\n                  },\n                  PSEUDO: function(match, curLoop, inplace, result, not){\n                          if ( match[1] === "not" ) {\n                                  // If we\'re dealing with a complex expression, or a simple one\n                                  if ( ( chunker.exec(match[3]) || "" ).length > 1 || /^\\w/.test(match[3]) ) {\n                                          match[3] = Sizzle(match[3], null, null, curLoop);\n                                  } else {\n                                          var ret = Sizzle.filter(match[3], curLoop, inplace, true ^ not);\n                                          if ( !inplace ) {\n                                                  result.push.apply( result, ret );\n                                          }\n                                          return false;\n                                  }\n                          } else if ( Expr.match.POS.test( match[0] ) || Expr.match.CHILD.test( match[0] ) ) {\n                                  return true;\n                          }\n                          \n                          return match;\n                  },\n                  POS: function(match){\n                          match.unshift( true );\n                          return match;\n                  }\n          },\n          filters: {\n                  enabled: function(elem){\n                          return elem.disabled === false && elem.type !== "hidden";\n                  },\n                  disabled: function(elem){\n                          return elem.disabled === true;\n                  },\n                  checked: function(elem){\n                          return elem.checked === true;\n                  },\n                  selected: function(elem){\n                          // Accessing this property makes selected-by-default\n                          // options in Safari work properly\n                          elem.parentNode.selectedIndex;\n                          return elem.selected === true;\n                  },\n                  parent: function(elem){\n                          return !!elem.firstChild;\n                  },\n                  empty: function(elem){\n                          return !elem.firstChild;\n                  },\n                  has: function(elem, i, match){\n                          return !!Sizzle( match[3], elem ).length;\n                  },\n                  header: function(elem){\n                          return /h\\d/i.test( elem.nodeName );\n                  },\n                  text: function(elem){\n                          return "text" === elem.type;\n                  },\n                  radio: function(elem){\n                          return "radio" === elem.type;\n                  },\n                  checkbox: function(elem){\n                          return "checkbox" === elem.type;\n                  },\n                  file: function(elem){\n                          return "file" === elem.type;\n                  },\n                  password: function(elem){\n                          return "password" === elem.type;\n                  },\n                  submit: function(elem){\n                          return "submit" === elem.type;\n                  },\n                  image: function(elem){\n                          return "image" === elem.type;\n                  },\n                  reset: function(elem){\n                          return "reset" === elem.type;\n                  },\n                  button: function(elem){\n                          return "button" === elem.type || elem.nodeName.toLowerCase() === "button";\n                  },\n                  input: function(elem){\n                          return /input|select|textarea|button/i.test(elem.nodeName);\n                  }\n          },\n          setFilters: {\n                  first: function(elem, i){\n                          return i === 0;\n                  },\n                  last: function(elem, i, match, array){\n                          return i === array.length - 1;\n                  },\n                  even: function(elem, i){\n                          return i % 2 === 0;\n                  },\n                  odd: function(elem, i){\n                          return i % 2 === 1;\n                  },\n                  lt: function(elem, i, match){\n                          return i < match[3] - 0;\n                  },\n                  gt: function(elem, i, match){\n                          return i > match[3] - 0;\n                  },\n                  nth: function(elem, i, match){\n                          return match[3] - 0 === i;\n                  },\n                  eq: function(elem, i, match){\n                          return match[3] - 0 === i;\n                  }\n          },\n          filter: {\n                  PSEUDO: function(elem, match, i, array){\n                          var name = match[1], filter = Expr.filters[ name ];\n                          if ( filter ) {\n                                  return filter( elem, i, match, array );\n                          } else if ( name === "contains" ) {\n                                  return (elem.textContent || elem.innerText || getText([ elem ]) || "").indexOf(match[3]) >= 0;\n                          } else if ( name === "not" ) {\n                                  var not = match[3];\n                                  for ( var i = 0, l = not.length; i < l; i++ ) {\n                                          if ( not[i] === elem ) {\n                                                  return false;\n                                          }\n                                  }\n                                  return true;\n                          } else {\n                                  Sizzle.error( "Syntax error, unrecognized expression: " + name );\n                          }\n                  },\n                  CHILD: function(elem, match){\n                          var type = match[1], node = elem;\n                          switch (type) {\n                                  case \'only\':\n                                  case \'first\':\n                                          while ( (node = node.previousSibling) )	 {\n                                                  if ( node.nodeType === 1 ) { \n                                                          return false; \n                                                  }\n                                          }\n                                          if ( type === "first" ) { \n                                                  return true; \n                                          }\n                                          node = elem;\n                                  case \'last\':\n                                          while ( (node = node.nextSibling) )	 {\n                                                  if ( node.nodeType === 1 ) { \n                                                          return false; \n                                                  }\n                                          }\n                                          return true;\n                                  case \'nth\':\n                                          var first = match[2], last = match[3];\n                                          if ( first === 1 && last === 0 ) {\n                                                  return true;\n                                          }\n                                          \n                                          var doneName = match[0],\n                                                  parent = elem.parentNode;\n          \n                                          if ( parent && (parent.sizcache !== doneName || !elem.nodeIndex) ) {\n                                                  var count = 0;\n                                                  for ( node = parent.firstChild; node; node = node.nextSibling ) {\n                                                          if ( node.nodeType === 1 ) {\n                                                                  node.nodeIndex = ++count;\n                                                          }\n                                                  } \n                                                  parent.sizcache = doneName;\n                                          }\n                                          \n                                          var diff = elem.nodeIndex - last;\n                                          if ( first === 0 ) {\n                                                  return diff === 0;\n                                          } else {\n                                                  return ( diff % first === 0 && diff / first >= 0 );\n                                          }\n                          }\n                  },\n                  ID: function(elem, match){\n                          return elem.nodeType === 1 && elem.getAttribute("id") === match;\n                  },\n                  TAG: function(elem, match){\n                          return (match === "*" && elem.nodeType === 1) || elem.nodeName.toLowerCase() === match;\n                  },\n                  CLASS: function(elem, match){\n                          return (" " + (elem.className || elem.getAttribute("class")) + " ")\n                                  .indexOf( match ) > -1;\n                  },\n                  ATTR: function(elem, match){\n                          var name = match[1],\n                                  result = Expr.attrHandle[ name ] ?\n                                          Expr.attrHandle[ name ]( elem ) :\n                                          elem[ name ] != null ?\n                                                  elem[ name ] :\n                                                  elem.getAttribute( name ),\n                                  value = result + "",\n                                  type = match[2],\n                                  check = match[4];\n                          return result == null ?\n                                  type === "!=" :\n                                  type === "=" ?\n                                  value === check :\n                                  type === "*=" ?\n                                  value.indexOf(check) >= 0 :\n                                  type === "~=" ?\n                                  (" " + value + " ").indexOf(check) >= 0 :\n                                  !check ?\n                                  value && result !== false :\n                                  type === "!=" ?\n                                  value !== check :\n                                  type === "^=" ?\n                                  value.indexOf(check) === 0 :\n                                  type === "$=" ?\n                                  value.substr(value.length - check.length) === check :\n                                  type === "|=" ?\n                                  value === check || value.substr(0, check.length + 1) === check + "-" :\n                                  false;\n                  },\n                  POS: function(elem, match, i, array){\n                          var name = match[2], filter = Expr.setFilters[ name ];\n                          if ( filter ) {\n                                  return filter( elem, i, match, array );\n                          }\n                  }\n          }\n  };\n  var origPOS = Expr.match.POS;\n  for ( var type in Expr.match ) {\n          Expr.match[ type ] = new RegExp( Expr.match[ type ].source + /(?![^\\[]*\\])(?![^\\(]*\\))/.source );\n          Expr.leftMatch[ type ] = new RegExp( /(^(?:.|\\r|\\n)*?)/.source + Expr.match[ type ].source.replace(/\\\\(\\d+)/g, function(all, num){\n                  return "\\\\" + (num - 0 + 1);\n          }));\n  }\n  var makeArray = function(array, results) {\n          array = Array.prototype.slice.call( array, 0 );\n          if ( results ) {\n                  results.push.apply( results, array );\n                  return results;\n          }\n          \n          return array;\n  };\n  // Perform a simple check to determine if the browser is capable of\n  // converting a NodeList to an array using builtin methods.\n  // Also verifies that the returned array holds DOM nodes\n  // (which is not the case in the Blackberry browser)\n  try {\n          Array.prototype.slice.call( document.documentElement.childNodes, 0 )[0].nodeType;\n  // Provide a fallback method if it does not work\n  } catch(e){\n          makeArray = function(array, results) {\n                  var ret = results || [];\n                  if ( toString.call(array) === "[object Array]" ) {\n                          Array.prototype.push.apply( ret, array );\n                  } else {\n                          if ( typeof array.length === "number" ) {\n                                  for ( var i = 0, l = array.length; i < l; i++ ) {\n                                          ret.push( array[i] );\n                                  }\n                          } else {\n                                  for ( var i = 0; array[i]; i++ ) {\n                                          ret.push( array[i] );\n                                  }\n                          }\n                  }\n                  return ret;\n          };\n  }\n  var sortOrder;\n  if ( document.documentElement.compareDocumentPosition ) {\n          sortOrder = function( a, b ) {\n                  if ( !a.compareDocumentPosition || !b.compareDocumentPosition ) {\n                          if ( a == b ) {\n                                  hasDuplicate = true;\n                          }\n                          return a.compareDocumentPosition ? -1 : 1;\n                  }\n                  var ret = a.compareDocumentPosition(b) & 4 ? -1 : a === b ? 0 : 1;\n                  if ( ret === 0 ) {\n                          hasDuplicate = true;\n                  }\n                  return ret;\n          };\n  } else if ( "sourceIndex" in document.documentElement ) {\n          sortOrder = function( a, b ) {\n                  if ( !a.sourceIndex || !b.sourceIndex ) {\n                          if ( a == b ) {\n                                  hasDuplicate = true;\n                          }\n                          return a.sourceIndex ? -1 : 1;\n                  }\n                  var ret = a.sourceIndex - b.sourceIndex;\n                  if ( ret === 0 ) {\n                          hasDuplicate = true;\n                  }\n                  return ret;\n          };\n  } else if ( document.createRange ) {\n          sortOrder = function( a, b ) {\n                  if ( !a.ownerDocument || !b.ownerDocument ) {\n                          if ( a == b ) {\n                                  hasDuplicate = true;\n                          }\n                          return a.ownerDocument ? -1 : 1;\n                  }\n                  var aRange = a.ownerDocument.createRange(), bRange = b.ownerDocument.createRange();\n                  aRange.setStart(a, 0);\n                  aRange.setEnd(a, 0);\n                  bRange.setStart(b, 0);\n                  bRange.setEnd(b, 0);\n                  var ret = aRange.compareBoundaryPoints(Range.START_TO_END, bRange);\n                  if ( ret === 0 ) {\n                          hasDuplicate = true;\n                  }\n                  return ret;\n          };\n  }\n  // Utility function for retreiving the text value of an array of DOM nodes\n  function getText( elems ) {\n          var ret = "", elem;\n          for ( var i = 0; elems[i]; i++ ) {\n                  elem = elems[i];\n                  // Get the text from text nodes and CDATA nodes\n                  if ( elem.nodeType === 3 || elem.nodeType === 4 ) {\n                          ret += elem.nodeValue;\n                  // Traverse everything else, except comment nodes\n                  } else if ( elem.nodeType !== 8 ) {\n                          ret += getText( elem.childNodes );\n                  }\n          }\n          return ret;\n  }\n  // Check to see if the browser returns elements by name when\n  // querying by getElementById (and provide a workaround)\n  (function(){\n          // We\'re going to inject a fake input element with a specified name\n          var form = document.createElement("div"),\n                  id = "script" + (new Date).getTime();\n          form.innerHTML = "<a name=\'" + id + "\'/>";\n          // Inject it into the root element, check its status, and remove it quickly\n          var root = document.documentElement;\n          root.insertBefore( form, root.firstChild );\n          // The workaround has to do additional checks after a getElementById\n          // Which slows things down for other browsers (hence the branching)\n          if ( document.getElementById( id ) ) {\n                  Expr.find.ID = function(match, context, isXML){\n                          if ( typeof context.getElementById !== "undefined" && !isXML ) {\n                                  var m = context.getElementById(match[1]);\n                                  return m ? m.id === match[1] || typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id").nodeValue === match[1] ? [m] : undefined : [];\n                          }\n                  };\n                  Expr.filter.ID = function(elem, match){\n                          var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");\n                          return elem.nodeType === 1 && node && node.nodeValue === match;\n                  };\n          }\n          root.removeChild( form );\n          root = form = null; // release memory in IE\n  })();\n  (function(){\n          // Check to see if the browser returns only elements\n          // when doing getElementsByTagName("*")\n          // Create a fake element\n          var div = document.createElement("div");\n          div.appendChild( document.createComment("") );\n          // Make sure no comments are found\n          if ( div.getElementsByTagName("*").length > 0 ) {\n                  Expr.find.TAG = function(match, context){\n                          var results = context.getElementsByTagName(match[1]);\n                          // Filter out possible comments\n                          if ( match[1] === "*" ) {\n                                  var tmp = [];\n                                  for ( var i = 0; results[i]; i++ ) {\n                                          if ( results[i].nodeType === 1 ) {\n                                                  tmp.push( results[i] );\n                                          }\n                                  }\n                                  results = tmp;\n                          }\n                          return results;\n                  };\n          }\n          // Check to see if an attribute returns normalized href attributes\n          div.innerHTML = "<a href=\'#\'></a>";\n          if ( div.firstChild && typeof div.firstChild.getAttribute !== "undefined" &&\n                          div.firstChild.getAttribute("href") !== "#" ) {\n                  Expr.attrHandle.href = function(elem){\n                          return elem.getAttribute("href", 2);\n                  };\n          }\n          div = null; // release memory in IE\n  })();\n  if ( document.querySelectorAll ) {\n          (function(){\n                  var oldSizzle = Sizzle, div = document.createElement("div");\n                  div.innerHTML = "<p class=\'TEST\'></p>";\n                  // Safari can\'t handle uppercase or unicode characters when\n                  // in quirks mode.\n                  if ( div.querySelectorAll && div.querySelectorAll(".TEST").length === 0 ) {\n                          return;\n                  }\n          \n                  Sizzle = function(query, context, extra, seed){\n                          context = context || document;\n                          // Only use querySelectorAll on non-XML documents\n                          // (ID selectors don\'t work in non-HTML documents)\n                          if ( !seed && context.nodeType === 9 && !isXML(context) ) {\n                                  try {\n                                          return makeArray( context.querySelectorAll(query), extra );\n                                  } catch(e){}\n                          }\n                  \n                          return oldSizzle(query, context, extra, seed);\n                  };\n                  for ( var prop in oldSizzle ) {\n                          Sizzle[ prop ] = oldSizzle[ prop ];\n                  }\n                  div = null; // release memory in IE\n          })();\n  }\n  (function(){\n          var div = document.createElement("div");\n          div.innerHTML = "<div class=\'test e\'></div><div class=\'test\'></div>";\n          // Opera can\'t find a second classname (in 9.6)\n          // Also, make sure that getElementsByClassName actually exists\n          if ( !div.getElementsByClassName || div.getElementsByClassName("e").length === 0 ) {\n                  return;\n          }\n          // Safari caches class attributes, doesn\'t catch changes (in 3.2)\n          div.lastChild.className = "e";\n          if ( div.getElementsByClassName("e").length === 1 ) {\n                  return;\n          }\n          \n          Expr.order.splice(1, 0, "CLASS");\n          Expr.find.CLASS = function(match, context, isXML) {\n                  if ( typeof context.getElementsByClassName !== "undefined" && !isXML ) {\n                          return context.getElementsByClassName(match[1]);\n                  }\n          };\n          div = null; // release memory in IE\n  })();\n  function dirNodeCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {\n          for ( var i = 0, l = checkSet.length; i < l; i++ ) {\n                  var elem = checkSet[i];\n                  if ( elem ) {\n                          elem = elem[dir];\n                          var match = false;\n                          while ( elem ) {\n                                  if ( elem.sizcache === doneName ) {\n                                          match = checkSet[elem.sizset];\n                                          break;\n                                  }\n                                  if ( elem.nodeType === 1 && !isXML ){\n                                          elem.sizcache = doneName;\n                                          elem.sizset = i;\n                                  }\n                                  if ( elem.nodeName.toLowerCase() === cur ) {\n                                          match = elem;\n                                          break;\n                                  }\n                                  elem = elem[dir];\n                          }\n                          checkSet[i] = match;\n                  }\n          }\n  }\n  function dirCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {\n          for ( var i = 0, l = checkSet.length; i < l; i++ ) {\n                  var elem = checkSet[i];\n                  if ( elem ) {\n                          elem = elem[dir];\n                          var match = false;\n                          while ( elem ) {\n                                  if ( elem.sizcache === doneName ) {\n                                          match = checkSet[elem.sizset];\n                                          break;\n                                  }\n                                  if ( elem.nodeType === 1 ) {\n                                          if ( !isXML ) {\n                                                  elem.sizcache = doneName;\n                                                  elem.sizset = i;\n                                          }\n                                          if ( typeof cur !== "string" ) {\n                                                  if ( elem === cur ) {\n                                                          match = true;\n                                                          break;\n                                                  }\n                                          } else if ( Sizzle.filter( cur, [elem] ).length > 0 ) {\n                                                  match = elem;\n                                                  break;\n                                          }\n                                  }\n                                  elem = elem[dir];\n                          }\n                          checkSet[i] = match;\n                  }\n          }\n  }\n  var contains = document.compareDocumentPosition ? function(a, b){\n          return !!(a.compareDocumentPosition(b) & 16);\n  } : function(a, b){\n          return a !== b && (a.contains ? a.contains(b) : true);\n  };\n  var isXML = function(elem){\n          // documentElement is verified for cases where it doesn\'t yet exist\n          // (such as loading iframes in IE - #4833) \n          var documentElement = (elem ? elem.ownerDocument || elem : 0).documentElement;\n          return documentElement ? documentElement.nodeName !== "HTML" : false;\n  };\n  var posProcess = function(selector, context){\n          var tmpSet = [], later = "", match,\n                  root = context.nodeType ? [context] : context;\n          // Position selectors must be done after the filter\n          // And so must :not(positional) so we move all PSEUDOs to the end\n          while ( (match = Expr.match.PSEUDO.exec( selector )) ) {\n                  later += match[0];\n                  selector = selector.replace( Expr.match.PSEUDO, "" );\n          }\n          selector = Expr.relative[selector] ? selector + "*" : selector;\n          for ( var i = 0, l = root.length; i < l; i++ ) {\n                  Sizzle( selector, root[i], tmpSet );\n          }\n          return Sizzle.filter( later, tmpSet );\n  };\n  // EXPOSE\n  jQuery.find = Sizzle;\n  jQuery.expr = Sizzle.selectors;\n  jQuery.expr[":"] = jQuery.expr.filters;\n  jQuery.unique = Sizzle.uniqueSort;\n  jQuery.text = getText;\n  jQuery.isXMLDoc = isXML;\n  jQuery.contains = contains;\n  return;\n  window.Sizzle = Sizzle;\n  })();\n  var runtil = /Until$/,\n          rparentsprev = /^(?:parents|prevUntil|prevAll)/,\n          // Note: This RegExp should be improved, or likely pulled from Sizzle\n          rmultiselector = /,/,\n          slice = Array.prototype.slice;\n  // Implement the identical functionality for filter and not\n  var winnow = function( elements, qualifier, keep ) {\n          if ( jQuery.isFunction( qualifier ) ) {\n                  return jQuery.grep(elements, function( elem, i ) {\n                          return !!qualifier.call( elem, i, elem ) === keep;\n                  });\n          } else if ( qualifier.nodeType ) {\n                  return jQuery.grep(elements, function( elem, i ) {\n                          return (elem === qualifier) === keep;\n                  });\n          } else if ( typeof qualifier === "string" ) {\n                  var filtered = jQuery.grep(elements, function( elem ) {\n                          return elem.nodeType === 1;\n                  });\n                  if ( isSimple.test( qualifier ) ) {\n                          return jQuery.filter(qualifier, filtered, !keep);\n                  } else {\n                          qualifier = jQuery.filter( qualifier, filtered );\n                  }\n          }\n          return jQuery.grep(elements, function( elem, i ) {\n                  return (jQuery.inArray( elem, qualifier ) >= 0) === keep;\n          });\n  };\n  jQuery.fn.extend({\n          find: function( selector ) {\n                  var ret = this.pushStack( "", "find", selector ), length = 0;\n                  for ( var i = 0, l = this.length; i < l; i++ ) {\n                          length = ret.length;\n                          jQuery.find( selector, this[i], ret );\n                          if ( i > 0 ) {\n                                  // Make sure that the results are unique\n                                  for ( var n = length; n < ret.length; n++ ) {\n                                          for ( var r = 0; r < length; r++ ) {\n                                                  if ( ret[r] === ret[n] ) {\n                                                          ret.splice(n--, 1);\n                                                          break;\n                                                  }\n                                          }\n                                  }\n                          }\n                  }\n                  return ret;\n          },\n          has: function( target ) {\n                  var targets = jQuery( target );\n                  return this.filter(function() {\n                          for ( var i = 0, l = targets.length; i < l; i++ ) {\n                                  if ( jQuery.contains( this, targets[i] ) ) {\n                                          return true;\n                                  }\n                          }\n                  });\n          },\n          not: function( selector ) {\n                  return this.pushStack( winnow(this, selector, false), "not", selector);\n          },\n          filter: function( selector ) {\n                  return this.pushStack( winnow(this, selector, true), "filter", selector );\n          },\n          \n          is: function( selector ) {\n                  return !!selector && jQuery.filter( selector, this ).length > 0;\n          },\n          closest: function( selectors, context ) {\n                  if ( jQuery.isArray( selectors ) ) {\n                          var ret = [], cur = this[0], match, matches = {}, selector;\n                          if ( cur && selectors.length ) {\n                                  for ( var i = 0, l = selectors.length; i < l; i++ ) {\n                                          selector = selectors[i];\n                                          if ( !matches[selector] ) {\n                                                  matches[selector] = jQuery.expr.match.POS.test( selector ) ? \n                                                          jQuery( selector, context || this.context ) :\n                                                          selector;\n                                          }\n                                  }\n                                  while ( cur && cur.ownerDocument && cur !== context ) {\n                                          for ( selector in matches ) {\n                                                  match = matches[selector];\n                                                  if ( match.jquery ? match.index(cur) > -1 : jQuery(cur).is(match) ) {\n                                                          ret.push({ selector: selector, elem: cur });\n                                                          delete matches[selector];\n                                                  }\n                                          }\n                                          cur = cur.parentNode;\n                                  }\n                          }\n                          return ret;\n                  }\n                  var pos = jQuery.expr.match.POS.test( selectors ) ? \n                          jQuery( selectors, context || this.context ) : null;\n                  return this.map(function( i, cur ) {\n                          while ( cur && cur.ownerDocument && cur !== context ) {\n                                  if ( pos ? pos.index(cur) > -1 : jQuery(cur).is(selectors) ) {\n                                          return cur;\n                                  }\n                                  cur = cur.parentNode;\n                          }\n                          return null;\n                  });\n          },\n          \n          // Determine the position of an element within\n          // the matched set of elements\n          index: function( elem ) {\n                  if ( !elem || typeof elem === "string" ) {\n                          return jQuery.inArray( this[0],\n                                  // If it receives a string, the selector is used\n                                  // If it receives nothing, the siblings are used\n                                  elem ? jQuery( elem ) : this.parent().children() );\n                  }\n                  // Locate the position of the desired element\n                  return jQuery.inArray(\n                          // If it receives a jQuery object, the first element is used\n                          elem.jquery ? elem[0] : elem, this );\n          },\n          add: function( selector, context ) {\n                  var set = typeof selector === "string" ?\n                                  jQuery( selector, context || this.context ) :\n                                  jQuery.makeArray( selector ),\n                          all = jQuery.merge( this.get(), set );\n                  return this.pushStack( isDisconnected( set[0] ) || isDisconnected( all[0] ) ?\n                          all :\n                          jQuery.unique( all ) );\n          },\n          andSelf: function() {\n                  return this.add( this.prevObject );\n          }\n  });\n  // A painfully simple check to see if an element is disconnected\n  // from a document (should be improved, where feasible).\n  function isDisconnected( node ) {\n          return !node || !node.parentNode || node.parentNode.nodeType === 11;\n  }\n  jQuery.each({\n          parent: function( elem ) {\n                  var parent = elem.parentNode;\n                  return parent && parent.nodeType !== 11 ? parent : null;\n          },\n          parents: function( elem ) {\n                  return jQuery.dir( elem, "parentNode" );\n          },\n          parentsUntil: function( elem, i, until ) {\n                  return jQuery.dir( elem, "parentNode", until );\n          },\n          next: function( elem ) {\n                  return jQuery.nth( elem, 2, "nextSibling" );\n          },\n          prev: function( elem ) {\n                  return jQuery.nth( elem, 2, "previousSibling" );\n          },\n          nextAll: function( elem ) {\n                  return jQuery.dir( elem, "nextSibling" );\n          },\n          prevAll: function( elem ) {\n                  return jQuery.dir( elem, "previousSibling" );\n          },\n          nextUntil: function( elem, i, until ) {\n                  return jQuery.dir( elem, "nextSibling", until );\n          },\n          prevUntil: function( elem, i, until ) {\n                  return jQuery.dir( elem, "previousSibling", until );\n          },\n          siblings: function( elem ) {\n                  return jQuery.sibling( elem.parentNode.firstChild, elem );\n          },\n          children: function( elem ) {\n                  return jQuery.sibling( elem.firstChild );\n          },\n          contents: function( elem ) {\n                  return jQuery.nodeName( elem, "iframe" ) ?\n                          elem.contentDocument || elem.contentWindow.document :\n                          jQuery.makeArray( elem.childNodes );\n          }\n  }, function( name, fn ) {\n          jQuery.fn[ name ] = function( until, selector ) {\n                  var ret = jQuery.map( this, fn, until );\n                  \n                  if ( !runtil.test( name ) ) {\n                          selector = until;\n                  }\n                  if ( selector && typeof selector === "string" ) {\n                          ret = jQuery.filter( selector, ret );\n                  }\n                  ret = this.length > 1 ? jQuery.unique( ret ) : ret;\n                  if ( (this.length > 1 || rmultiselector.test( selector )) && rparentsprev.test( name ) ) {\n                          ret = ret.reverse();\n                  }\n                  return this.pushStack( ret, name, slice.call(arguments).join(",") );\n          };\n  });\n  jQuery.extend({\n          filter: function( expr, elems, not ) {\n                  if ( not ) {\n                          expr = ":not(" + expr + ")";\n                  }\n                  return jQuery.find.matches(expr, elems);\n          },\n          \n          dir: function( elem, dir, until ) {\n                  var matched = [], cur = elem[dir];\n                  while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {\n                          if ( cur.nodeType === 1 ) {\n                                  matched.push( cur );\n                          }\n                          cur = cur[dir];\n                  }\n                  return matched;\n          },\n          nth: function( cur, result, dir, elem ) {\n                  result = result || 1;\n                  var num = 0;\n                  for ( ; cur; cur = cur[dir] ) {\n                          if ( cur.nodeType === 1 && ++num === result ) {\n                                  break;\n                          }\n                  }\n                  return cur;\n          },\n          sibling: function( n, elem ) {\n                  var r = [];\n                  for ( ; n; n = n.nextSibling ) {\n                          if ( n.nodeType === 1 && n !== elem ) {\n                                  r.push( n );\n                          }\n                  }\n                  return r;\n          }\n  });\n  var rinlinejQuery = / jQuery\\d+="(?:\\d+|null)"/g,\n          rleadingWhitespace = /^\\s+/,\n          rxhtmlTag = /(<([\\w:]+)[^>]*?)\\/>/g,\n          rselfClosing = /^(?:area|br|col|embed|hr|img|input|link|meta|param)$/i,\n          rtagName = /<([\\w:]+)/,\n          rtbody = /<tbody/i,\n          rhtml = /<|&#?\\w+;/,\n          rnocache = /<script|<object|<embed|<option|<style/i,\n          rchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,  // checked="checked" or checked (html5)\n          fcloseTag = function( all, front, tag ) {\n                  return rselfClosing.test( tag ) ?\n                          all :\n                          front + "></" + tag + ">";\n          },\n          wrapMap = {\n                  option: [ 1, "<select multiple=\'multiple\'>", "</select>" ],\n                  legend: [ 1, "<fieldset>", "</fieldset>" ],\n                  thead: [ 1, "<table>", "</table>" ],\n                  tr: [ 2, "<table><tbody>", "</tbody></table>" ],\n                  td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],\n                  col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],\n                  area: [ 1, "<map>", "</map>" ],\n                  _default: [ 0, "", "" ]\n          };\n  wrapMap.optgroup = wrapMap.option;\n  wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\n  wrapMap.th = wrapMap.td;\n  // IE can\'t serialize <link> and <script> tags normally\n  if ( !jQuery.support.htmlSerialize ) {\n          wrapMap._default = [ 1, "div<div>", "</div>" ];\n  }\n  jQuery.fn.extend({\n          text: function( text ) {\n                  if ( jQuery.isFunction(text) ) {\n                          return this.each(function(i) {\n                                  var self = jQuery(this);\n                                  self.text( text.call(this, i, self.text()) );\n                          });\n                  }\n                  if ( typeof text !== "object" && text !== undefined ) {\n                          return this.empty().append( (this[0] && this[0].ownerDocument || document).createTextNode( text ) );\n                  }\n                  return jQuery.text( this );\n          },\n          wrapAll: function( html ) {\n                  if ( jQuery.isFunction( html ) ) {\n                          return this.each(function(i) {\n                                  jQuery(this).wrapAll( html.call(this, i) );\n                          });\n                  }\n                  if ( this[0] ) {\n                          // The elements to wrap the target around\n                          var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);\n                          if ( this[0].parentNode ) {\n                                  wrap.insertBefore( this[0] );\n                          }\n                          wrap.map(function() {\n                                  var elem = this;\n                                  while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {\n                                          elem = elem.firstChild;\n                                  }\n                                  return elem;\n                          }).append(this);\n                  }\n                  return this;\n          },\n          wrapInner: function( html ) {\n                  if ( jQuery.isFunction( html ) ) {\n                          return this.each(function(i) {\n                                  jQuery(this).wrapInner( html.call(this, i) );\n                          });\n                  }\n                  return this.each(function() {\n                          var self = jQuery( this ), contents = self.contents();\n                          if ( contents.length ) {\n                                  contents.wrapAll( html );\n                          } else {\n                                  self.append( html );\n                          }\n                  });\n          },\n          wrap: function( html ) {\n                  return this.each(function() {\n                          jQuery( this ).wrapAll( html );\n                  });\n          },\n          unwrap: function() {\n                  return this.parent().each(function() {\n                          if ( !jQuery.nodeName( this, "body" ) ) {\n                                  jQuery( this ).replaceWith( this.childNodes );\n                          }\n                  }).end();\n          },\n          append: function() {\n                  return this.domManip(arguments, true, function( elem ) {\n                          if ( this.nodeType === 1 ) {\n                                  this.appendChild( elem );\n                          }\n                  });\n          },\n          prepend: function() {\n                  return this.domManip(arguments, true, function( elem ) {\n                          if ( this.nodeType === 1 ) {\n                                  this.insertBefore( elem, this.firstChild );\n                          }\n                  });\n          },\n          before: function() {\n                  if ( this[0] && this[0].parentNode ) {\n                          return this.domManip(arguments, false, function( elem ) {\n                                  this.parentNode.insertBefore( elem, this );\n                          });\n                  } else if ( arguments.length ) {\n                          var set = jQuery(arguments[0]);\n                          set.push.apply( set, this.toArray() );\n                          return this.pushStack( set, "before", arguments );\n                  }\n          },\n          after: function() {\n                  if ( this[0] && this[0].parentNode ) {\n                          return this.domManip(arguments, false, function( elem ) {\n                                  this.parentNode.insertBefore( elem, this.nextSibling );\n                          });\n                  } else if ( arguments.length ) {\n                          var set = this.pushStack( this, "after", arguments );\n                          set.push.apply( set, jQuery(arguments[0]).toArray() );\n                          return set;\n                  }\n          },\n          \n          // keepData is for internal use only--do not document\n          remove: function( selector, keepData ) {\n                  for ( var i = 0, elem; (elem = this[i]) != null; i++ ) {\n                          if ( !selector || jQuery.filter( selector, [ elem ] ).length ) {\n                                  if ( !keepData && elem.nodeType === 1 ) {\n                                          jQuery.cleanData( elem.getElementsByTagName("*") );\n                                          jQuery.cleanData( [ elem ] );\n                                  }\n                                  if ( elem.parentNode ) {\n                                           elem.parentNode.removeChild( elem );\n                                  }\n                          }\n                  }\n                  \n                  return this;\n          },\n          empty: function() {\n                  for ( var i = 0, elem; (elem = this[i]) != null; i++ ) {\n                          // Remove element nodes and prevent memory leaks\n                          if ( elem.nodeType === 1 ) {\n                                  jQuery.cleanData( elem.getElementsByTagName("*") );\n                          }\n                          // Remove any remaining nodes\n                          while ( elem.firstChild ) {\n                                  elem.removeChild( elem.firstChild );\n                          }\n                  }\n                  \n                  return this;\n          },\n          clone: function( events ) {\n                  // Do the clone\n                  var ret = this.map(function() {\n                          if ( !jQuery.support.noCloneEvent && !jQuery.isXMLDoc(this) ) {\n                                  // IE copies events bound via attachEvent when\n                                  // using cloneNode. Calling detachEvent on the\n                                  // clone will also remove the events from the orignal\n                                  // In order to get around this, we use innerHTML.\n                                  // Unfortunately, this means some modifications to\n                                  // attributes in IE that are actually only stored\n                                  // as properties will not be copied (such as the\n                                  // the name attribute on an input).\n                                  var html = this.outerHTML, ownerDocument = this.ownerDocument;\n                                  if ( !html ) {\n                                          var div = ownerDocument.createElement("div");\n                                          div.appendChild( this.cloneNode(true) );\n                                          html = div.innerHTML;\n                                  }\n                                  return jQuery.clean([html.replace(rinlinejQuery, "")\n                                          // Handle the case in IE 8 where action=/test/> self-closes a tag\n                                          .replace(/=([^="\'>\\s]+\\/)>/g, \'="$1">\')\n                                          .replace(rleadingWhitespace, "")], ownerDocument)[0];\n                          } else {\n                                  return this.cloneNode(true);\n                          }\n                  });\n                  // Copy the events from the original to the clone\n                  if ( events === true ) {\n                          cloneCopyEvent( this, ret );\n                          cloneCopyEvent( this.find("*"), ret.find("*") );\n                  }\n                  // Return the cloned set\n                  return ret;\n          },\n          html: function( value ) {\n                  if ( value === undefined ) {\n                          return this[0] && this[0].nodeType === 1 ?\n                                  this[0].innerHTML.replace(rinlinejQuery, "") :\n                                  null;\n                  // See if we can take a shortcut and just use innerHTML\n                  } else if ( typeof value === "string" && !rnocache.test( value ) &&\n                          (jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value )) &&\n                          !wrapMap[ (rtagName.exec( value ) || ["", ""])[1].toLowerCase() ] ) {\n                          value = value.replace(rxhtmlTag, fcloseTag);\n                          try {\n                                  for ( var i = 0, l = this.length; i < l; i++ ) {\n                                          // Remove element nodes and prevent memory leaks\n                                          if ( this[i].nodeType === 1 ) {\n                                                  jQuery.cleanData( this[i].getElementsByTagName("*") );\n                                                  this[i].innerHTML = value;\n                                          }\n                                  }\n                          // If using innerHTML throws an exception, use the fallback method\n                          } catch(e) {\n                                  this.empty().append( value );\n                          }\n                  } else if ( jQuery.isFunction( value ) ) {\n                          this.each(function(i){\n                                  var self = jQuery(this), old = self.html();\n                                  self.empty().append(function(){\n                                          return value.call( this, i, old );\n                                  });\n                          });\n                  } else {\n                          this.empty().append( value );\n                  }\n                  return this;\n          },\n          replaceWith: function( value ) {\n                  if ( this[0] && this[0].parentNode ) {\n                          // Make sure that the elements are removed from the DOM before they are inserted\n                          // this can help fix replacing a parent with child elements\n                          if ( jQuery.isFunction( value ) ) {\n                                  return this.each(function(i) {\n                                          var self = jQuery(this), old = self.html();\n                                          self.replaceWith( value.call( this, i, old ) );\n                                  });\n                          }\n                          if ( typeof value !== "string" ) {\n                                  value = jQuery(value).detach();\n                          }\n                          return this.each(function() {\n                                  var next = this.nextSibling, parent = this.parentNode;\n                                  jQuery(this).remove();\n                                  if ( next ) {\n                                          jQuery(next).before( value );\n                                  } else {\n                                          jQuery(parent).append( value );\n                                  }\n                          });\n                  } else {\n                          return this.pushStack( jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value );\n                  }\n          },\n          detach: function( selector ) {\n                  return this.remove( selector, true );\n          },\n          domManip: function( args, table, callback ) {\n                  var results, first, value = args[0], scripts = [], fragment, parent;\n                  // We can\'t cloneNode fragments that contain checked, in WebKit\n                  if ( !jQuery.support.checkClone && arguments.length === 3 && typeof value === "string" && rchecked.test( value ) ) {\n                          return this.each(function() {\n                                  jQuery(this).domManip( args, table, callback, true );\n                          });\n                  }\n                  if ( jQuery.isFunction(value) ) {\n                          return this.each(function(i) {\n                                  var self = jQuery(this);\n                                  args[0] = value.call(this, i, table ? self.html() : undefined);\n                                  self.domManip( args, table, callback );\n                          });\n                  }\n                  if ( this[0] ) {\n                          parent = value && value.parentNode;\n                          // If we\'re in a fragment, just use that instead of building a new one\n                          if ( jQuery.support.parentNode && parent && parent.nodeType === 11 && parent.childNodes.length === this.length ) {\n                                  results = { fragment: parent };\n                          } else {\n                                  results = buildFragment( args, this, scripts );\n                          }\n                          \n                          fragment = results.fragment;\n                          \n                          if ( fragment.childNodes.length === 1 ) {\n                                  first = fragment = fragment.firstChild;\n                          } else {\n                                  first = fragment.firstChild;\n                          }\n                          if ( first ) {\n                                  table = table && jQuery.nodeName( first, "tr" );\n                                  for ( var i = 0, l = this.length; i < l; i++ ) {\n                                          callback.call(\n                                                  table ?\n                                                          root(this[i], first) :\n                                                          this[i],\n                                                  i > 0 || results.cacheable || this.length > 1  ?\n                                                          fragment.cloneNode(true) :\n                                                          fragment\n                                          );\n                                  }\n                          }\n                          if ( scripts.length ) {\n                                  jQuery.each( scripts, evalScript );\n                          }\n                  }\n                  return this;\n                  function root( elem, cur ) {\n                          return jQuery.nodeName(elem, "table") ?\n                                  (elem.getElementsByTagName("tbody")[0] ||\n                                  elem.appendChild(elem.ownerDocument.createElement("tbody"))) :\n                                  elem;\n                  }\n          }\n  });\n  function cloneCopyEvent(orig, ret) {\n          var i = 0;\n          ret.each(function() {\n                  if ( this.nodeName !== (orig[i] && orig[i].nodeName) ) {\n                          return;\n                  }\n                  var oldData = jQuery.data( orig[i++] ), curData = jQuery.data( this, oldData ), events = oldData && oldData.events;\n                  if ( events ) {\n                          delete curData.handle;\n                          curData.events = {};\n                          for ( var type in events ) {\n                                  for ( var handler in events[ type ] ) {\n                                          jQuery.event.add( this, type, events[ type ][ handler ], events[ type ][ handler ].data );\n                                  }\n                          }\n                  }\n          });\n  }\n  function buildFragment( args, nodes, scripts ) {\n          var fragment, cacheable, cacheresults,\n                  doc = (nodes && nodes[0] ? nodes[0].ownerDocument || nodes[0] : document);\n          // Only cache "small" (1/2 KB) strings that are associated with the main document\n          // Cloning options loses the selected state, so don\'t cache them\n          // IE 6 doesn\'t like it when you put <object> or <embed> elements in a fragment\n          // Also, WebKit does not clone \'checked\' attributes on cloneNode, so don\'t cache\n          if ( args.length === 1 && typeof args[0] === "string" && args[0].length < 512 && doc === document &&\n                  !rnocache.test( args[0] ) && (jQuery.support.checkClone || !rchecked.test( args[0] )) ) {\n                  cacheable = true;\n                  cacheresults = jQuery.fragments[ args[0] ];\n                  if ( cacheresults ) {\n                          if ( cacheresults !== 1 ) {\n                                  fragment = cacheresults;\n                          }\n                  }\n          }\n          if ( !fragment ) {\n                  fragment = doc.createDocumentFragment();\n                  jQuery.clean( args, doc, fragment, scripts );\n          }\n          if ( cacheable ) {\n                  jQuery.fragments[ args[0] ] = cacheresults ? fragment : 1;\n          }\n          return { fragment: fragment, cacheable: cacheable };\n  }\n  jQuery.fragments = {};\n  jQuery.each({\n          appendTo: "append",\n          prependTo: "prepend",\n          insertBefore: "before",\n          insertAfter: "after",\n          replaceAll: "replaceWith"\n  }, function( name, original ) {\n          jQuery.fn[ name ] = function( selector ) {\n                  var ret = [], insert = jQuery( selector ),\n                          parent = this.length === 1 && this[0].parentNode;\n                  \n                  if ( parent && parent.nodeType === 11 && parent.childNodes.length === 1 && insert.length === 1 ) {\n                          insert[ original ]( this[0] );\n                          return this;\n                          \n                  } else {\n                          for ( var i = 0, l = insert.length; i < l; i++ ) {\n                                  var elems = (i > 0 ? this.clone(true) : this).get();\n                                  jQuery.fn[ original ].apply( jQuery(insert[i]), elems );\n                                  ret = ret.concat( elems );\n                          }\n                  \n                          return this.pushStack( ret, name, insert.selector );\n                  }\n          };\n  });\n  jQuery.extend({\n          clean: function( elems, context, fragment, scripts ) {\n                  context = context || document;\n                  // !context.createElement fails in IE with an error but returns typeof \'object\'\n                  if ( typeof context.createElement === "undefined" ) {\n                          context = context.ownerDocument || context[0] && context[0].ownerDocument || document;\n                  }\n                  var ret = [];\n                  for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {\n                          if ( typeof elem === "number" ) {\n                                  elem += "";\n                          }\n                          if ( !elem ) {\n                                  continue;\n                          }\n                          // Convert html string into DOM nodes\n                          if ( typeof elem === "string" && !rhtml.test( elem ) ) {\n                                  elem = context.createTextNode( elem );\n                          } else if ( typeof elem === "string" ) {\n                                  // Fix "XHTML"-style tags in all browsers\n                                  elem = elem.replace(rxhtmlTag, fcloseTag);\n                                  // Trim whitespace, otherwise indexOf won\'t work as expected\n                                  var tag = (rtagName.exec( elem ) || ["", ""])[1].toLowerCase(),\n                                          wrap = wrapMap[ tag ] || wrapMap._default,\n                                          depth = wrap[0],\n                                          div = context.createElement("div");\n                                  // Go to html and back, then peel off extra wrappers\n                                  div.innerHTML = wrap[1] + elem + wrap[2];\n                                  // Move to the right depth\n                                  while ( depth-- ) {\n                                          div = div.lastChild;\n                                  }\n                                  // Remove IE\'s autoinserted <tbody> from table fragments\n                                  if ( !jQuery.support.tbody ) {\n                                          // String was a <table>, *may* have spurious <tbody>\n                                          var hasBody = rtbody.test(elem),\n                                                  tbody = tag === "table" && !hasBody ?\n                                                          div.firstChild && div.firstChild.childNodes :\n                                                          // String was a bare <thead> or <tfoot>\n                                                          wrap[1] === "<table>" && !hasBody ?\n                                                                  div.childNodes :\n                                                                  [];\n                                          for ( var j = tbody.length - 1; j >= 0 ; --j ) {\n                                                  if ( jQuery.nodeName( tbody[ j ], "tbody" ) && !tbody[ j ].childNodes.length ) {\n                                                          tbody[ j ].parentNode.removeChild( tbody[ j ] );\n                                                  }\n                                          }\n                                  }\n                                  // IE completely kills leading whitespace when innerHTML is used\n                                  if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {\n                                          div.insertBefore( context.createTextNode( rleadingWhitespace.exec(elem)[0] ), div.firstChild );\n                                  }\n                                  elem = div.childNodes;\n                          }\n                          if ( elem.nodeType ) {\n                                  ret.push( elem );\n                          } else {\n                                  ret = jQuery.merge( ret, elem );\n                          }\n                  }\n                  if ( fragment ) {\n                          for ( var i = 0; ret[i]; i++ ) {\n                                  if ( scripts && jQuery.nodeName( ret[i], "script" ) && (!ret[i].type || ret[i].type.toLowerCase() === "text/javascript") ) {\n                                          scripts.push( ret[i].parentNode ? ret[i].parentNode.removeChild( ret[i] ) : ret[i] );\n                                  \n                                  } else {\n                                          if ( ret[i].nodeType === 1 ) {\n                                                  ret.splice.apply( ret, [i + 1, 0].concat(jQuery.makeArray(ret[i].getElementsByTagName("script"))) );\n                                          }\n                                          fragment.appendChild( ret[i] );\n                                  }\n                          }\n                  }\n                  return ret;\n          },\n          \n          cleanData: function( elems ) {\n                  var data, id, cache = jQuery.cache,\n                          special = jQuery.event.special,\n                          deleteExpando = jQuery.support.deleteExpando;\n                  \n                  for ( var i = 0, elem; (elem = elems[i]) != null; i++ ) {\n                          id = elem[ jQuery.expando ];\n                          \n                          if ( id ) {\n                                  data = cache[ id ];\n                                  \n                                  if ( data.events ) {\n                                          for ( var type in data.events ) {\n                                                  if ( special[ type ] ) {\n                                                          jQuery.event.remove( elem, type );\n                                                  } else {\n                                                          removeEvent( elem, type, data.handle );\n                                                  }\n                                          }\n                                  }\n                                  \n                                  if ( deleteExpando ) {\n                                          delete elem[ jQuery.expando ];\n                                  } else if ( elem.removeAttribute ) {\n                                          elem.removeAttribute( jQuery.expando );\n                                  }\n                                  \n                                  delete cache[ id ];\n                          }\n                  }\n          }\n  });\n  // exclude the following css properties to add px\n  var rexclude = /z-?index|font-?weight|opacity|zoom|line-?height/i,\n          ralpha = /alpha\\([^)]*\\)/,\n          ropacity = /opacity=([^)]*)/,\n          rfloat = /float/i,\n          rdashAlpha = /-([a-z])/ig,\n          rupper = /([A-Z])/g,\n          rnumpx = /^-?\\d+(?:px)?$/i,\n          rnum = /^-?\\d/,\n          cssShow = { position: "absolute", visibility: "hidden", display:"block" },\n          cssWidth = [ "Left", "Right" ],\n          cssHeight = [ "Top", "Bottom" ],\n          // cache check for defaultView.getComputedStyle\n          getComputedStyle = document.defaultView && document.defaultView.getComputedStyle,\n          // normalize float css property\n          styleFloat = jQuery.support.cssFloat ? "cssFloat" : "styleFloat",\n          fcamelCase = function( all, letter ) {\n                  return letter.toUpperCase();\n          };\n  jQuery.fn.css = function( name, value ) {\n          return access( this, name, value, true, function( elem, name, value ) {\n                  if ( value === undefined ) {\n                          return jQuery.curCSS( elem, name );\n                  }\n                  \n                  if ( typeof value === "number" && !rexclude.test(name) ) {\n                          value += "px";\n                  }\n                  jQuery.style( elem, name, value );\n          });\n  };\n  jQuery.extend({\n          style: function( elem, name, value ) {\n                  // don\'t set styles on text and comment nodes\n                  if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 ) {\n                          return undefined;\n                  }\n                  // ignore negative width and height values #1599\n                  if ( (name === "width" || name === "height") && parseFloat(value) < 0 ) {\n                          value = undefined;\n                  }\n                  var style = elem.style || elem, set = value !== undefined;\n                  // IE uses filters for opacity\n                  if ( !jQuery.support.opacity && name === "opacity" ) {\n                          if ( set ) {\n                                  // IE has trouble with opacity if it does not have layout\n                                  // Force it by setting the zoom level\n                                  style.zoom = 1;\n                                  // Set the alpha filter to set the opacity\n                                  var opacity = parseInt( value, 10 ) + "" === "NaN" ? "" : "alpha(opacity=" + value * 100 + ")";\n                                  var filter = style.filter || jQuery.curCSS( elem, "filter" ) || "";\n                                  style.filter = ralpha.test(filter) ? filter.replace(ralpha, opacity) : opacity;\n                          }\n                          return style.filter && style.filter.indexOf("opacity=") >= 0 ?\n                                  (parseFloat( ropacity.exec(style.filter)[1] ) / 100) + "":\n                                  "";\n                  }\n                  // Make sure we\'re using the right name for getting the float value\n                  if ( rfloat.test( name ) ) {\n                          name = styleFloat;\n                  }\n                  name = name.replace(rdashAlpha, fcamelCase);\n                  if ( set ) {\n                          style[ name ] = value;\n                  }\n                  return style[ name ];\n          },\n          css: function( elem, name, force, extra ) {\n                  if ( name === "width" || name === "height" ) {\n                          var val, props = cssShow, which = name === "width" ? cssWidth : cssHeight;\n                          function getWH() {\n                                  val = name === "width" ? elem.offsetWidth : elem.offsetHeight;\n                                  if ( extra === "border" ) {\n                                          return;\n                                  }\n                                  jQuery.each( which, function() {\n                                          if ( !extra ) {\n                                                  val -= parseFloat(jQuery.curCSS( elem, "padding" + this, true)) || 0;\n                                          }\n                                          if ( extra === "margin" ) {\n                                                  val += parseFloat(jQuery.curCSS( elem, "margin" + this, true)) || 0;\n                                          } else {\n                                                  val -= parseFloat(jQuery.curCSS( elem, "border" + this + "Width", true)) || 0;\n                                          }\n                                  });\n                          }\n                          if ( elem.offsetWidth !== 0 ) {\n                                  getWH();\n                          } else {\n                                  jQuery.swap( elem, props, getWH );\n                          }\n                          return Math.max(0, Math.round(val));\n                  }\n                  return jQuery.curCSS( elem, name, force );\n          },\n          curCSS: function( elem, name, force ) {\n                  var ret, style = elem.style, filter;\n                  // IE uses filters for opacity\n                  if ( !jQuery.support.opacity && name === "opacity" && elem.currentStyle ) {\n                          ret = ropacity.test(elem.currentStyle.filter || "") ?\n                                  (parseFloat(RegExp.$1) / 100) + "" :\n                                  "";\n                          return ret === "" ?\n                                  "1" :\n                                  ret;\n                  }\n                  // Make sure we\'re using the right name for getting the float value\n                  if ( rfloat.test( name ) ) {\n                          name = styleFloat;\n                  }\n                  if ( !force && style && style[ name ] ) {\n                          ret = style[ name ];\n                  } else if ( getComputedStyle ) {\n                          // Only "float" is needed here\n                          if ( rfloat.test( name ) ) {\n                                  name = "float";\n                          }\n                          name = name.replace( rupper, "-$1" ).toLowerCase();\n                          var defaultView = elem.ownerDocument.defaultView;\n                          if ( !defaultView ) {\n                                  return null;\n                          }\n                          var computedStyle = defaultView.getComputedStyle( elem, null );\n                          if ( computedStyle ) {\n                                  ret = computedStyle.getPropertyValue( name );\n                          }\n                          // We should always get a number back from opacity\n                          if ( name === "opacity" && ret === "" ) {\n                                  ret = "1";\n                          }\n                  } else if ( elem.currentStyle ) {\n                          var camelCase = name.replace(rdashAlpha, fcamelCase);\n                          ret = elem.currentStyle[ name ] || elem.currentStyle[ camelCase ];\n                          // From the awesome hack by Dean Edwards\n                          // http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291\n                          // If we\'re not dealing with a regular pixel number\n                          // but a number that has a weird ending, we need to convert it to pixels\n                          if ( !rnumpx.test( ret ) && rnum.test( ret ) ) {\n                                  // Remember the original values\n                                  var left = style.left, rsLeft = elem.runtimeStyle.left;\n                                  // Put in the new values to get a computed value out\n                                  elem.runtimeStyle.left = elem.currentStyle.left;\n                                  style.left = camelCase === "fontSize" ? "1em" : (ret || 0);\n                                  ret = style.pixelLeft + "px";\n                                  // Revert the changed values\n                                  style.left = left;\n                                  elem.runtimeStyle.left = rsLeft;\n                          }\n                  }\n                  return ret;\n          },\n          // A method for quickly swapping in/out CSS properties to get correct calculations\n          swap: function( elem, options, callback ) {\n                  var old = {};\n                  // Remember the old values, and insert the new ones\n                  for ( var name in options ) {\n                          old[ name ] = elem.style[ name ];\n                          elem.style[ name ] = options[ name ];\n                  }\n                  callback.call( elem );\n                  // Revert the old values\n                  for ( var name in options ) {\n                          elem.style[ name ] = old[ name ];\n                  }\n          }\n  });\n  if ( jQuery.expr && jQuery.expr.filters ) {\n          jQuery.expr.filters.hidden = function( elem ) {\n                  var width = elem.offsetWidth, height = elem.offsetHeight,\n                          skip = elem.nodeName.toLowerCase() === "tr";\n                  return width === 0 && height === 0 && !skip ?\n                          true :\n                          width > 0 && height > 0 && !skip ?\n                                  false :\n                                  jQuery.curCSS(elem, "display") === "none";\n          };\n          jQuery.expr.filters.visible = function( elem ) {\n                  return !jQuery.expr.filters.hidden( elem );\n          };\n  }\n  var jsc = now(),\n          rscript = /<script(.|\\s)*?\\/script>/gi,\n          rselectTextarea = /select|textarea/i,\n          rinput = /color|date|datetime|email|hidden|month|number|password|range|search|tel|text|time|url|week/i,\n          jsre = /=\\?(&|$)/,\n          rquery = /\\?/,\n          rts = /(\\?|&)_=.*?(&|$)/,\n          rurl = /^(\\w+:)?\\/\\/([^\\/?#]+)/,\n          r20 = /%20/g,\n          // Keep a copy of the old load method\n          _load = jQuery.fn.load;\n  jQuery.fn.extend({\n          load: function( url, params, callback ) {\n                  if ( typeof url !== "string" ) {\n                          return _load.call( this, url );\n                  // Don\'t do a request if no elements are being requested\n                  } else if ( !this.length ) {\n                          return this;\n                  }\n                  var off = url.indexOf(" ");\n                  if ( off >= 0 ) {\n                          var selector = url.slice(off, url.length);\n                          url = url.slice(0, off);\n                  }\n                  // Default to a GET request\n                  var type = "GET";\n                  // If the second parameter was provided\n                  if ( params ) {\n                          // If it\'s a function\n                          if ( jQuery.isFunction( params ) ) {\n                                  // We assume that it\'s the callback\n                                  callback = params;\n                                  params = null;\n                          // Otherwise, build a param string\n                          } else if ( typeof params === "object" ) {\n                                  params = jQuery.param( params, jQuery.ajaxSettings.traditional );\n                                  type = "POST";\n                          }\n                  }\n                  var self = this;\n                  // Request the remote document\n                  jQuery.ajax({\n                          url: url,\n                          type: type,\n                          dataType: "html",\n                          data: params,\n                          complete: function( res, status ) {\n                                  // If successful, inject the HTML into all the matched elements\n                                  if ( status === "success" || status === "notmodified" ) {\n                                          // See if a selector was specified\n                                          self.html( selector ?\n                                                  // Create a dummy div to hold the results\n                                                  jQuery("<div />")\n                                                          // inject the contents of the document in, removing the scripts\n                                                          // to avoid any \'Permission Denied\' errors in IE\n                                                          .append(res.responseText.replace(rscript, ""))\n                                                          // Locate the specified elements\n                                                          .find(selector) :\n                                                  // If not, just inject the full result\n                                                  res.responseText );\n                                  }\n                                  if ( callback ) {\n                                          self.each( callback, [res.responseText, status, res] );\n                                  }\n                          }\n                  });\n                  return this;\n          },\n          serialize: function() {\n                  return jQuery.param(this.serializeArray());\n          },\n          serializeArray: function() {\n                  return this.map(function() {\n                          return this.elements ? jQuery.makeArray(this.elements) : this;\n                  })\n                  .filter(function() {\n                          return this.name && !this.disabled &&\n                                  (this.checked || rselectTextarea.test(this.nodeName) ||\n                                          rinput.test(this.type));\n                  })\n                  .map(function( i, elem ) {\n                          var val = jQuery(this).val();\n                          return val == null ?\n                                  null :\n                                  jQuery.isArray(val) ?\n                                          jQuery.map( val, function( val, i ) {\n                                                  return { name: elem.name, value: val };\n                                          }) :\n                                          { name: elem.name, value: val };\n                  }).get();\n          }\n  });\n  // Attach a bunch of functions for handling common AJAX events\n  jQuery.each( "ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "), function( i, o ) {\n          jQuery.fn[o] = function( f ) {\n                  return this.bind(o, f);\n          };\n  });\n  jQuery.extend({\n          get: function( url, data, callback, type ) {\n                  // shift arguments if data argument was omited\n                  if ( jQuery.isFunction( data ) ) {\n                          type = type || callback;\n                          callback = data;\n                          data = null;\n                  }\n                  return jQuery.ajax({\n                          type: "GET",\n                          url: url,\n                          data: data,\n                          success: callback,\n                          dataType: type\n                  });\n          },\n          getScript: function( url, callback ) {\n                  return jQuery.get(url, null, callback, "script");\n          },\n          getJSON: function( url, data, callback ) {\n                  return jQuery.get(url, data, callback, "json");\n          },\n          post: function( url, data, callback, type ) {\n                  // shift arguments if data argument was omited\n                  if ( jQuery.isFunction( data ) ) {\n                          type = type || callback;\n                          callback = data;\n                          data = {};\n                  }\n                  return jQuery.ajax({\n                          type: "POST",\n                          url: url,\n                          data: data,\n                          success: callback,\n                          dataType: type\n                  });\n          },\n          ajaxSetup: function( settings ) {\n                  jQuery.extend( jQuery.ajaxSettings, settings );\n          },\n          ajaxSettings: {\n                  url: location.href,\n                  global: true,\n                  type: "GET",\n                  contentType: "application/x-www-form-urlencoded",\n                  processData: true,\n                  async: true,\n                  /*\n                  timeout: 0,\n                  data: null,\n                  username: null,\n                  password: null,\n                  traditional: false,\n                  */\n                  // Create the request object; Microsoft failed to properly\n                  // implement the XMLHttpRequest in IE7 (can\'t request local files),\n                  // so we use the ActiveXObject when it is available\n                  // This function can be overriden by calling jQuery.ajaxSetup\n                  xhr: window.XMLHttpRequest && (window.location.protocol !== "file:" || !window.ActiveXObject) ?\n                          function() {\n                                  return new window.XMLHttpRequest();\n                          } :\n                          function() {\n                                  try {\n                                          return new window.ActiveXObject("Microsoft.XMLHTTP");\n                                  } catch(e) {}\n                          },\n                  accepts: {\n                          xml: "application/xml, text/xml",\n                          html: "text/html",\n                          script: "text/javascript, application/javascript",\n                          json: "application/json, text/javascript",\n                          text: "text/plain",\n                          _default: "*/*"\n                  }\n          },\n          // Last-Modified header cache for next request\n          lastModified: {},\n          etag: {},\n          ajax: function( origSettings ) {\n                  var s = jQuery.extend(true, {}, jQuery.ajaxSettings, origSettings);\n                  \n                  var jsonp, status, data,\n                          callbackContext = origSettings && origSettings.context || s,\n                          type = s.type.toUpperCase();\n                  // convert data if not already a string\n                  if ( s.data && s.processData && typeof s.data !== "string" ) {\n                          s.data = jQuery.param( s.data, s.traditional );\n                  }\n                  // Handle JSONP Parameter Callbacks\n                  if ( s.dataType === "jsonp" ) {\n                          if ( type === "GET" ) {\n                                  if ( !jsre.test( s.url ) ) {\n                                          s.url += (rquery.test( s.url ) ? "&" : "?") + (s.jsonp || "callback") + "=?";\n                                  }\n                          } else if ( !s.data || !jsre.test(s.data) ) {\n                                  s.data = (s.data ? s.data + "&" : "") + (s.jsonp || "callback") + "=?";\n                          }\n                          s.dataType = "json";\n                  }\n                  // Build temporary JSONP function\n                  if ( s.dataType === "json" && (s.data && jsre.test(s.data) || jsre.test(s.url)) ) {\n                          jsonp = s.jsonpCallback || ("jsonp" + jsc++);\n                          // Replace the =? sequence both in the query string and the data\n                          if ( s.data ) {\n                                  s.data = (s.data + "").replace(jsre, "=" + jsonp + "$1");\n                          }\n                          s.url = s.url.replace(jsre, "=" + jsonp + "$1");\n                          // We need to make sure\n                          // that a JSONP style response is executed properly\n                          s.dataType = "script";\n                          // Handle JSONP-style loading\n                          window[ jsonp ] = window[ jsonp ] || function( tmp ) {\n                                  data = tmp;\n                                  success();\n                                  complete();\n                                  // Garbage collect\n                                  window[ jsonp ] = undefined;\n                                  try {\n                                          delete window[ jsonp ];\n                                  } catch(e) {}\n                                  if ( head ) {\n                                          head.removeChild( script );\n                                  }\n                          };\n                  }\n                  if ( s.dataType === "script" && s.cache === null ) {\n                          s.cache = false;\n                  }\n                  if ( s.cache === false && type === "GET" ) {\n                          var ts = now();\n                          // try replacing _= if it is there\n                          var ret = s.url.replace(rts, "$1_=" + ts + "$2");\n                          // if nothing was replaced, add timestamp to the end\n                          s.url = ret + ((ret === s.url) ? (rquery.test(s.url) ? "&" : "?") + "_=" + ts : "");\n                  }\n                  // If data is available, append data to url for get requests\n                  if ( s.data && type === "GET" ) {\n                          s.url += (rquery.test(s.url) ? "&" : "?") + s.data;\n                  }\n                  // Watch for a new set of requests\n                  if ( s.global && ! jQuery.active++ ) {\n                          jQuery.event.trigger( "ajaxStart" );\n                  }\n                  // Matches an absolute URL, and saves the domain\n                  var parts = rurl.exec( s.url ),\n                          remote = parts && (parts[1] && parts[1] !== location.protocol || parts[2] !== location.host);\n                  // If we\'re requesting a remote document\n                  // and trying to load JSON or Script with a GET\n                  if ( s.dataType === "script" && type === "GET" && remote ) {\n                          var head = document.getElementsByTagName("head")[0] || document.documentElement;\n                          var script = document.createElement("script");\n                          script.src = s.url;\n                          if ( s.scriptCharset ) {\n                                  script.charset = s.scriptCharset;\n                          }\n                          // Handle Script loading\n                          if ( !jsonp ) {\n                                  var done = false;\n                                  // Attach handlers for all browsers\n                                  script.onload = script.onreadystatechange = function() {\n                                          if ( !done && (!this.readyState ||\n                                                          this.readyState === "loaded" || this.readyState === "complete") ) {\n                                                  done = true;\n                                                  success();\n                                                  complete();\n                                                  // Handle memory leak in IE\n                                                  script.onload = script.onreadystatechange = null;\n                                                  if ( head && script.parentNode ) {\n                                                          head.removeChild( script );\n                                                  }\n                                          }\n                                  };\n                          }\n                          // Use insertBefore instead of appendChild  to circumvent an IE6 bug.\n                          // This arises when a base node is used (#2709 and #4378).\n                          head.insertBefore( script, head.firstChild );\n                          // We handle everything using the script element injection\n                          return undefined;\n                  }\n                  var requestDone = false;\n                  // Create the request object\n                  var xhr = s.xhr();\n                  if ( !xhr ) {\n                          return;\n                  }\n                  // Open the socket\n                  // Passing null username, generates a login popup on Opera (#2865)\n                  if ( s.username ) {\n                          xhr.open(type, s.url, s.async, s.username, s.password);\n                  } else {\n                          xhr.open(type, s.url, s.async);\n                  }\n                  // Need an extra try/catch for cross domain requests in Firefox 3\n                  try {\n                          // Set the correct header, if data is being sent\n                          if ( s.data || origSettings && origSettings.contentType ) {\n                                  xhr.setRequestHeader("Content-Type", s.contentType);\n                          }\n                          // Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n                          if ( s.ifModified ) {\n                                  if ( jQuery.lastModified[s.url] ) {\n                                          xhr.setRequestHeader("If-Modified-Since", jQuery.lastModified[s.url]);\n                                  }\n                                  if ( jQuery.etag[s.url] ) {\n                                          xhr.setRequestHeader("If-None-Match", jQuery.etag[s.url]);\n                                  }\n                          }\n                          // Set header so the called script knows that it\'s an XMLHttpRequest\n                          // Only send the header if it\'s not a remote XHR\n                          if ( !remote ) {\n                                  xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");\n                          }\n                          // Set the Accepts header for the server, depending on the dataType\n                          xhr.setRequestHeader("Accept", s.dataType && s.accepts[ s.dataType ] ?\n                                  s.accepts[ s.dataType ] + ", */*" :\n                                  s.accepts._default );\n                  } catch(e) {}\n                  // Allow custom headers/mimetypes and early abort\n                  if ( s.beforeSend && s.beforeSend.call(callbackContext, xhr, s) === false ) {\n                          // Handle the global AJAX counter\n                          if ( s.global && ! --jQuery.active ) {\n                                  jQuery.event.trigger( "ajaxStop" );\n                          }\n                          // close opended socket\n                          xhr.abort();\n                          return false;\n                  }\n                  if ( s.global ) {\n                          trigger("ajaxSend", [xhr, s]);\n                  }\n                  // Wait for a response to come back\n                  var onreadystatechange = xhr.onreadystatechange = function( isTimeout ) {\n                          // The request was aborted\n                          if ( !xhr || xhr.readyState === 0 || isTimeout === "abort" ) {\n                                  // Opera doesn\'t call onreadystatechange before this point\n                                  // so we simulate the call\n                                  if ( !requestDone ) {\n                                          complete();\n                                  }\n                                  requestDone = true;\n                                  if ( xhr ) {\n                                          xhr.onreadystatechange = jQuery.noop;\n                                  }\n                          // The transfer is complete and the data is available, or the request timed out\n                          } else if ( !requestDone && xhr && (xhr.readyState === 4 || isTimeout === "timeout") ) {\n                                  requestDone = true;\n                                  xhr.onreadystatechange = jQuery.noop;\n                                  status = isTimeout === "timeout" ?\n                                          "timeout" :\n                                          !jQuery.httpSuccess( xhr ) ?\n                                                  "error" :\n                                                  s.ifModified && jQuery.httpNotModified( xhr, s.url ) ?\n                                                          "notmodified" :\n                                                          "success";\n                                  var errMsg;\n                                  if ( status === "success" ) {\n                                          // Watch for, and catch, XML document parse errors\n                                          try {\n                                                  // process the data (runs the xml through httpData regardless of callback)\n                                                  data = jQuery.httpData( xhr, s.dataType, s );\n                                          } catch(err) {\n                                                  status = "parsererror";\n                                                  errMsg = err;\n                                          }\n                                  }\n                                  // Make sure that the request was successful or notmodified\n                                  if ( status === "success" || status === "notmodified" ) {\n                                          // JSONP handles its own success callback\n                                          if ( !jsonp ) {\n                                                  success();\n                                          }\n                                  } else {\n                                          jQuery.handleError(s, xhr, status, errMsg);\n                                  }\n                                  // Fire the complete handlers\n                                  complete();\n                                  if ( isTimeout === "timeout" ) {\n                                          xhr.abort();\n                                  }\n                                  // Stop memory leaks\n                                  if ( s.async ) {\n                                          xhr = null;\n                                  }\n                          }\n                  };\n                  // Override the abort handler, if we can (IE doesn\'t allow it, but that\'s OK)\n                  // Opera doesn\'t fire onreadystatechange at all on abort\n                  try {\n                          var oldAbort = xhr.abort;\n                          xhr.abort = function() {\n                                  if ( xhr ) {\n                                          oldAbort.call( xhr );\n                                  }\n                                  onreadystatechange( "abort" );\n                          };\n                  } catch(e) { }\n                  // Timeout checker\n                  if ( s.async && s.timeout > 0 ) {\n                          setTimeout(function() {\n                                  // Check to see if the request is still happening\n                                  if ( xhr && !requestDone ) {\n                                          onreadystatechange( "timeout" );\n                                  }\n                          }, s.timeout);\n                  }\n                  // Send the data\n                  try {\n                          xhr.send( type === "POST" || type === "PUT" || type === "DELETE" ? s.data : null );\n                  } catch(e) {\n                          jQuery.handleError(s, xhr, null, e);\n                          // Fire the complete handlers\n                          complete();\n                  }\n                  // firefox 1.5 doesn\'t fire statechange for sync requests\n                  if ( !s.async ) {\n                          onreadystatechange();\n                  }\n                  function success() {\n                          // If a local callback was specified, fire it and pass it the data\n                          if ( s.success ) {\n                                  s.success.call( callbackContext, data, status, xhr );\n                          }\n                          // Fire the global callback\n                          if ( s.global ) {\n                                  trigger( "ajaxSuccess", [xhr, s] );\n                          }\n                  }\n                  function complete() {\n                          // Process result\n                          if ( s.complete ) {\n                                  s.complete.call( callbackContext, xhr, status);\n                          }\n                          // The request was completed\n                          if ( s.global ) {\n                                  trigger( "ajaxComplete", [xhr, s] );\n                          }\n                          // Handle the global AJAX counter\n                          if ( s.global && ! --jQuery.active ) {\n                                  jQuery.event.trigger( "ajaxStop" );\n                          }\n                  }\n                  \n                  function trigger(type, args) {\n                          (s.context ? jQuery(s.context) : jQuery.event).trigger(type, args);\n                  }\n                  // return XMLHttpRequest to allow aborting the request etc.\n                  return xhr;\n          },\n          handleError: function( s, xhr, status, e ) {\n                  // If a local callback was specified, fire it\n                  if ( s.error ) {\n                          s.error.call( s.context || s, xhr, status, e );\n                  }\n                  // Fire the global callback\n                  if ( s.global ) {\n                          (s.context ? jQuery(s.context) : jQuery.event).trigger( "ajaxError", [xhr, s, e] );\n                  }\n          },\n          // Counter for holding the number of active queries\n          active: 0,\n          // Determines if an XMLHttpRequest was successful or not\n          httpSuccess: function( xhr ) {\n                  try {\n                          // IE error sometimes returns 1223 when it should be 204 so treat it as success, see #1450\n                          return !xhr.status && location.protocol === "file:" ||\n                                  // Opera returns 0 when status is 304\n                                  ( xhr.status >= 200 && xhr.status < 300 ) ||\n                                  xhr.status === 304 || xhr.status === 1223 || xhr.status === 0;\n                  } catch(e) {}\n                  return false;\n          },\n          // Determines if an XMLHttpRequest returns NotModified\n          httpNotModified: function( xhr, url ) {\n                  var lastModified = xhr.getResponseHeader("Last-Modified"),\n                          etag = xhr.getResponseHeader("Etag");\n                  if ( lastModified ) {\n                          jQuery.lastModified[url] = lastModified;\n                  }\n                  if ( etag ) {\n                          jQuery.etag[url] = etag;\n                  }\n                  // Opera returns 0 when status is 304\n                  return xhr.status === 304 || xhr.status === 0;\n          },\n          httpData: function( xhr, type, s ) {\n                  var ct = xhr.getResponseHeader("content-type") || "",\n                          xml = type === "xml" || !type && ct.indexOf("xml") >= 0,\n                          data = xml ? xhr.responseXML : xhr.responseText;\n                  if ( xml && data.documentElement.nodeName === "parsererror" ) {\n                          jQuery.error( "parsererror" );\n                  }\n                  // Allow a pre-filtering function to sanitize the response\n                  // s is checked to keep backwards compatibility\n                  if ( s && s.dataFilter ) {\n                          data = s.dataFilter( data, type );\n                  }\n                  // The filter can actually parse the response\n                  if ( typeof data === "string" ) {\n                          // Get the JavaScript object, if JSON is used.\n                          if ( type === "json" || !type && ct.indexOf("json") >= 0 ) {\n                                  data = jQuery.parseJSON( data );\n                          // If the type is "script", eval it in global context\n                          } else if ( type === "script" || !type && ct.indexOf("javascript") >= 0 ) {\n                                  jQuery.globalEval( data );\n                          }\n                  }\n                  return data;\n          },\n          // Serialize an array of form elements or a set of\n          // key/values into a query string\n          param: function( a, traditional ) {\n                  var s = [];\n                  \n                  // Set traditional to true for jQuery <= 1.3.2 behavior.\n                  if ( traditional === undefined ) {\n                          traditional = jQuery.ajaxSettings.traditional;\n                  }\n                  \n                  // If an array was passed in, assume that it is an array of form elements.\n                  if ( jQuery.isArray(a) || a.jquery ) {\n                          // Serialize the form elements\n                          jQuery.each( a, function() {\n                                  add( this.name, this.value );\n                          });\n                          \n                  } else {\n                          // If traditional, encode the "old" way (the way 1.3.2 or older\n                          // did it), otherwise encode params recursively.\n                          for ( var prefix in a ) {\n                                  buildParams( prefix, a[prefix] );\n                          }\n                  }\n                  // Return the resulting serialization\n                  return s.join("&").replace(r20, "+");\n                  function buildParams( prefix, obj ) {\n                          if ( jQuery.isArray(obj) ) {\n                                  // Serialize array item.\n                                  jQuery.each( obj, function( i, v ) {\n                                          if ( traditional || /\\[\\]$/.test( prefix ) ) {\n                                                  // Treat each array item as a scalar.\n                                                  add( prefix, v );\n                                          } else {\n                                                  // If array item is non-scalar (array or object), encode its\n                                                  // numeric index to resolve deserialization ambiguity issues.\n                                                  // Note that rack (as of 1.0.0) can\'t currently deserialize\n                                                  // nested arrays properly, and attempting to do so may cause\n                                                  // a server error. Possible fixes are to modify rack\'s\n                                                  // deserialization algorithm or to provide an option or flag\n                                                  // to force array serialization to be shallow.\n                                                  buildParams( prefix + "[" + ( typeof v === "object" || jQuery.isArray(v) ? i : "" ) + "]", v );\n                                          }\n                                  });\n                                          \n                          } else if ( !traditional && obj != null && typeof obj === "object" ) {\n                                  // Serialize object item.\n                                  jQuery.each( obj, function( k, v ) {\n                                          buildParams( prefix + "[" + k + "]", v );\n                                  });\n                                          \n                          } else {\n                                  // Serialize scalar item.\n                                  add( prefix, obj );\n                          }\n                  }\n                  function add( key, value ) {\n                          // If value is a function, invoke it and return its value\n                          value = jQuery.isFunction(value) ? value() : value;\n                          s[ s.length ] = encodeURIComponent(key) + "=" + encodeURIComponent(value);\n                  }\n          }\n  });\n  var elemdisplay = {},\n          rfxtypes = /toggle|show|hide/,\n          rfxnum = /^([+-]=)?([\\d+-.]+)(.*)$/,\n          timerId,\n          fxAttrs = [\n                  // height animations\n                  [ "height", "marginTop", "marginBottom", "paddingTop", "paddingBottom" ],\n                  // width animations\n                  [ "width", "marginLeft", "marginRight", "paddingLeft", "paddingRight" ],\n                  // opacity animations\n                  [ "opacity" ]\n          ];\n  jQuery.fn.extend({\n          show: function( speed, callback ) {\n                  if ( speed || speed === 0) {\n                          return this.animate( genFx("show", 3), speed, callback);\n                  } else {\n                          for ( var i = 0, l = this.length; i < l; i++ ) {\n                                  var old = jQuery.data(this[i], "olddisplay");\n                                  this[i].style.display = old || "";\n                                  if ( jQuery.css(this[i], "display") === "none" ) {\n                                          var nodeName = this[i].nodeName, display;\n                                          if ( elemdisplay[ nodeName ] ) {\n                                                  display = elemdisplay[ nodeName ];\n                                          } else {\n                                                  var elem = jQuery("<" + nodeName + " />").appendTo("body");\n                                                  display = elem.css("display");\n                                                  if ( display === "none" ) {\n                                                          display = "block";\n                                                  }\n                                                  elem.remove();\n                                                  elemdisplay[ nodeName ] = display;\n                                          }\n                                          jQuery.data(this[i], "olddisplay", display);\n                                  }\n                          }\n                          // Set the display of the elements in a second loop\n                          // to avoid the constant reflow\n                          for ( var j = 0, k = this.length; j < k; j++ ) {\n                                  this[j].style.display = jQuery.data(this[j], "olddisplay") || "";\n                          }\n                          return this;\n                  }\n          },\n          hide: function( speed, callback ) {\n                  if ( speed || speed === 0 ) {\n                          return this.animate( genFx("hide", 3), speed, callback);\n                  } else {\n                          for ( var i = 0, l = this.length; i < l; i++ ) {\n                                  var old = jQuery.data(this[i], "olddisplay");\n                                  if ( !old && old !== "none" ) {\n                                          jQuery.data(this[i], "olddisplay", jQuery.css(this[i], "display"));\n                                  }\n                          }\n                          // Set the display of the elements in a second loop\n                          // to avoid the constant reflow\n                          for ( var j = 0, k = this.length; j < k; j++ ) {\n                                  this[j].style.display = "none";\n                          }\n                          return this;\n                  }\n          },\n          // Save the old toggle function\n          _toggle: jQuery.fn.toggle,\n          toggle: function( fn, fn2 ) {\n                  var bool = typeof fn === "boolean";\n                  if ( jQuery.isFunction(fn) && jQuery.isFunction(fn2) ) {\n                          this._toggle.apply( this, arguments );\n                  } else if ( fn == null || bool ) {\n                          this.each(function() {\n                                  var state = bool ? fn : jQuery(this).is(":hidden");\n                                  jQuery(this)[ state ? "show" : "hide" ]();\n                          });\n                  } else {\n                          this.animate(genFx("toggle", 3), fn, fn2);\n                  }\n                  return this;\n          },\n          fadeTo: function( speed, to, callback ) {\n                  return this.filter(":hidden").css("opacity", 0).show().end()\n                                          .animate({opacity: to}, speed, callback);\n          },\n          animate: function( prop, speed, easing, callback ) {\n                  var optall = jQuery.speed(speed, easing, callback);\n                  if ( jQuery.isEmptyObject( prop ) ) {\n                          return this.each( optall.complete );\n                  }\n                  return this[ optall.queue === false ? "each" : "queue" ](function() {\n                          var opt = jQuery.extend({}, optall), p,\n                                  hidden = this.nodeType === 1 && jQuery(this).is(":hidden"),\n                                  self = this;\n                          for ( p in prop ) {\n                                  var name = p.replace(rdashAlpha, fcamelCase);\n                                  if ( p !== name ) {\n                                          prop[ name ] = prop[ p ];\n                                          delete prop[ p ];\n                                          p = name;\n                                  }\n                                  if ( prop[p] === "hide" && hidden || prop[p] === "show" && !hidden ) {\n                                          return opt.complete.call(this);\n                                  }\n                                  if ( ( p === "height" || p === "width" ) && this.style ) {\n                                          // Store display property\n                                          opt.display = jQuery.css(this, "display");\n                                          // Make sure that nothing sneaks out\n                                          opt.overflow = this.style.overflow;\n                                  }\n                                  if ( jQuery.isArray( prop[p] ) ) {\n                                          // Create (if needed) and add to specialEasing\n                                          (opt.specialEasing = opt.specialEasing || {})[p] = prop[p][1];\n                                          prop[p] = prop[p][0];\n                                  }\n                          }\n                          if ( opt.overflow != null ) {\n                                  this.style.overflow = "hidden";\n                          }\n                          opt.curAnim = jQuery.extend({}, prop);\n                          jQuery.each( prop, function( name, val ) {\n                                  var e = new jQuery.fx( self, opt, name );\n                                  if ( rfxtypes.test(val) ) {\n                                          e[ val === "toggle" ? hidden ? "show" : "hide" : val ]( prop );\n                                  } else {\n                                          var parts = rfxnum.exec(val),\n                                                  start = e.cur(true) || 0;\n                                          if ( parts ) {\n                                                  var end = parseFloat( parts[2] ),\n                                                          unit = parts[3] || "px";\n                                                  // We need to compute starting value\n                                                  if ( unit !== "px" ) {\n                                                          self.style[ name ] = (end || 1) + unit;\n                                                          start = ((end || 1) / e.cur(true)) * start;\n                                                          self.style[ name ] = start + unit;\n                                                  }\n                                                  // If a +=/-= token was provided, we\'re doing a relative animation\n                                                  if ( parts[1] ) {\n                                                          end = ((parts[1] === "-=" ? -1 : 1) * end) + start;\n                                                  }\n                                                  e.custom( start, end, unit );\n                                          } else {\n                                                  e.custom( start, val, "" );\n                                          }\n                                  }\n                          });\n                          // For JS strict compliance\n                          return true;\n                  });\n          },\n          stop: function( clearQueue, gotoEnd ) {\n                  var timers = jQuery.timers;\n                  if ( clearQueue ) {\n                          this.queue([]);\n                  }\n                  this.each(function() {\n                          // go in reverse order so anything added to the queue during the loop is ignored\n                          for ( var i = timers.length - 1; i >= 0; i-- ) {\n                                  if ( timers[i].elem === this ) {\n                                          if (gotoEnd) {\n                                                  // force the next step to be the last\n                                                  timers[i](true);\n                                          }\n                                          timers.splice(i, 1);\n                                  }\n                          }\n                  });\n                  // start the next in the queue if the last step wasn\'t forced\n                  if ( !gotoEnd ) {\n                          this.dequeue();\n                  }\n                  return this;\n          }\n  });\n  // Generate shortcuts for custom animations\n  jQuery.each({\n          slideDown: genFx("show", 1),\n          slideUp: genFx("hide", 1),\n          slideToggle: genFx("toggle", 1),\n          fadeIn: { opacity: "show" },\n          fadeOut: { opacity: "hide" }\n  }, function( name, props ) {\n          jQuery.fn[ name ] = function( speed, callback ) {\n                  return this.animate( props, speed, callback );\n          };\n  });\n  jQuery.extend({\n          speed: function( speed, easing, fn ) {\n                  var opt = speed && typeof speed === "object" ? speed : {\n                          complete: fn || !fn && easing ||\n                                  jQuery.isFunction( speed ) && speed,\n                          duration: speed,\n                          easing: fn && easing || easing && !jQuery.isFunction(easing) && easing\n                  };\n                  opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :\n                          jQuery.fx.speeds[opt.duration] || jQuery.fx.speeds._default;\n                  // Queueing\n                  opt.old = opt.complete;\n                  opt.complete = function() {\n                          if ( opt.queue !== false ) {\n                                  jQuery(this).dequeue();\n                          }\n                          if ( jQuery.isFunction( opt.old ) ) {\n                                  opt.old.call( this );\n                          }\n                  };\n                  return opt;\n          },\n          easing: {\n                  linear: function( p, n, firstNum, diff ) {\n                          return firstNum + diff * p;\n                  },\n                  swing: function( p, n, firstNum, diff ) {\n                          return ((-Math.cos(p*Math.PI)/2) + 0.5) * diff + firstNum;\n                  }\n          },\n          timers: [],\n          fx: function( elem, options, prop ) {\n                  this.options = options;\n                  this.elem = elem;\n                  this.prop = prop;\n                  if ( !options.orig ) {\n                          options.orig = {};\n                  }\n          }\n  });\n  jQuery.fx.prototype = {\n          // Simple function for setting a style value\n          update: function() {\n                  if ( this.options.step ) {\n                          this.options.step.call( this.elem, this.now, this );\n                  }\n                  (jQuery.fx.step[this.prop] || jQuery.fx.step._default)( this );\n                  // Set display property to block for height/width animations\n                  if ( ( this.prop === "height" || this.prop === "width" ) && this.elem.style ) {\n                          this.elem.style.display = "block";\n                  }\n          },\n          // Get the current size\n          cur: function( force ) {\n                  if ( this.elem[this.prop] != null && (!this.elem.style || this.elem.style[this.prop] == null) ) {\n                          return this.elem[ this.prop ];\n                  }\n                  var r = parseFloat(jQuery.css(this.elem, this.prop, force));\n                  return r && r > -10000 ? r : parseFloat(jQuery.curCSS(this.elem, this.prop)) || 0;\n          },\n          // Start an animation from one number to another\n          custom: function( from, to, unit ) {\n                  this.startTime = now();\n                  this.start = from;\n                  this.end = to;\n                  this.unit = unit || this.unit || "px";\n                  this.now = this.start;\n                  this.pos = this.state = 0;\n                  var self = this;\n                  function t( gotoEnd ) {\n                          return self.step(gotoEnd);\n                  }\n                  t.elem = this.elem;\n                  if ( t() && jQuery.timers.push(t) && !timerId ) {\n                          timerId = setInterval(jQuery.fx.tick, 13);\n                  }\n          },\n          // Simple \'show\' function\n          show: function() {\n                  // Remember where we started, so that we can go back to it later\n                  this.options.orig[this.prop] = jQuery.style( this.elem, this.prop );\n                  this.options.show = true;\n                  // Begin the animation\n                  // Make sure that we start at a small width/height to avoid any\n                  // flash of content\n                  this.custom(this.prop === "width" || this.prop === "height" ? 1 : 0, this.cur());\n                  // Start by showing the element\n                  jQuery( this.elem ).show();\n          },\n          // Simple \'hide\' function\n          hide: function() {\n                  // Remember where we started, so that we can go back to it later\n                  this.options.orig[this.prop] = jQuery.style( this.elem, this.prop );\n                  this.options.hide = true;\n                  // Begin the animation\n                  this.custom(this.cur(), 0);\n          },\n          // Each step of an animation\n          step: function( gotoEnd ) {\n                  var t = now(), done = true;\n                  if ( gotoEnd || t >= this.options.duration + this.startTime ) {\n                          this.now = this.end;\n                          this.pos = this.state = 1;\n                          this.update();\n                          this.options.curAnim[ this.prop ] = true;\n                          for ( var i in this.options.curAnim ) {\n                                  if ( this.options.curAnim[i] !== true ) {\n                                          done = false;\n                                  }\n                          }\n                          if ( done ) {\n                                  if ( this.options.display != null ) {\n                                          // Reset the overflow\n                                          this.elem.style.overflow = this.options.overflow;\n                                          // Reset the display\n                                          var old = jQuery.data(this.elem, "olddisplay");\n                                          this.elem.style.display = old ? old : this.options.display;\n                                          if ( jQuery.css(this.elem, "display") === "none" ) {\n                                                  this.elem.style.display = "block";\n                                          }\n                                  }\n                                  // Hide the element if the "hide" operation was done\n                                  if ( this.options.hide ) {\n                                          jQuery(this.elem).hide();\n                                  }\n                                  // Reset the properties, if the item has been hidden or shown\n                                  if ( this.options.hide || this.options.show ) {\n                                          for ( var p in this.options.curAnim ) {\n                                                  jQuery.style(this.elem, p, this.options.orig[p]);\n                                          }\n                                  }\n                                  // Execute the complete function\n                                  this.options.complete.call( this.elem );\n                          }\n                          return false;\n                  } else {\n                          var n = t - this.startTime;\n                          this.state = n / this.options.duration;\n                          // Perform the easing function, defaults to swing\n                          var specialEasing = this.options.specialEasing && this.options.specialEasing[this.prop];\n                          var defaultEasing = this.options.easing || (jQuery.easing.swing ? "swing" : "linear");\n                          this.pos = jQuery.easing[specialEasing || defaultEasing](this.state, n, 0, 1, this.options.duration);\n                          this.now = this.start + ((this.end - this.start) * this.pos);\n                          // Perform the next step of the animation\n                          this.update();\n                  }\n                  return true;\n          }\n  };\n  jQuery.extend( jQuery.fx, {\n          tick: function() {\n                  var timers = jQuery.timers;\n                  for ( var i = 0; i < timers.length; i++ ) {\n                          if ( !timers[i]() ) {\n                                  timers.splice(i--, 1);\n                          }\n                  }\n                  if ( !timers.length ) {\n                          jQuery.fx.stop();\n                  }\n          },\n                  \n          stop: function() {\n                  clearInterval( timerId );\n                  timerId = null;\n          },\n          \n          speeds: {\n                  slow: 600,\n                  fast: 200,\n                  // Default speed\n                  _default: 400\n          },\n          step: {\n                  opacity: function( fx ) {\n                          jQuery.style(fx.elem, "opacity", fx.now);\n                  },\n                  _default: function( fx ) {\n                          if ( fx.elem.style && fx.elem.style[ fx.prop ] != null ) {\n                                  fx.elem.style[ fx.prop ] = (fx.prop === "width" || fx.prop === "height" ? Math.max(0, fx.now) : fx.now) + fx.unit;\n                          } else {\n                                  fx.elem[ fx.prop ] = fx.now;\n                          }\n                  }\n          }\n  });\n  if ( jQuery.expr && jQuery.expr.filters ) {\n          jQuery.expr.filters.animated = function( elem ) {\n                  return jQuery.grep(jQuery.timers, function( fn ) {\n                          return elem === fn.elem;\n                  }).length;\n          };\n  }\n  function genFx( type, num ) {\n          var obj = {};\n          jQuery.each( fxAttrs.concat.apply([], fxAttrs.slice(0,num)), function() {\n                  obj[ this ] = type;\n          });\n          return obj;\n  }\n  if ( "getBoundingClientRect" in document.documentElement ) {\n          jQuery.fn.offset = function( options ) {\n                  var elem = this[0];\n                  if ( options ) { \n                          return this.each(function( i ) {\n                                  jQuery.offset.setOffset( this, options, i );\n                          });\n                  }\n                  if ( !elem || !elem.ownerDocument ) {\n                          return null;\n                  }\n                  if ( elem === elem.ownerDocument.body ) {\n                          return jQuery.offset.bodyOffset( elem );\n                  }\n                  var box = elem.getBoundingClientRect(), doc = elem.ownerDocument, body = doc.body, docElem = doc.documentElement,\n                          clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n                          top  = box.top  + (self.pageYOffset || jQuery.support.boxModel && docElem.scrollTop  || body.scrollTop ) - clientTop,\n                          left = box.left + (self.pageXOffset || jQuery.support.boxModel && docElem.scrollLeft || body.scrollLeft) - clientLeft;\n                  return { top: top, left: left };\n          };\n  } else {\n          jQuery.fn.offset = function( options ) {\n                  var elem = this[0];\n                  if ( options ) { \n                          return this.each(function( i ) {\n                                  jQuery.offset.setOffset( this, options, i );\n                          });\n                  }\n                  if ( !elem || !elem.ownerDocument ) {\n                          return null;\n                  }\n                  if ( elem === elem.ownerDocument.body ) {\n                          return jQuery.offset.bodyOffset( elem );\n                  }\n                  jQuery.offset.initialize();\n                  var offsetParent = elem.offsetParent, prevOffsetParent = elem,\n                          doc = elem.ownerDocument, computedStyle, docElem = doc.documentElement,\n                          body = doc.body, defaultView = doc.defaultView,\n                          prevComputedStyle = defaultView ? defaultView.getComputedStyle( elem, null ) : elem.currentStyle,\n                          top = elem.offsetTop, left = elem.offsetLeft;\n                  while ( (elem = elem.parentNode) && elem !== body && elem !== docElem ) {\n                          if ( jQuery.offset.supportsFixedPosition && prevComputedStyle.position === "fixed" ) {\n                                  break;\n                          }\n                          computedStyle = defaultView ? defaultView.getComputedStyle(elem, null) : elem.currentStyle;\n                          top  -= elem.scrollTop;\n                          left -= elem.scrollLeft;\n                          if ( elem === offsetParent ) {\n                                  top  += elem.offsetTop;\n                                  left += elem.offsetLeft;\n                                  if ( jQuery.offset.doesNotAddBorder && !(jQuery.offset.doesAddBorderForTableAndCells && /^t(able|d|h)$/i.test(elem.nodeName)) ) {\n                                          top  += parseFloat( computedStyle.borderTopWidth  ) || 0;\n                                          left += parseFloat( computedStyle.borderLeftWidth ) || 0;\n                                  }\n                                  prevOffsetParent = offsetParent, offsetParent = elem.offsetParent;\n                          }\n                          if ( jQuery.offset.subtractsBorderForOverflowNotVisible && computedStyle.overflow !== "visible" ) {\n                                  top  += parseFloat( computedStyle.borderTopWidth  ) || 0;\n                                  left += parseFloat( computedStyle.borderLeftWidth ) || 0;\n                          }\n                          prevComputedStyle = computedStyle;\n                  }\n                  if ( prevComputedStyle.position === "relative" || prevComputedStyle.position === "static" ) {\n                          top  += body.offsetTop;\n                          left += body.offsetLeft;\n                  }\n                  if ( jQuery.offset.supportsFixedPosition && prevComputedStyle.position === "fixed" ) {\n                          top  += Math.max( docElem.scrollTop, body.scrollTop );\n                          left += Math.max( docElem.scrollLeft, body.scrollLeft );\n                  }\n                  return { top: top, left: left };\n          };\n  }\n  jQuery.offset = {\n          initialize: function() {\n                  var body = document.body, container = document.createElement("div"), innerDiv, checkDiv, table, td, bodyMarginTop = parseFloat( jQuery.curCSS(body, "marginTop", true) ) || 0,\n                          html = "<div style=\'position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;\'><div></div></div><table style=\'position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;\' cellpadding=\'0\' cellspacing=\'0\'><tr><td></td></tr></table>";\n                  jQuery.extend( container.style, { position: "absolute", top: 0, left: 0, margin: 0, border: 0, width: "1px", height: "1px", visibility: "hidden" } );\n                  container.innerHTML = html;\n                  body.insertBefore( container, body.firstChild );\n                  innerDiv = container.firstChild;\n                  checkDiv = innerDiv.firstChild;\n                  td = innerDiv.nextSibling.firstChild.firstChild;\n                  this.doesNotAddBorder = (checkDiv.offsetTop !== 5);\n                  this.doesAddBorderForTableAndCells = (td.offsetTop === 5);\n                  checkDiv.style.position = "fixed", checkDiv.style.top = "20px";\n                  // safari subtracts parent border width here which is 5px\n                  this.supportsFixedPosition = (checkDiv.offsetTop === 20 || checkDiv.offsetTop === 15);\n                  checkDiv.style.position = checkDiv.style.top = "";\n                  innerDiv.style.overflow = "hidden", innerDiv.style.position = "relative";\n                  this.subtractsBorderForOverflowNotVisible = (checkDiv.offsetTop === -5);\n                  this.doesNotIncludeMarginInBodyOffset = (body.offsetTop !== bodyMarginTop);\n                  body.removeChild( container );\n                  body = container = innerDiv = checkDiv = table = td = null;\n                  jQuery.offset.initialize = jQuery.noop;\n          },\n          bodyOffset: function( body ) {\n                  var top = body.offsetTop, left = body.offsetLeft;\n                  jQuery.offset.initialize();\n                  if ( jQuery.offset.doesNotIncludeMarginInBodyOffset ) {\n                          top  += parseFloat( jQuery.curCSS(body, "marginTop",  true) ) || 0;\n                          left += parseFloat( jQuery.curCSS(body, "marginLeft", true) ) || 0;\n                  }\n                  return { top: top, left: left };\n          },\n          \n          setOffset: function( elem, options, i ) {\n                  // set position first, in-case top/left are set even on static elem\n                  if ( /static/.test( jQuery.curCSS( elem, "position" ) ) ) {\n                          elem.style.position = "relative";\n                  }\n                  var curElem   = jQuery( elem ),\n                          curOffset = curElem.offset(),\n                          curTop    = parseInt( jQuery.curCSS( elem, "top",  true ), 10 ) || 0,\n                          curLeft   = parseInt( jQuery.curCSS( elem, "left", true ), 10 ) || 0;\n                  if ( jQuery.isFunction( options ) ) {\n                          options = options.call( elem, i, curOffset );\n                  }\n                  var props = {\n                          top:  (options.top  - curOffset.top)  + curTop,\n                          left: (options.left - curOffset.left) + curLeft\n                  };\n                  \n                  if ( "using" in options ) {\n                          options.using.call( elem, props );\n                  } else {\n                          curElem.css( props );\n                  }\n          }\n  };\n  jQuery.fn.extend({\n          position: function() {\n                  if ( !this[0] ) {\n                          return null;\n                  }\n                  var elem = this[0],\n                  // Get *real* offsetParent\n                  offsetParent = this.offsetParent(),\n                  // Get correct offsets\n                  offset       = this.offset(),\n                  parentOffset = /^body|html$/i.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset();\n                  // Subtract element margins\n                  // note: when an element has margin: auto the offsetLeft and marginLeft\n                  // are the same in Safari causing offset.left to incorrectly be 0\n                  offset.top  -= parseFloat( jQuery.curCSS(elem, "marginTop",  true) ) || 0;\n                  offset.left -= parseFloat( jQuery.curCSS(elem, "marginLeft", true) ) || 0;\n                  // Add offsetParent borders\n                  parentOffset.top  += parseFloat( jQuery.curCSS(offsetParent[0], "borderTopWidth",  true) ) || 0;\n                  parentOffset.left += parseFloat( jQuery.curCSS(offsetParent[0], "borderLeftWidth", true) ) || 0;\n                  // Subtract the two offsets\n                  return {\n                          top:  offset.top  - parentOffset.top,\n                          left: offset.left - parentOffset.left\n                  };\n          },\n          offsetParent: function() {\n                  return this.map(function() {\n                          var offsetParent = this.offsetParent || document.body;\n                          while ( offsetParent && (!/^body|html$/i.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static") ) {\n                                  offsetParent = offsetParent.offsetParent;\n                          }\n                          return offsetParent;\n                  });\n          }\n  });\n  // Create scrollLeft and scrollTop methods\n  jQuery.each( ["Left", "Top"], function( i, name ) {\n          var method = "scroll" + name;\n          jQuery.fn[ method ] = function(val) {\n                  var elem = this[0], win;\n                  \n                  if ( !elem ) {\n                          return null;\n                  }\n                  if ( val !== undefined ) {\n                          // Set the scroll offset\n                          return this.each(function() {\n                                  win = getWindow( this );\n                                  if ( win ) {\n                                          win.scrollTo(\n                                                  !i ? val : jQuery(win).scrollLeft(),\n                                                   i ? val : jQuery(win).scrollTop()\n                                          );\n                                  } else {\n                                          this[ method ] = val;\n                                  }\n                          });\n                  } else {\n                          win = getWindow( elem );\n                          // Return the scroll offset\n                          return win ? ("pageXOffset" in win) ? win[ i ? "pageYOffset" : "pageXOffset" ] :\n                                  jQuery.support.boxModel && win.document.documentElement[ method ] ||\n                                          win.document.body[ method ] :\n                                  elem[ method ];\n                  }\n          };\n  });\n  function getWindow( elem ) {\n          return ("scrollTo" in elem && elem.document) ?\n                  elem :\n                  elem.nodeType === 9 ?\n                          elem.defaultView || elem.parentWindow :\n                          false;\n  }\n  // Create innerHeight, innerWidth, outerHeight and outerWidth methods\n  jQuery.each([ "Height", "Width" ], function( i, name ) {\n          var type = name.toLowerCase();\n          // innerHeight and innerWidth\n          jQuery.fn["inner" + name] = function() {\n                  return this[0] ?\n                          jQuery.css( this[0], type, false, "padding" ) :\n                          null;\n          };\n          // outerHeight and outerWidth\n          jQuery.fn["outer" + name] = function( margin ) {\n                  return this[0] ?\n                          jQuery.css( this[0], type, false, margin ? "margin" : "border" ) :\n                          null;\n          };\n          jQuery.fn[ type ] = function( size ) {\n                  // Get window width or height\n                  var elem = this[0];\n                  if ( !elem ) {\n                          return size == null ? null : this;\n                  }\n                  \n                  if ( jQuery.isFunction( size ) ) {\n                          return this.each(function( i ) {\n                                  var self = jQuery( this );\n                                  self[ type ]( size.call( this, i, self[ type ]() ) );\n                          });\n                  }\n                  return ("scrollTo" in elem && elem.document) ? // does it walk and quack like a window?\n                          // Everyone else use document.documentElement or document.body depending on Quirks vs Standards mode\n                          elem.document.compatMode === "CSS1Compat" && elem.document.documentElement[ "client" + name ] ||\n                          elem.document.body[ "client" + name ] :\n                          // Get document width or height\n                          (elem.nodeType === 9) ? // is it a document\n                                  // Either scroll[Width/Height] or offset[Width/Height], whichever is greater\n                                  Math.max(\n                                          elem.documentElement["client" + name],\n                                          elem.body["scroll" + name], elem.documentElement["scroll" + name],\n                                          elem.body["offset" + name], elem.documentElement["offset" + name]\n                                  ) :\n                                  // Get or set width or height on the element\n                                  size === undefined ?\n                                          // Get width or height on the element\n                                          jQuery.css( elem, type ) :\n                                          // Set the width or height on the element (default to pixels if value is unitless)\n                                          this.css( type, typeof size === "string" ? size : size + "px" );\n          };\n  });\n  // Expose jQuery to the global object\n  window.jQuery = window.$ = jQuery;\n  })(window);\n  });\n});\n');