sdocp('sdoc::js::test/lex-op', 'Operation lexing tests.\n\ntest(\'lex-op\', function () {\n  var s = function (e, i) {eq(caterwaul.parse(e).inspect(), i)};\n\n  Pathological numerical cases.\n\n  s(\'1.2e+3+4\', \'(+ (1.2e+3) (4))\');\n  s(\'1.2E10+5\', \'(+ (1.2E10) (5))\');\n  s(\'1E10+2\',   \'(+ (1E10) (2))\');\n  s(\'1E+10+4E+10\', \'(+ (1E+10) (4E+10))\');\n\n  s(\'0x14.serialize\', \'(. (0x14) (serialize))\');\n  s(\'0xE+5\', \'(+ (0xE) (5))\');\n\n  s(\'0644.serialize\', \'(. (0644) (serialize))\');\n  s(\'0x511e+10e+10\', \'(+ (0x511e) (10e+10))\');\n\n  Regular expression inference.\n\n  s(\'return /foo/g\', \'(return (/foo/g))\');\n  s(\'throw /foo/g\', \'(throw (/foo/g))\');\n  s(\'case /foo/g:\', \'(: (case (/foo/g)) (<>))\');\n\n  s(\'bar /foo/g\', \'(/ (/ (bar) (foo)) (g))\');\n  s(\'3.5 /foo/g\', \'(/ (/ (3.5) (foo)) (g))\');\n  s(\'false /foo/g\', \'(/ (/ (false) (foo)) (g))\');\n});');