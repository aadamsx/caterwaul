sdocp('test/lex-op.js.sdoc', 'Operation lexing tests.\n\ntest(function () {\n  var t = function (s)    {return aeq(caterwaul.lex(s), Array.prototype.slice.call(arguments, 1))},\n      s = function (s)    {return t(s, s)},\n      q = function (s, e) {return aeq(caterwaul.lex(s), e.split(/\\s+/))},\n      Q = function (s)    {return q(s, s)};\n\n  Simple expressions.\n\n  q(\'3+5\', \'3 + 5\');\n  q(\'3-5\', \'3 - 5\');\n  q(\'3*5\', \'3 * 5\');\n\n  c\n  Q(\'3 + 5\');\n  Q(\'3 - 5\');\n  Q(\'3 * 5\');\n  Q(\'3 / 5\');\n  Q(\'4 % 5\');\n  Q(\'5 ^ 6\');\n  Q(\'6 & 7\');\n  Q(\'7 | 8\');\n\n  c\n  Q(\'1 > 2\');\n  Q(\'1 < 2\');\n  Q(\'1 >> 2\');\n  Q(\'1 << 2\');\n  Q(\'1 >>> 2\');\n\n  c\n  Q(\'.3 + .5\');\n  Q(\'.3 - .5\');\n  Q(\'.3 * .5\');\n  Q(\'.3 / .5\');\n\n  Pathological numerical cases.\n\n  q(\'1.2e+3+4\', \'1.2e+3 + 4\');\n  q(\'1.2E10+5\', \'1.2E10 + 5\');\n  q(\'1E10+2\',   \'1E10 + 2\');\n  q(\'1E+10+4E+10\', \'1E+10 + 4E+10\');\n\n  q(\'0x14.serialize\', \'0x14 . serialize\');\n  q(\'0xE+5\', \'0xE + 5\');\n\n  q(\'0644.serialize\', \'0644 . serialize\');\n  q(\'0x511e+10e+10\', \'0x511e + 10e+10\');\n\n  Regular expression inference.\n\n  q(\'return /foo/g\', \'return /foo/g\');\n  q(\'throw /foo/g\', \'throw /foo/g\');\n  q(\'case /foo/g:\', \'case /foo/g :\');\n\n  q(\'bar /foo/g\', \'bar / foo / g\');\n  q(\'3.5 /foo/g\', \'3.5 / foo / g\');\n  q(\'false /foo/g\', \'false / foo / g\');\n\n  Pre/post increment and decrement.\n\n  q(\'x++ /foo/g\', \'x ++ / foo / g\');\n  q(\'x+++ /foo/g\', \'x ++ + /foo/g\');\n  q(\'++x /foo/g\', \'u++ x / foo / g\');\n  q(\'++x+ /foo/g\', \'u++ x + /foo/g\');\n\n  q(\'x-- /foo/g\', \'x -- / foo / g\');\n  q(\'x--+ /foo/g\', \'x -- + /foo/g\');\n  q(\'--x /foo/g\', \'u-- x / foo / g\');\n  q(\'--x+ /foo/g\', \'u-- x + /foo/g\');\n});\n');