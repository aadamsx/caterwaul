sdocp('sdoc::js::test/lex-regexp-in-for-failure', 'Observed failure case:\nfor (var k in hash) /foo/.test(k) || ...\n\nThe problem here is that the lexer assumes that the parens surrounding the for-loop condition end an expression; there needs to be a lexer workaround for block-accepting keywords like this.\n\ntest(\'lex-regexp-for-in-failure\', function () {\n  var f = function (s) {try {caterwaul.parse(s)} catch (e) {print(\'Chucked a wobbly parsing \' + s); throw e}};\n  f(\'for (var k in hash) /foo/.test(k) && bar()\');\n  f(\'for (var k in hash) /foo/.test(k) && bar();\');\n  f(\'if (k in hash) /foo/.test(k) && bar()\');\n  f(\'if (k in hash) /foo/.test(k) && bar();\');\n  f(\'while (k in hash) /foo/.test(k) && bar()\');\n  f(\'while (k in hash) /foo/.test(k) && bar();\');\n  f(\'with (k) /foo/.test(k) && toString()\');\n  f(\'with (k) /foo/.test(k) && toString();\');\n  f(\'if (k in hash) /foo/.test(k) && bar(); else /foo/.test(k) && bar()\');\n});');