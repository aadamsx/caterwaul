sdocp('sdoc::js::test/parse-arithmetic', 'Arithmetic/expression tests for the parser.\n\ntest(\'parse-arithmetic\', function () {\n  var p = function (s, i) {return eq(caterwaul.parse(s).inspect(), i)};\n\n  Basic precedence\n\n  p(\'3+5\', \'(+ (3) (5))\');\n  p(\'3*5+6\', \'(+ (* (3) (5)) (6))\');\n  p(\'3+5*6\', \'(+ (3) (* (5) (6)))\');\n\n  Associativity\n\n  p(\'3+4+5\', \'(+ (+ (3) (4)) (5))\');\n  p(\'3*4*5\', \'(* (* (3) (4)) (5))\');\n  p(\'3-4-5\', \'(- (- (3) (4)) (5))\');\n  p(\'3/4/5\', \'(/ (/ (3) (4)) (5))\');\n\n  p(\'3=4=5\', \'(= (3) (= (4) (5)))\');\n  p(\'3+=4+=5\', \'(+= (3) (+= (4) (5)))\');\n  p(\'3-=4+=5\', \'(-= (3) (+= (4) (5)))\');\n  p(\'3*=4+=5\', \'(*= (3) (+= (4) (5)))\');\n  p(\'3/=4+=5\', \'(/= (3) (+= (4) (5)))\');\n\n  Parentheses/invocation\n\n  p(\'(3+5)*6\', \'(* (( (+ (3) (5))) (6))\');\n  p(\'6*(3+5)\', \'(* (6) (( (+ (3) (5))))\');\n  p(\'((3))+((5))\', \'(+ (( (( (3))) (( (( (5))))\');\n  p(\'((3+5))\', \'(( (( (+ (3) (5))))\');\n\n  p(\'(3)(4)\', \'(() (( (3)) (4))\');\n  p(\'(3)(4)(5)\', \'(() (() (( (3)) (4)) (5))\');\n  p(\'3(4)\', \'(() (3) (4))\');\n  p(\'(3)[4]\', \'([] (( (3)) (4))\');\n  p(\'3[4]\', \'([] (3) (4))\');\n\n  Array literals/dereferencing\n\n  p(\'[1, 2, 3]\', \'([ (, (, (1) (2)) (3)))\');\n  p(\'[1, 2][0]\', \'([] ([ (, (1) (2))) (0))\');\n  p(\'[1][2, 3]\', \'([] ([ (1)) (, (2) (3)))\');\n  p(\'[1][2][3]\', \'([] ([] ([ (1)) (2)) (3))\');\n\n  p(\'foo.bar[bif]\', \'([] (. (foo) (bar)) (bif))\');\n  p(\'foo.bar[3[bif]]\', \'([] (. (foo) (bar)) ([] (3) (bif)))\');\n  p(\'foo.bar[3[4[bif]]]\', \'([] (. (foo) (bar)) ([] (3) ([] (4) (bif))))\');\n\n  Object notation\n\n  p(\'foo.bar\', \'(. (foo) (bar))\');\n  p(\'foo.bar.bif\', \'(. (. (foo) (bar)) (bif))\');\n  p(\'foo().bar.bif\', \'(. (. (() (foo) (<>)) (bar)) (bif))\');\n  p(\'foo().bar().bif\', \'(. (() (. (() (foo) (<>)) (bar)) (<>)) (bif))\');\n  p(\'foo().bar().bif()\', \'(() (. (() (. (() (foo) (<>)) (bar)) (<>)) (bif)) (<>))\');\n  p(\'foo().bar().bif()()\', \'(() (() (. (() (. (() (foo) (<>)) (bar)) (<>)) (bif)) (<>)) (<>))\');\n});');