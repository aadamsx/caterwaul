sdocp('test/lex-parens.js.sdoc', 'Paren/bracket lexing tests.\n\ntest(function () {\n  var t = function (s)    {return aeq(caterwaul.lex(s), Array.prototype.slice.call(arguments, 1))},\n      s = function (s)    {return t(s, s)},\n      q = function (s, e) {return aeq(caterwaul.lex(s), e.split(/\\s+/))},\n      Q = function (s)    {return q(s, s)};\n\n  Parens.\n\n  q(\'(3+5)\', \'( 3 + 5 )\');\n  q(\'(3-5)\', \'( 3 - 5 )\');\n  q(\'(3*5)\', \'( 3 * 5 )\');\n\n  c\n  Q(\'( 3 + 5 )\');\n  Q(\'( 3 ) - 5\');\n  Q(\'3 * ( 5 )\');\n  Q(\'3 / ( 5 )\');\n  Q(\'( 4 ) % 5\');\n  Q(\'( 5 ^ 6 )\');\n  Q(\'( 6 & 7 )\');\n  Q(\'( 7 ) | 8\');\n\n  Brackets.\n\n  c\n  Q(\'return [ foo ]\');\n  Q(\'throw [ foo ]\');\n\n  q(\'return[foo]\', \'return [ foo ]\');\n  q(\'throw[foo]\', \'throw [ foo ]\');\n\n  q(\'[1,2,3,4]\', \'[ 1 , 2 , 3 , 4 ]\');\n  q(\'+[1]\', \'u+ [ 1 ]\');\n\n  Braces.\n\n  q(\'{foo: bar}\', \'{ foo : bar }\');\n  q(\'{foo:{}}\', \'{ foo : { } }\');\n});\n');