sdocp('sdoc::js::test/parse-syntax', 'JavaScript syntactic constructs.\n\ntest(\'parse-syntax\', function () {\n  var p = function (s, i) {return eq(caterwaul.parse(s).inspect(), i)};\n\n  Lone block-level statements\n\n  p(\'if (foo) {bar}\', \'(if (( (foo)) ({ (bar)))\');\n  p(\'if (foo) bar\', \'(if (( (foo)) (bar))\');\n  p(\'if (foo) bar()\', \'(if (( (foo)) (() (bar) (<>)))\');\n  p(\'if (foo) bar;\', \'(; (if (( (foo)) (bar)) (<>))\');\n  p(\'if (foo);\', \'(; (if (( (foo))) (<>))\');\n\n  p(\'for (var i = 0; i < 10; ++i) total += i;\', \'(; (for (( (; (; (var (= (i) (0))) (< (i) (10))) (u++ (i)))) (+= (total) (i))) (<>))\');\n  p(\'for (var i = 0; i < 10; ++i);\', \'(; (for (( (; (; (var (= (i) (0))) (< (i) (10))) (u++ (i))))) (<>))\');\n  p(\'for (var k in foo) console.log(k);\', \'(; (for (( (var (in (k) (foo)))) (() (. (console) (log)) (k))) (<>))\');\n  p(\'for (var k in foo) for (var j in k) k + j;\', \'(; (for (( (var (in (k) (foo)))) (for (( (var (in (j) (k)))) (+ (k) (j)))) (<>))\');\n  p(\'if(foo)for(bar);\', \'(; (if (( (foo)) (for (( (bar)))) (<>))\');\n\n  p(\'while(foo)bar;\', \'(; (while (( (foo)) (bar)) (<>))\');\n  p(\'while(bif)while(foo)bar;\', \'(; (while (( (bif)) (while (( (foo)) (bar))) (<>))\');\n  p(\'for(var i = 0; i < 10; ++i) while(foo) bar;\', \'(; (for (( (; (; (var (= (i) (0))) (< (i) (10))) (u++ (i)))) (while (( (foo)) (bar))) (<>))\');\n\n  Nested block-level statements\n\n  p(\'if(foo)if(bar)bif\', \'(if (( (foo)) (if (( (bar)) (bif)))\');\n  p(\'if(foo);if(bar)bif\', \'(; (if (( (foo))) (if (( (bar)) (bif)))\');\n\n  p(\'if(foo) {bar} else bif;\', \'(; (if (( (foo)) ({ (bar)) (else (bif))) (<>))\');\n  p(\'if(foo) bar; else bif;\', \'(; (if (( (foo)) (bar) (else (bif))) (<>))\');\n\n  p(\'if(x)y; else if(z) a; else if(w) q;\', \'(; (if (( (x)) (y) (else (if (( (z)) (a) (else (if (( (w)) (q)))))) (<>))\');\n\n  p(\'for(var i = 0, l = 10; i < l; ++i) while (i) while (j) foo;\', \'(; (for (( (; (; (var (, (= (i) (0)) (= (l) (10)))) (< (i) (l))) (u++ (i)))) (while (( (i)) (while (( (j)) (foo)))) (<>))\');\n\n  Functions\n\n  p(\'function foo (bar) {bif} function bar (bif) {baz}\', \'(i; (function (foo) (( (bar)) ({ (bif))) (function (bar) (( (bif)) ({ (baz))))\');\n  p(\'var f = function (x) {return x}\', \'(var (= (f) (function (( (x)) ({ (return (x))))))\');\n});');