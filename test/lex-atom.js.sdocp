sdocp('sdoc::js::test/lex-atom', 'Atom lexing unit tests\n\ntest(\'lex-atom\', function () {\n  var t = function (s, s2) {return eq(caterwaul.parse(s).inspect(), \'(\' + s2 + \')\')},\n      s = function (s)     {return t(s, s)};\n\n  Identifiers\n\n  s(\'foo\');\n  s(\'bar\');\n  s(\'bif\');\n\n  Strings\n\n  s(\'"foo"\');\n  s(\'"foo bar"\');\n  t(\'"foo bar", "bif baz"\', \', ("foo bar") ("bif baz")\');\n\n  s(\'"foo"\');\n  s("\'foo bar\'");\n  t(\'"foo bar", \\\'bif baz\\\'\', \', ("foo bar") (\\\'bif baz\\\')\');\n\n  Escaped strings\n\n  s(\'"foo\\\\"bar"\');\n  s(\'"foo\\\\"\\\\"bar\\\\"\\\\"bif"\');\n  s(\'"\\\\"foo\\\\"\\\\"bar\\\\"\\\\"bif"\');\n  s(\'"\\\\"foo\\\\"\\\\"bar\\\\"\\\\"bif\\\\""\');\n  s(\'"\\\\"foo\\\\\\\\bar\\\\\\\\bif\\\\""\');\n\n  Regular expressions\n\n  s(\'/foo/\');\n  s(\'/foo bar/\');\n  s(\'/foo bar bif/\');\n\n  s(\'/foo/gi\');\n  s(\'/foo/gsim\');\n  s(\'/foo bar bif/gim\');\n\n  Escaped regular expressions\n\n  s(\'/foo\\\\/bar/\');\n  s(\'/foo\\\\/bar\\\\/bif/\');\n  s(\'/foo\\\\/bar\\\\/bif/gi\');\n  s(\'/foo\\\\/bar\\\\/bif/gims\');\n  s(\'/foo\\\\/bar\\\\/bif\\\\\\\\/gims\');\n  s(\'/foo\\\\/bar\\\\/bif\\\\\\\\\\\\//gims\');\n\n  Numeric literals\n\n  s(\'3\');\n  s(\'3.\');\n  s(\'.3\');\n  s(\'3.0\');\n  s(\'3.014\');\n  s(\'3.141592653589793238462643383279502884197\');\n\n  s(\'3e10\');\n  s(\'3e3\');\n  s(\'3.0e10\');\n  s(\'3.0e+10\');\n  s(\'3.0e-10\');\n  s(\'3.0E+10\');\n  s(\'3.0E-10\');\n  s(\'3.0E-1\');\n  s(\'3.0E1\');\n\n  Regular expressions and parens\n\n  t(\'(/foo/g)\', \'( (/foo/g)\');\n  t(\'[/foo/g]\', \'[ (/foo/g)\');\n  t(\'{/foo/g}\', \'{ (/foo/g)\');\n\n  t(\'(foo)/foo/g\', \'/ (/ (( (foo)) (foo)) (g)\');\n  t(\'[foo]/foo/g\', \'/ (/ ([ (foo)) (foo)) (g)\');\n  t(\'{foo}/foo/g\', \'/ (/ ({ (foo)) (foo)) (g)\');\n});');