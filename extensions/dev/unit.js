// Unit/integration testing behavior | Spencer Tipping
// Licensed under the terms of the MIT source code license

// Introduction.
// This behavior provides words that are useful for unit testing. It also creates functions on caterwaul to define and handle unit tests. For example, using the unit testing library you can do
// stuff like this:

// | var t = caterwaul.test(function () {
//     'foo'.length -should_be- 3;
//     'foo' -should_not_be- 'bar';
//     // etc
//   });

caterwaul.js_base()(function ($) {
  $.assert(condition, message) = condition || wobbly[new Error(message)];

  $.assertions = {should_be:     given[a, b] in $.assert(a === b, '#{failure}: #{a} !== #{b}' /given.failure),
                  should_not_be: given[a, b] in $.assert(a !== b, '#{failure}: #{a} === #{b}' /given.failure)};

  $.test_case_gensym     = $.gensym();
  $.test_words(language) = [language.parameterized_modifier('should_be',     'caterwaul.assertions.should_be(_expression, _parameters)'),
                            language.parameterized_modifier('should_not_be', 'caterwaul.assertions.should_not_be(_expression, _parameters)')];

  $.test_base() = this.clone() -effect- it.macros(it.macros().concat(it.test_words(it.js())));
  $.test(f)     = this.test_base()(f)()})(caterwaul);
// Generated by SDoc 
