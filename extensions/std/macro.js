// Macro authoring utilities | Spencer Tipping
// Licensed under the terms of the MIT source code license

// Macro definitions.
// A macro is simply a partial function from source trees to source trees. It returns a falsy value if it cannot be applied to a given tree; otherwise it returns the replacement (as shown
// above). Because most macros end up replacing one pattern with another, caterwaul lets you use strings instead of requiring you to construct recognizer functions.

(function ($) {
  $.ensure_syntax   = function (thing)    {return thing && thing.constructor === String ? this.parse(thing) : thing};

  $.ensure_pattern  = function (pattern)  {return pattern.constructor  === String      ? this.ensure_pattern(this.parse(pattern)) :
                                                  pattern.constructor  === this.syntax ? function (tree) {return pattern.match(tree)} : pattern};

  $.ensure_expander = function (expander) {return expander.constructor === String      ? this.ensure_expander(this.parse(expander)) :
                                                  expander.constructor === this.syntax ? function (match) {return this.macroexpand(expander.replace(match))} : expander};

  $.replacer        = function (pattern, expander) {var new_pattern = this.ensure_pattern(pattern), new_expander = this.ensure_expander(expander),
                                                             result = function (tree) {var match = new_pattern.call(this, tree); return match && new_expander.call(this, match)};
                                                    result.pattern = pattern, result.expander = expander;
                                                    return result}})(caterwaul);


// Generated by SDoc 
