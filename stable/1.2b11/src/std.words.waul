#!/usr/bin/env waul-1.2b9

# Common adjectives and adverbs | Spencer Tipping
# Licensed under the terms of the MIT source code license

# Introduction.
# This behavior installs a bunch of common words and sensible behaviors for them. The goal is to handle most Javascript syntactic cases by using words rather than Javascript primitive syntax.

caterwaul.module('std.words', 'js js_literals words', function ($) {
  $.words(caterwaul_function) = ($.merge(caterwaul_function.modifiers,               $.words.modifiers),
                                 $.merge(caterwaul_function.parameterized_modifiers, $.words.parameterized_modifiers),
                                 caterwaul_function),

  $.words.modifiers = capture [

# Unparameterized modifiers.
# These are basically flags that you can set on chunks of code.

  # Error handling.
#   Javascript in particular has clunky error handling constructs. These words provide error handling in expression context.

    raise = $.reexpander('(function () {throw _expression}).call(this)'.qs),

  # Object construction.
#   This is similar to where[], but constructs a hash object instead of binding local variables. The idea is to be able to use the f(x) = x + 1 function notation but end up with an object. You
#   can also use regular assignments, each of which will be converted into a key/value pair:

  # | var o = capture [f(x) = 10, g(x)(y) = x + y];
#     o.g(10)(20)         // -> 30

  # A variant, wcapture, provides local 'where'-style bindings as well as returning the object. This allows the definitions to refer to one another.

    capture  = function (match) {for (var comma = new $.syntax(','), bindings = match._expression.flatten(','), i = 0, l = bindings.length; i < l; ++i)
                                   comma.push(this(bindings[i]).with_data(':'));
                                 return new $.syntax('{', comma.unflatten())},

    wcapture = function (match) {for (var e = this(match._expression), comma = new $.syntax(','), bindings = e.flatten(','), node, i = 0, l = bindings.length; i < l; ++i)
                                   (node = this(bindings[i]))[1] = node[0], comma.push(node.with_data(':'));
                                 return scope_template.replace({_variables: e, _expression: new $.syntax('{', comma.unflatten())})}],

# Parameterized modifiers.
# These act like binary operators in the sense that they have a left and a right-hand side.

  $.words.parameterized_modifiers = {

  # Error handling.
#   Provides expression-context catching of errors, similar to Ruby's 'rescue' postfix operator.

    rescue: $.reexpander('(function () {try {return (_expression)} catch (e) {return (_parameters)}}).call(this)'.qs),

  # Side-effecting.
#   The goal here is to take an existing value, modify it somehow, and then return it without allocating an actual variable. This can be done using the /se[] adverb. Older versions of caterwaul
#   bound the variable as _; version 1.0 changes this convention to bind the variable to 'it'. For example:

  # | hash(k, v) = {} /se[it[k] = v];
#     compose(f, g)(x) = g(x) -re- f(it);

  # Cheaper are the -rei- form, which doesn't create closures. V8 theoretically could inline the closures created by -se- and -re-, but I don't think it does. The downside to using rei instead
#   of re is that the 'it' variable is not bound.

    se: $.reexpander('(function (it) {return (_parameters), it}).call(this, (_expression))'.qs),  rei: $.reexpander('((_expression), (_parameters))'.qs),
    re: $.reexpander('(function (it) {return (_parameters)}).call(this, (_expression))'.qs),

  # Scoping.
#   You can create local variables by using the where[] modifier. If you do this, the locals can all see each other since they're placed into a 'var' statement. For example:

  # | where[x = 10][alert(x)]
#     alert(x), where[x = 10]

    where: $.reexpander('(function () {var _parameters; return (_expression)}).call(this)'.qs),

  # Importation.
#   This is a fun one. Caterwaul 1.1.2 introduces the 'using' modifier, which lets you statically import an object. For example:

  # | log(x) -using- console              // -> (function () {var log = console.log; return log(x)}).call(this)

  # Variables are computed at compile-time, not at runtime. This is much better than using the 'with' keyword, which degrades performance ('using' has no significant performance impact).
#   However, the calling context is incomplete, as shown above. In particular, methods of the object that you're using will be called with a global 'this' rather than being bound to the object.

    using: $.reexpander(function (match) {var m = this(match._parameters), o = $.compile(m), comma = new $.syntax(','), expression_ref = new $.expression_ref(m);
                                          for (var k in o) Object.prototype.hasOwnProperty.call(o, k) && /^[_$a-zA-Z][_$0-9a-zA-Z]*$/.test(k) &&
                                                           !this.modifiers.hasOwnProperty(k) && !this.parameterized_modifiers.hasOwnProperty(k) &&
                                                           comma.push(new $.syntax('=', k, new $.syntax('.', expression_ref, k)));
                                          return scope_template.replace({_variables: comma.unflatten(), _expression: match._expression})}),

  # Conditionals.
#   These impact whether an expression gets evaluated. x /when.y evaluates to x when y is true, and y when y is false. Similarly, x /unless[y] evaluates to x when y is false, and !y when y is
#   truthy. 'and' and 'or' are provided so that you can change the syntax of short-circuit && and ||.

    when:   $.reexpander('((_parameters) && (_expression))'.qs),    and: $.reexpander('((_expression) && (_parameters))'.qs),
    unless: $.reexpander('(! (_parameters) && (_expression))'.qs),  or:  $.reexpander('((_expression) || (_parameters))'.qs)},

  where [scope_template = '(function () {var _variables; return (_expression)}).call(this)'.qs]});

# Generated by SDoc 
