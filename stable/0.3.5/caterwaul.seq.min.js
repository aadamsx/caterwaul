caterwaul.tconfiguration('std','seq.core',function (){this.configure('std').shallow('seq',{core:fn_[this],define:fb[name,ctor,_at][(this.seq[name]=ctor).prototype=this.util.merge(new this.seq.core(),{_at:_at}),this.seq]});this.seq.core.prototype.size()=this.length;this.seq.core.prototype.at(n)=n<0?this.finite_bound+n>=0?this.at(this.finite_bound+n):undefined:n<this.finite_bound?this[n]:n>=this.length?undefined:(n>0&&this.at(n-1),this[n]=this._at(n),this.finite_bound=n+1,this[n])}).tconfiguration('std iter','seq.core.prepare',function (){this.configure('seq.core').seq.core.prototype.prepare(n)=(this.at((n||this.length)-1),this);this.seq.core.prototype.force(n)=(this.prepare(n),let[result=[]][iter.n[i,n||this.length][result.push(this[i])],result])}).tconfiguration('std','seq.core.class.array',function (){this.configure('seq.core').seq.define('array',fn[xs,length][this.base=xs,this.length=length||xs.length],fn[n][this.base.at?this.base.at(n):this.base[n]])}).tconfiguration('std','seq.core.array',function (){let[array=this.configure('seq.core.class.array').seq.array] in this.rmacro(qs[sa<<_],fn[xs][qs[qg[new _class(_xs)]].replace({_class:new this.ref(array),_xs:xs})])}).tconfiguration('std iter','seq.core.class.object',function (){this.configure('seq.core').seq.define('keys',fn[o][this.xs=[],iter.keys[k,o][this.xs.push(k)],this.length=this.xs.length],fn[n][this.xs[n]]).define('values',fn[o][this.xs=[],iter.keys[k,o][this.xs.push(o[k])],this.length=this.xs.length],fn[n][this.xs[n]]).define('keyvalues',fn[o][this.xs=[],iter.keys[k,o][this.xs.push([k,o[k]])],this.length=this.xs.length],fn[n][this.xs[n]])}).tconfiguration('std','seq.core.object',function (){this.configure('seq.core.class.object');let[keys=this.seq.keys,values=this.seq.values,keyvalues=this.seq.keyvalues] in this.rmacro(qs[sk<<_],fn[o][qs[qg[new _class(_o)]].replace({_class:new this.ref(keys),_o:o})]).rmacro(qs[sv<<_],fn[o][qs[qg[new _class(_o)]].replace({_class:new this.ref(values),_o:o})]).rmacro(qs[skv<<_],fn[o][qs[qg[new _class(_o)]].replace({_class:new this.ref(keyvalues),_o:o})])}).tconfiguration('std iter continuation','seq.core.quantifiers',function (){this.util.merge(this.configure('seq.core').seq.core.prototype,{forall:fn[f][isFinite(this.length)&&call/cc[fb[cc][iter.n[i,this.length][f(this.at(i))||cc(false)],true]]],exists:fn[f][!this.forall(fn[x][!f(x)])]})}).tconfiguration('std','seq.class.ana',function (){this.configure('seq.core').seq.define('ana',fn[f,xs][this.length=0,this.next=f,this.finite_bound=Array.prototype.push.apply(this,xs||[]),this.length=Infinity],fn[n][this.next.call(this,n>0?this.at(n-1):undefined)])}).tconfiguration('std','seq.ana',function (){let[ctransform=this.configure('seq.core seq.class.ana').seq.ana.anamorphic_constructor_transform(body)=qs[fn[x][_body,where*[t=this,$(n)=t.at(n),n=t.finite_bound]]].replace({_body:body}),ana=this.seq.ana] in this.rmacro(qs[seq.ana[_]],fn[body][with_gensyms[init][fn[init][new _class(_f,init)]].replace({_f:ctransform(body),_class:new this.ref(ana)})]).rmacro(qs[_<sa<_],fn[form,init][qs[seq.ana[_form](_init)].replace({_form:form,_init:init})])}).tconfiguration('std iter','seq.class.traversal',function (){this.configure('seq.core').seq.traversal={};this.seq.core.prototype.each(f)=(iter.n[i,this.length][f(this.at(i))],this)}).tconfiguration('std','seq.traversal',function (){let[ctransform=this.configure('seq.core seq.class.traversal').seq.traversal.each_comprehension_transform(body)=qs[fn[x][_body,where*[t=this,$(n)=t.at(n),n=t.finite_bound]]].replace({_body:body})] in this.rmacro(qs[_<se<_],fn[body,xs][qs[qg[_xs.each(_body)]].replace({_xs:xs,_body:ctransform(body)})])}).tconfiguration('std','seq.class.map',function (){this.configure('seq.core').seq.define('map',fn[f,xs][this.length=xs.length,this.base=xs,this.f=f,this.finite_bound=0],fn[n][this.f.call(this,this.base.at(n),n)]);let[map=this.seq.map][this.seq.core.prototype.map(f)=new map(f,this)]}).tconfiguration('std','seq.map',function (){let[ctransform=this.configure('seq.core seq.class.map').seq.map.map_comprehension_transform(body)=qs[fn[x,i][_body,where*[t=this,$(n)=t.base.at(n),n=t.finite_bound]]].replace({_body:body}),map=this.seq.map] in this.rmacro(qs[_<sm<_],fn[body,xs][qs[qg[new _class(_f,_xs)]].replace({_class:new this.ref(map),_f:ctransform(body),_xs:xs})])}).tconfiguration('std','seq.class.filter',function (){this.configure('seq.core').seq.define('filter',fn[f,xs][this.length=xs.length,this.base=xs,this.f=f,this.base_finite_bound=-1,this.finite_bound=0],fn[n][n<this.base.length&&(this.f.call(this,this.base.at(++this.base_finite_bound))?this.base[this.base_finite_bound]:this._at(n))]);let[filter=this.seq.filter][this.seq.core.prototype.filter(f)=new filter(f,this)]}).tconfiguration('std','seq.filter',function (){let[ctransform=this.configure('seq.core seq.class.filter').seq.filter.filter_comprehension_transform(body)=qs[fn[x][_body]].replace({_body:body}),filter=this.seq.filter] in this.rmacro(qs[_<sf<_],fn[body,xs][qs[qg[new _class(_f,_xs)]].replace({_class:new this.ref(filter),_f:ctransform(body),_xs:xs})])}).tconfiguration('std seq.ana','seq.class.slice',function (){this.configure('seq.core seq.core.array seq.class.ana').seq.define('slice',fn[xs,is,n][this.base=xs,this.index=is,this.length=n!==undefined?n:(xs.length<is.length?xs.length:is.length)],fn[n][this.base.at(this.index.at(n))]);let[slice=this.seq.slice,array=this.seq.array] in this.util.merge(this.seq.core.prototype,{first:fn[n][new slice(this,x+1<sa<[0],n)],after:fn[n][new slice(this,x+1<sa<[n])],slice:fn[s][new slice(this,s)],between:fn[a,b][this.after(a).first(b-a)]})}).configuration('seq',function (){this.configure('seq.core.prepare seq.core.array seq.core.object seq.core.quantifiers seq.ana seq.traversal seq.map seq.filter seq.class.slice')});