// Macro forms.
// Before version 1.0 most caterwaul macros were defined ad-hoc; as such the standard library felt chaotic and irregular. Caterwaul 1.0 introduces macro-patterns, which are abstractions to make
// it easier to define regular and predictable syntax macros. Starting with caterwaul 1.0, many macros are defined in terms of their meaning rather than their appearance. For examples of this,
// see sdoc::js::behaviors/core/adverb (for a macro form definition), sdoc::js::behaviors/core/words (for macro definitions), and sdoc::js::behaviors/core/javascript-forms (for form definitions).

//   Defining a macro form.
//   You can define a new macro form using caterwaul's macro_form() method. This takes the name of the form to define and a function that accepts a name, definition, and form and performs the
//   actual macro definition. For example, this is how you might define adverbs as described above:

//   | caterwaul.macro_form('adverb', function (name, definition, form) {
//       this.rmacro(form.replace({_adverb: name}), definition);
//     });

//   The function you give it will be invoked for each new adverb or adverb form. This function is also bound as a method called 'define_adverb'.

  caterwaul.method('macro_form', function () {for (var i = 0, l = arguments.length - 1; i < l; ++i) this.define_macro_form(arguments[i], arguments[l]); return this}).
            method('define_macro_form', function (name, define) {
              var names = name + 's', form = name + '_form', forms = name + '_forms', define_name = 'define_' + name;

              return this.
                shallow(names, []).method(name, function () {
                  for (var fs = this[forms], def = this[define_name], i = 0, l = arguments.length - 1, definition = this.ensure_expander(arguments[l]), lj = fs.length; i < l; ++i) {
                    for (var name = arguments[i], j = 0; j < lj; ++j) def.call(this, name, definition, fs[j]);
                    this[names].push({name: name, definition: definition})}
                  return this}).

                shallow(forms, []).method(form, function () {
                  for (var xs = this[names], def = this[define_name], i = 0, l = arguments.length, lj = xs.length; i < l; ++i) {
                    for (var form = this.ensure_syntax(arguments[i]), j = 0; j < lj; ++j) def.call(this, xs[j].name, xs[j].definition, form);
                    this[forms].push(form)}
                  return this}).

                 method(define_name, function () {return define.apply(this, arguments), this})});
// Generated by SDoc 
