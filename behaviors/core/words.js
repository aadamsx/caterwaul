// Common adjectives and adverbs | Spencer Tipping
// Licensed under the terms of the MIT source code license

// Introduction.
// This behavior installs a bunch of common words and sensible behaviors for them. The goal is to handle most Javascript syntactic cases by using words rather than Javascript primitive syntax.
// For example, constructing lambdas can be done with 'given' rather than the normal function() construct:

// | [1, 2, 3].map(x + 1, given[x])        // -> [1, 2, 3].map(function (x) {return x + 1})

// In this case, given[] is registered as a postfix binary adverb. Any postfix binary adverb forms added later will extend the possible uses of given[].

  caterwaul.tconfiguration('core.quote core.js', 'core.words', function () {

// Function words.
// These define functions in some form. given[] and bgiven[] are postfix adverbs to turn an expression into a function; given[] creates a regular closure while bgiven[] preserves the closure
// binding.

    this.postfix_binary_adverb('given',  function (expression, args) {return this.gen.      lambda(args, expression)}).
         postfix_binary_adverb('bgiven', function (expression, args) {return this.gen.bound_lambda(args, expression)});

// Conditionals.
// These impact whether an expression gets evaluated. x /when[y] evaluates to x when y is true, and y when y is false. Similarly, x /unless[y] evaluates to x when y is false, and !y when y is
// true.

    this.postfix_binary_adverb('when',   function (expression, condition) {return this.gen.predicate(condition, expression)}).
         postfix_binary_adverb('unless', function (expression, condition) {return this.gen.predicate(this.gen.negate(condition), expression)});

// Side-effecting.
// The goal here is to take an existing value, modify it somehow, and then return it without allocating an actual variable. This can be done using the /effect[] adverb, also written as /se[].
// Older versions of caterwaul bound the variable as _; version 1.0 changes this convention to bind the variable to 'it'. For example:

// | hash(k, v) = {} /effect[it[k] = v];

    this.postfix_binary_adverb('effect', 'se'
// Generated by SDoc 
