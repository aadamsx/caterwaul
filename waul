#!/usr/bin/env node

// Waul: the offline precompiler for Caterwaul | Spencer Tipping
// Licensed under the terms of the MIT source code license

// Introduction.
// Caterwaul is useful as a library and an online compiler, but when performance is important you probably want to deliver precompiled code. Waul is a program that does exactly that. You write a
// regular file that invokes Caterwaul on a function, and Waul emits a Javascript file that contains the Caterwaul-compiled results. For example:

// | $ cat > test.waul <<EOF
//   caterwaul('js_all')(function ($) {
//     console.log('#{message} from caterwaul!')
//     -where [message = 'hello']})(caterwaul);
//   EOF
//   $ waul test.waul
//   $ node test.js
//   hello from caterwaul!
//   $

// Waul has some limitations:

// | 1. It cannot precompile any macros that generate refs (this includes the -eval- modifier, unfortunately, though as of 1.1.6 -using- works just fine).
//   2. You need to inform it about any Caterwaul extensions up-front (I'll explain how to do this).

// Extensions.
// Caterwaul can be extended with custom macros, and in order to precompile something that uses these extensions you'll have to inform Waul about them. You can do this with the --extension flag,
// like this:

// | $ waul --extension caterwaul.custom.js foo.waul

// This will result in Waul loading in the custom extensions before customizing the Caterwaul instance that is used inside foo.waul. Waul comes with the standard library built-in, but you can
// disable it:

// | $ waul --no-std foo.waul                              # just use Caterwaul core

// You can compile multiple files at once using multiple arguments. If you do this, each will be compiled to its own .js file.

// Dependencies.
// This program depends on Caterwaul, which is baked in minified here. It includes the 'ui' library even though Waul itself doesn't use it. The reason is that Waul scripts are allowed to, so Waul
// needs to be prepared to precompile things that depend on it.





caterwaul('js_all')(function ($) {
  options.input_files.length ? options.input_files *!waul -seq : waul_repl(),

  where [fs                         = require('fs'),
         options                    = {extensions: [], input_files: [], output_pattern: '$1$2.js', configuration: '', use_std: true, expression_ref_table: true}
                                      -se [it.input_files = []]
                                      -se- process.argv.slice(2) *![x === '--extension' || x === '-e' ? it.extensions /~push/ xs[++xi]  :
                                                                    x === '--output'    || x === '-o' ? it.output_pattern = xs[++xi]    :
                                                                    x === '--no-table'  || x === '-T' ? it.expression_ref_table = false :
                                                                    x === '--configure' || x === '-c' ? it.configuration = xs[++xi]     :
                                                                    x === '--no-std'    || x === '-n' ? it.use_std = false              : it.input_files /~push/ x] /seq,

         caterwaul_template         = '(function () {_caterwaul_init; caterwaul._environment = {caterwaul: caterwaul}; _extensions; return caterwaul.deglobalize()})'.qs,

         waul_input(filename)       = fs.readFileSync(filename, 'utf8') -re [/\.sdoc$/i.test(filename) ? it.split(/(?:\n\s*)+\n/) %![/^\s*[A-Z|]/.test(x)] -seq -re- it.join('\n') : it],
         extension_tree(filename)   = new $.opaque_tree(filename /!waul_input),

         build_caterwaul            = caterwaul_template.replace({_caterwaul_init: $ /~replicator/ {core_only: !options.use_std},
                                                                  _extensions:     new $.syntax(';', options.extensions *extension_tree -seq)}) /!$.compile,

         immediate_pattern          = 'caterwaul(_transform)(_function)();'.qs,

         module_pattern             = 'caterwaul.module(_name, _transform, _function);'.qs,
         module_pattern_explicit    = 'caterwaul.module(_name, caterwaul(_transform)(_function));'.qs,
         module_pattern_identity    = 'caterwaul.module(_name, function (_formal) {_body});'.qs,
         module_template            = 'caterwaul.module(_name, _compiled);'.qs,

         output_for(filename)       = filename.replace(/^((?:.*\/)?)((?:(?!\.waul(?:\.sdoc)?)[^\/])+)(\.waul(?:\.sdoc)?)?/, options.output_pattern),
         waul_output(input_file, t) = fs.writeFileSync(input_file /!output_for, t.toString(), 'utf8'),

         waul(input_file)           = input_file /-waul_process/ $.parse(input_file /!waul_input),
         waul_process(file, tree)   = immediate_pattern       /~match/ tree                                            -re [it ? waul_run(it)             :
                                      module_pattern          /~match/ tree -or- module_pattern_explicit /~match/ tree -re [it ? waul_transform(file, it) :
                                      module_pattern_identity /~match/ tree                                            -re [it ? waul_identity(file, it)  :
                                        raise [new Error('waul: unrecognized toplevel construct in #{file}')]]]],

         waul_repl()                = require('repl').start('waul> ', undefined, evaluator)
                              -where [evaluator(s, _1, _2, cc) = cc(null, instance(s, {$: caterwaul, caterwaul: caterwaul, require: require})) -rescue- cc(e, undefined),
                                      caterwaul                = build_caterwaul(),
                                      instance                 = caterwaul(options.configuration)],

         waul_identity(file, m)     = file /-waul_output/ m._,
         waul_transform(file, m)    = file /-waul_output/ module_template.replace({_name: m._name, _compiled: transformed_function})
                              -where [caterwaul            = build_caterwaul(),
                                      transformed_function = caterwaul(m._transform.as_escaped_string())(m._function) / null /-caterwaul.late_bound_tree/ options],

         waul_run(m)                = caterwaul(m._transform.as_escaped_string())(m._function) /-caterwaul.compile/ {require: require, caterwaul: caterwaul} -re- it()
                              -where [caterwaul = build_caterwaul()]]}, {require: require})(caterwaul);

// Generated by SDoc 
