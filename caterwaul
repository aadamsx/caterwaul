#!/usr/bin/perl
# 99aeabc9ec7fe80b1b39f5e53dc7e49e      <- self-modifying Perl magic

# This is a self-modifying Perl file. I'm sorry you're viewing the source (it's
# really gnarly). If you're curious what it's made of, I recommend reading
# http://github.com/spencertipping/writing-self-modifying-perl.
#
# If you got one of these from someone and don't know what to do with it, send
# it to spencer@spencertipping.com and I'll see if I can figure out what it
# does.

# For the benefit of HTML viewers (this is hack):
# <div id='cover' style='position: absolute; z-index: 1; left: 0; top: 0; width: 10000px; height: 10000px; background: #111; font-family: sans-serif; color: #888; padding-left: 100px; padding-top: 100px'><span style='color: #fa4'>[</span> <span class='status'>loading</span> <span style='color: #fa4'>]</span></div><div style='display:none'><div>

$|++;

my %data;
my %transient;
my %externalized_functions;
my %datatypes;

my %locations;          # Maps eval-numbers to attribute names

my $global_data = join '', <DATA>;

sub meta::define_form {
  my ($namespace, $delegate) = @_;
  $datatypes{$namespace} = $delegate;
  *{"meta::${namespace}::implementation"} = $delegate;
  *{"meta::$namespace"} = sub {
    my ($name, $value, %options) = @_;
    chomp $value;
    $data{"${namespace}::$name"} = $value unless $options{no_binding};
    &$delegate($name, $value) unless $options{no_delegate}}}

sub meta::eval_in {
  my ($what, $where) = @_;

  # Obtain next eval-number and alias it to the designated location
  @locations{eval('__FILE__') =~ /\(eval (\d+)\)/} = ($where);

  my $result = eval $what;
  $@ =~ s/\(eval \d+\)/$where/ if $@;
  warn $@ if $@;
  $result}

meta::define_form 'meta', sub {
  my ($name, $value) = @_;
  meta::eval_in($value, "meta::$name")};

meta::meta('configure', <<'__');
# A function to configure transients. Transients can be used to store any number of
# different things, but one of the more common usages is type descriptors.

sub meta::configure {
  my ($datatype, %options) = @_;
  $transient{$_}{$datatype} = $options{$_} for keys %options;
}
__
meta::meta('externalize', <<'__');
# Function externalization. Data types should call this method when defining a function
# that has an external interface.

sub meta::externalize {
  my ($name, $attribute, $implementation) = @_;
  my $escaped = $name;
  $escaped =~ s/[^A-Za-z0-9:]/_/go;
  $externalized_functions{$name} = $externalized_functions{$escaped} = $attribute;
  *{"::$name"} = *{"::$escaped"} = $implementation || $attribute;
}

__
meta::meta('functor::editable', <<'__');
# An editable type. This creates a type whose default action is to open an editor
# on whichever value is mentioned. This can be changed using different flags.

sub meta::functor::editable {
  my ($typename, %options) = @_;

  meta::configure $typename, %options;
  meta::define_form $typename, sub {
    my ($name, $value) = @_;

    $options{on_bind} && &{$options{on_bind}}($name, $value);

    meta::externalize $options{prefix} . $name, "${typename}::$name", sub {
      my $attribute             = "${typename}::$name";
      my ($command, @new_value) = @_;

      return &{$options{default}}(retrieve($attribute)) if ref $options{default} eq 'CODE' and not defined $command;
      return edit($attribute) if $command eq 'edit' or $options{default} eq 'edit' and not defined $command;
      return associate($attribute, @new_value ? join(' ', @new_value) : join('', <STDIN>)) if $command eq '=' or $command eq 'import' or $options{default} eq 'import' and not defined $command;
      return retrieve($attribute)}}}
__
meta::meta('functor::html-templates', <<'__');
my @html_elements = qw/html head title meta script style link body div/;    # Very incomplete list

for my $e (@html_elements) {
  meta::externalize "template::$e", "template::$e", sub {
    my ($line, $block) = @_;
    "<$e $line>\n$block\n</$e>";
  };
}

__
meta::meta('type::alias', <<'__');
meta::configure 'alias', inherit => 0;
meta::define_form 'alias', sub {
  my ($name, $value) = @_;
  meta::externalize $name, "alias::$name", sub {
    # Can't pre-tokenize because shell::tokenize doesn't exist until the library::
    # namespace has been evaluated (which will be after alias::).
    shell::run(shell::tokenize($value), shell::tokenize(@_));
  };
};
__
meta::meta('type::bootstrap', <<'__');
# Bootstrap attributes don't get executed. The reason for this is that because
# they are serialized directly into the header of the file (and later duplicated
# as regular data attributes), they will have already been executed when the
# file is loaded.

meta::configure 'bootstrap', extension => '.pl', inherit => 1;
meta::define_form 'bootstrap', sub {};
__
meta::meta('type::cache', <<'__');
meta::configure 'cache', inherit => 0;
meta::define_form 'cache', \&meta::bootstrap::implementation;
__
meta::meta('type::cached_dependency', <<'__');
meta::configure 'cached_dependency', inherit => 0, extension => '';
meta::define_form 'cached_dependency', \&meta::bootstrap::implementation;
__
meta::meta('type::configuration', <<'__');
meta::functor::editable 'configuration', inherit => 0, extension => '.conf', default => sub {
  # Any lines starting with #, with or without leading whitespace, are treated as comments.
  # Comments are not parsed in option text; that is, you could specify an option that contained
  # a # and the # and following text would be considered part of that option.
  my ($data) = @_;
  my @options = grep /:\h+/o && ! /^\h*#/o && ! /^\h*$/o, split(/\v+/o, $data);
  s/^\h+//o for @options;
  my @key_values = map split(/\h*:\h+/o, $_, 2), @options;
  $key_values[$_ << 1] and $key_values[$_ << 1] =~ s/\s/_/go for 0 .. @key_values >> 1;
  $key_values[$_ << 1] and $key_values[$_ << 1] = lc $key_values[$_ << 1] for 0 .. @key_values >> 1;
  @key_values;
};

__
meta::meta('type::data', 'meta::functor::editable \'data\', extension => \'\', inherit => 0, default => \'cat\';');
meta::meta('type::function', <<'__');
meta::configure 'function', extension => '.pl', inherit => 1;
meta::define_form 'function', sub {
  my ($name, $value) = @_;
  meta::externalize $name, "function::$name", meta::eval_in("sub {\n$value\n}", "function::$name");
};
__
meta::meta('type::hook', <<'__');
meta::configure 'hook', extension => '.pl', inherit => 0;
meta::define_form 'hook', sub {
  my ($name, $value) = @_;
  *{"hook::$name"} = meta::eval_in("sub {\n$value\n}", "hook::$name");
};
__
meta::meta('type::inc', <<'__');
meta::configure 'inc', inherit => 1, extension => '.pl';
meta::define_form 'inc', sub {
  use File::Path 'mkpath';
  use File::Basename qw/basename dirname/;

  my ($name, $value) = @_;
  my $tmpdir   = basename($0) . '-' . $$;
  my $filename = "/tmp/$tmpdir/$name";

  push @INC, "/tmp/$tmpdir" unless grep /^\/tmp\/$tmpdir$/, @INC;

  mkpath(dirname($filename));
  unless (-e $filename) {
    open my $fh, '>', $filename;
    print $fh $value;
    close $fh;
  }
};
__
meta::meta('type::indicator', <<'__');
# Shell indicator function. The output of each of these is automatically
# appended to the shell prompt.

meta::configure 'indicator', inherit => 1, extension => '.pl';
meta::define_form 'indicator', sub {
  my ($name, $value) = @_;
  *{"indicator::$name"} = meta::eval_in("sub {\n$value\n}", "indicator::$name");
};
__
meta::meta('type::internal_function', <<'__');
meta::configure 'internal_function', extension => '.pl', inherit => 1;
meta::define_form 'internal_function', sub {
  my ($name, $value) = @_;
  *{$name} = meta::eval_in("sub {\n$value\n}", "internal_function::$name");
};
__
meta::meta('type::js', 'meta::functor::editable \'js\', extension => \'.js\', inherit => 1;');
meta::meta('type::library', <<'__');
meta::configure 'library', extension => '.pl', inherit => 1;
meta::define_form 'library', sub {
  my ($name, $value) = @_;
  meta::eval_in($value, "library::$name");
};
__
meta::meta('type::message_color', <<'__');
meta::configure 'message_color', extension => '', inherit => 1;
meta::define_form 'message_color', sub {
  my ($name, $value) = @_;
  terminal::color($name, $value);
};
__
meta::meta('type::meta', <<'__');
# This doesn't define a new type. It customizes the existing 'meta' type
# defined in bootstrap::initialization. Note that horrible things will
# happen if you redefine it using the editable functor.

meta::configure 'meta', extension => '.pl', inherit => 1;
__
meta::meta('type::note', 'meta::functor::editable \'note\', extension => \'.sdoc\', inherit => 0, default => \'edit\';');
meta::meta('type::parent', <<'__');
meta::define_form 'parent', \&meta::bootstrap::implementation;
meta::configure 'parent', extension => '', inherit => 1;
__
meta::meta('type::retriever', <<'__');
meta::configure 'retriever', extension => '.pl', inherit => 1;
meta::define_form 'retriever', sub {
  my ($name, $value) = @_;
  $transient{retrievers}{$name} = meta::eval_in("sub {\n$value\n}", "retriever::$name");
};
__
meta::meta('type::sdoc', <<'__');
# A meta-type for other types. So retrieve('js::main') will work if you have
# the attribute 'sdoc::js::main'. The filename will be main.js.sdoc.

meta::functor::editable 'sdoc', inherit => 1, extension => sub {
  extension_for(attribute($_[0])) . '.sdoc';
};
__
meta::meta('type::slibrary', <<'__');
meta::configure 'slibrary', extension => '.pl.sdoc', inherit => 1;
meta::define_form 'slibrary', sub {
  my ($name, $value) = @_;
  meta::eval_in(sdoc("slibrary::$name"), "slibrary::$name");
};

__
meta::meta('type::state', <<'__');
# Allows temporary or long-term storage of states. Nothing particularly insightful
# is done about compression, so storing alternative states will cause a large
# increase in size. Also, states don't contain other states -- otherwise the size
# increase would be exponential.

# States are created with the save-state function.

meta::configure 'state', inherit => 0, extension => '.pl';
meta::define_form 'state', \&meta::bootstrap::implementation;
__
meta::meta('type::template', <<'__');
meta::configure 'template', extension => '.pl', inherit => 1;
meta::define_form 'template', sub {
  my ($name, $value) = @_;
  meta::externalize "template::$name", "template::$name", meta::eval_in("sub {\n$value\n}", "template::$name");
};
__
meta::meta('type::todo', <<'__');
# Todo lists are special cases of SDoc syntax.
meta::configure 'todo', inherit => 0, extension => '.sdoc';
meta::define_form 'todo', sub {
  my ($name, $value) = @_;
  meta::externalize $name, "todo::$name", sub {
    return edit("todo::$name") if ! @_ || $_[0] eq 'edit';
    &{'todo-summary'}("todo::$name") if $_[0] eq 'show'}};

__
meta::meta('type::vim_highlighter', <<'__');
meta::configure 'vim_highlighter', extension => '.vim', inherit => 1;
meta::define_form 'vim_highlighter', \&meta::bootstrap::implementation;

__
meta::meta('type::watch', 'meta::functor::editable \'watch\', prefix => \'watch::\', inherit => 1, extension => \'.pl\', default => \'cat\';');
meta::meta('type::waul', <<'__');
meta::functor::editable 'waul', inherit => 1, extension => '.waul', default => 'edit';

__
meta::alias('cloc', 'loc js::core/caterwaul\\.');
meta::alias('eR', 'edit sdoc::readme');
meta::alias('ec', 'edit sdoc::js::caterwaul');
meta::alias('eh', 'edit data::bootstrap.html.sdoc');
meta::alias('er', 'edit function::render');
meta::alias('es', 'edit sdoc::data::style.css');
meta::alias('ev', 'edit vim_highlighter::caterwaul');
meta::alias('ew', 'edit sdoc::waul::waul');
meta::alias('ewb', 'edit sdoc::js::waul-bootstrap');
meta::alias('lsc', 'ls -a sdoc::js::core/');
meta::alias('lse', 'ls -a sdoc::js::extensions/');
meta::alias('lst', 'ls -a sdoc::js::.*test/.*');
meta::alias('me', 'macroexpand');
meta::alias('meopt', 'macroexpander-optimization');
meta::alias('rloc', 'loc js::(?!.*test|.*format|unit|minify|macroexpand|precompile|modules|core/debug)');
meta::bootstrap('html', <<'__');
<html >
<head >
<link rel='stylesheet' href='http://fonts.googleapis.com/css?family=Droid+Sans+Mono&subset=latin'>

</link>
<link rel='stylesheet' href='http://fonts.googleapis.com/css?family=Neuton&subset=latin'>

</link>

<script>
/*!
 * jQuery JavaScript Library v1.5.2
 * http://jquery.com/
 *
 * Copyright 2011, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 * Copyright 2011, The Dojo Foundation
 * Released under the MIT, BSD, and GPL Licenses.
 *
 * Date: Thu Mar 31 15:28:23 2011 -0400
 */
(function(a,b){function ci(a){return d.isWindow(a)?a:a.nodeType===9?a.defaultView||a.parentWindow:!1}function cf(a){if(!b_[a]){var b=d("<"+a+">").appendTo("body"),c=b.css("display");b.remove();if(c==="none"||c==="")c="block";b_[a]=c}return b_[a]}function ce(a,b){var c={};d.each(cd.concat.apply([],cd.slice(0,b)),function(){c[this]=a});return c}function b$(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}function bZ(){try{return new a.XMLHttpRequest}catch(b){}}function bY(){d(a).unload(function(){for(var a in bW)bW[a](0,1)})}function bS(a,c){a.dataFilter&&(c=a.dataFilter(c,a.dataType));var e=a.dataTypes,f={},g,h,i=e.length,j,k=e[0],l,m,n,o,p;for(g=1;g<i;g++){if(g===1)for(h in a.converters)typeof h==="string"&&(f[h.toLowerCase()]=a.converters[h]);l=k,k=e[g];if(k==="*")k=l;else if(l!=="*"&&l!==k){m=l+" "+k,n=f[m]||f["* "+k];if(!n){p=b;for(o in f){j=o.split(" ");if(j[0]===l||j[0]==="*"){p=f[j[1]+" "+k];if(p){o=f[o],o===!0?n=p:p===!0&&(n=o);break}}}}!n&&!p&&d.error("No conversion from "+m.replace(" "," to ")),n!==!0&&(c=n?n(c):p(o(c)))}}return c}function bR(a,c,d){var e=a.contents,f=a.dataTypes,g=a.responseFields,h,i,j,k;for(i in g)i in d&&(c[g[i]]=d[i]);while(f[0]==="*")f.shift(),h===b&&(h=a.mimeType||c.getResponseHeader("content-type"));if(h)for(i in e)if(e[i]&&e[i].test(h)){f.unshift(i);break}if(f[0]in d)j=f[0];else{for(i in d){if(!f[0]||a.converters[i+" "+f[0]]){j=i;break}k||(k=i)}j=j||k}if(j){j!==f[0]&&f.unshift(j);return d[j]}}function bQ(a,b,c,e){if(d.isArray(b)&&b.length)d.each(b,function(b,f){c||bs.test(a)?e(a,f):bQ(a+"["+(typeof f==="object"||d.isArray(f)?b:"")+"]",f,c,e)});else if(c||b==null||typeof b!=="object")e(a,b);else if(d.isArray(b)||d.isEmptyObject(b))e(a,"");else for(var f in b)bQ(a+"["+f+"]",b[f],c,e)}function bP(a,c,d,e,f,g){f=f||c.dataTypes[0],g=g||{},g[f]=!0;var h=a[f],i=0,j=h?h.length:0,k=a===bJ,l;for(;i<j&&(k||!l);i++)l=h[i](c,d,e),typeof l==="string"&&(!k||g[l]?l=b:(c.dataTypes.unshift(l),l=bP(a,c,d,e,l,g)));(k||!l)&&!g["*"]&&(l=bP(a,c,d,e,"*",g));return l}function bO(a){return function(b,c){typeof b!=="string"&&(c=b,b="*");if(d.isFunction(c)){var e=b.toLowerCase().split(bD),f=0,g=e.length,h,i,j;for(;f<g;f++)h=e[f],j=/^\+/.test(h),j&&(h=h.substr(1)||"*"),i=a[h]=a[h]||[],i[j?"unshift":"push"](c)}}}function bq(a,b,c){var e=b==="width"?bk:bl,f=b==="width"?a.offsetWidth:a.offsetHeight;if(c==="border")return f;d.each(e,function(){c||(f-=parseFloat(d.css(a,"padding"+this))||0),c==="margin"?f+=parseFloat(d.css(a,"margin"+this))||0:f-=parseFloat(d.css(a,"border"+this+"Width"))||0});return f}function bc(a,b){b.src?d.ajax({url:b.src,async:!1,dataType:"script"}):d.globalEval(b.text||b.textContent||b.innerHTML||""),b.parentNode&&b.parentNode.removeChild(b)}function bb(a){return"getElementsByTagName"in a?a.getElementsByTagName("*"):"querySelectorAll"in a?a.querySelectorAll("*"):[]}function ba(a,b){if(b.nodeType===1){var c=b.nodeName.toLowerCase();b.clearAttributes(),b.mergeAttributes(a);if(c==="object")b.outerHTML=a.outerHTML;else if(c!=="input"||a.type!=="checkbox"&&a.type!=="radio"){if(c==="option")b.selected=a.defaultSelected;else if(c==="input"||c==="textarea")b.defaultValue=a.defaultValue}else a.checked&&(b.defaultChecked=b.checked=a.checked),b.value!==a.value&&(b.value=a.value);b.removeAttribute(d.expando)}}function _(a,b){if(b.nodeType===1&&d.hasData(a)){var c=d.expando,e=d.data(a),f=d.data(b,e);if(e=e[c]){var g=e.events;f=f[c]=d.extend({},e);if(g){delete f.handle,f.events={};for(var h in g)for(var i=0,j=g[h].length;i<j;i++)d.event.add(b,h+(g[h][i].namespace?".":"")+g[h][i].namespace,g[h][i],g[h][i].data)}}}}function $(a,b){return d.nodeName(a,"table")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function Q(a,b,c){if(d.isFunction(b))return d.grep(a,function(a,d){var e=!!b.call(a,d,a);return e===c});if(b.nodeType)return d.grep(a,function(a,d){return a===b===c});if(typeof b==="string"){var e=d.grep(a,function(a){return a.nodeType===1});if(L.test(b))return d.filter(b,e,!c);b=d.filter(b,e)}return d.grep(a,function(a,e){return d.inArray(a,b)>=0===c})}function P(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function H(a,b){return(a&&a!=="*"?a+".":"")+b.replace(t,"`").replace(u,"&")}function G(a){var b,c,e,f,g,h,i,j,k,l,m,n,o,p=[],q=[],s=d._data(this,"events");if(a.liveFired!==this&&s&&s.live&&!a.target.disabled&&(!a.button||a.type!=="click")){a.namespace&&(n=new RegExp("(^|\\.)"+a.namespace.split(".").join("\\.(?:.*\\.)?")+"(\\.|$)")),a.liveFired=this;var t=s.live.slice(0);for(i=0;i<t.length;i++)g=t[i],g.origType.replace(r,"")===a.type?q.push(g.selector):t.splice(i--,1);f=d(a.target).closest(q,a.currentTarget);for(j=0,k=f.length;j<k;j++){m=f[j];for(i=0;i<t.length;i++){g=t[i];if(m.selector===g.selector&&(!n||n.test(g.namespace))&&!m.elem.disabled){h=m.elem,e=null;if(g.preType==="mouseenter"||g.preType==="mouseleave")a.type=g.preType,e=d(a.relatedTarget).closest(g.selector)[0];(!e||e!==h)&&p.push({elem:h,handleObj:g,level:m.level})}}}for(j=0,k=p.length;j<k;j++){f=p[j];if(c&&f.level>c)break;a.currentTarget=f.elem,a.data=f.handleObj.data,a.handleObj=f.handleObj,o=f.handleObj.origHandler.apply(f.elem,arguments);if(o===!1||a.isPropagationStopped()){c=f.level,o===!1&&(b=!1);if(a.isImmediatePropagationStopped())break}}return b}}function E(a,c,e){var f=d.extend({},e[0]);f.type=a,f.originalEvent={},f.liveFired=b,d.event.handle.call(c,f),f.isDefaultPrevented()&&e[0].preventDefault()}function y(){return!0}function x(){return!1}function i(a){for(var b in a)if(b!=="toJSON")return!1;return!0}function h(a,c,e){if(e===b&&a.nodeType===1){e=a.getAttribute("data-"+c);if(typeof e==="string"){try{e=e==="true"?!0:e==="false"?!1:e==="null"?null:d.isNaN(e)?g.test(e)?d.parseJSON(e):e:parseFloat(e)}catch(f){}d.data(a,c,e)}else e=b}return e}var c=a.document,d=function(){function G(){if(!d.isReady){try{c.documentElement.doScroll("left")}catch(a){setTimeout(G,1);return}d.ready()}}var d=function(a,b){return new d.fn.init(a,b,g)},e=a.jQuery,f=a.$,g,h=/^(?:[^<]*(<[\w\W]+>)[^>]*$|#([\w\-]+)$)/,i=/\S/,j=/^\s+/,k=/\s+$/,l=/\d/,m=/^<(\w+)\s*\/?>(?:<\/\1>)?$/,n=/^[\],:{}\s]*$/,o=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,p=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,q=/(?:^|:|,)(?:\s*\[)+/g,r=/(webkit)[ \/]([\w.]+)/,s=/(opera)(?:.*version)?[ \/]([\w.]+)/,t=/(msie) ([\w.]+)/,u=/(mozilla)(?:.*? rv:([\w.]+))?/,v=navigator.userAgent,w,x,y,z=Object.prototype.toString,A=Object.prototype.hasOwnProperty,B=Array.prototype.push,C=Array.prototype.slice,D=String.prototype.trim,E=Array.prototype.indexOf,F={};d.fn=d.prototype={constructor:d,init:function(a,e,f){var g,i,j,k;if(!a)return this;if(a.nodeType){this.context=this[0]=a,this.length=1;return this}if(a==="body"&&!e&&c.body){this.context=c,this[0]=c.body,this.selector="body",this.length=1;return this}if(typeof a==="string"){g=h.exec(a);if(!g||!g[1]&&e)return!e||e.jquery?(e||f).find(a):this.constructor(e).find(a);if(g[1]){e=e instanceof d?e[0]:e,k=e?e.ownerDocument||e:c,j=m.exec(a),j?d.isPlainObject(e)?(a=[c.createElement(j[1])],d.fn.attr.call(a,e,!0)):a=[k.createElement(j[1])]:(j=d.buildFragment([g[1]],[k]),a=(j.cacheable?d.clone(j.fragment):j.fragment).childNodes);return d.merge(this,a)}i=c.getElementById(g[2]);if(i&&i.parentNode){if(i.id!==g[2])return f.find(a);this.length=1,this[0]=i}this.context=c,this.selector=a;return this}if(d.isFunction(a))return f.ready(a);a.selector!==b&&(this.selector=a.selector,this.context=a.context);return d.makeArray(a,this)},selector:"",jquery:"1.5.2",length:0,size:function(){return this.length},toArray:function(){return C.call(this,0)},get:function(a){return a==null?this.toArray():a<0?this[this.length+a]:this[a]},pushStack:function(a,b,c){var e=this.constructor();d.isArray(a)?B.apply(e,a):d.merge(e,a),e.prevObject=this,e.context=this.context,b==="find"?e.selector=this.selector+(this.selector?" ":"")+c:b&&(e.selector=this.selector+"."+b+"("+c+")");return e},each:function(a,b){return d.each(this,a,b)},ready:function(a){d.bindReady(),x.done(a);return this},eq:function(a){return a===-1?this.slice(a):this.slice(a,+a+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(C.apply(this,arguments),"slice",C.call(arguments).join(","))},map:function(a){return this.pushStack(d.map(this,function(b,c){return a.call(b,c,b)}))},end:function(){return this.prevObject||this.constructor(null)},push:B,sort:[].sort,splice:[].splice},d.fn.init.prototype=d.fn,d.extend=d.fn.extend=function(){var a,c,e,f,g,h,i=arguments[0]||{},j=1,k=arguments.length,l=!1;typeof i==="boolean"&&(l=i,i=arguments[1]||{},j=2),typeof i!=="object"&&!d.isFunction(i)&&(i={}),k===j&&(i=this,--j);for(;j<k;j++)if((a=arguments[j])!=null)for(c in a){e=i[c],f=a[c];if(i===f)continue;l&&f&&(d.isPlainObject(f)||(g=d.isArray(f)))?(g?(g=!1,h=e&&d.isArray(e)?e:[]):h=e&&d.isPlainObject(e)?e:{},i[c]=d.extend(l,h,f)):f!==b&&(i[c]=f)}return i},d.extend({noConflict:function(b){a.$=f,b&&(a.jQuery=e);return d},isReady:!1,readyWait:1,ready:function(a){a===!0&&d.readyWait--;if(!d.readyWait||a!==!0&&!d.isReady){if(!c.body)return setTimeout(d.ready,1);d.isReady=!0;if(a!==!0&&--d.readyWait>0)return;x.resolveWith(c,[d]),d.fn.trigger&&d(c).trigger("ready").unbind("ready")}},bindReady:function(){if(!x){x=d._Deferred();if(c.readyState==="complete")return setTimeout(d.ready,1);if(c.addEventListener)c.addEventListener("DOMContentLoaded",y,!1),a.addEventListener("load",d.ready,!1);else if(c.attachEvent){c.attachEvent("onreadystatechange",y),a.attachEvent("onload",d.ready);var b=!1;try{b=a.frameElement==null}catch(e){}c.documentElement.doScroll&&b&&G()}}},isFunction:function(a){return d.type(a)==="function"},isArray:Array.isArray||function(a){return d.type(a)==="array"},isWindow:function(a){return a&&typeof a==="object"&&"setInterval"in a},isNaN:function(a){return a==null||!l.test(a)||isNaN(a)},type:function(a){return a==null?String(a):F[z.call(a)]||"object"},isPlainObject:function(a){if(!a||d.type(a)!=="object"||a.nodeType||d.isWindow(a))return!1;if(a.constructor&&!A.call(a,"constructor")&&!A.call(a.constructor.prototype,"isPrototypeOf"))return!1;var c;for(c in a){}return c===b||A.call(a,c)},isEmptyObject:function(a){for(var b in a)return!1;return!0},error:function(a){throw a},parseJSON:function(b){if(typeof b!=="string"||!b)return null;b=d.trim(b);if(n.test(b.replace(o,"@").replace(p,"]").replace(q,"")))return a.JSON&&a.JSON.parse?a.JSON.parse(b):(new Function("return "+b))();d.error("Invalid JSON: "+b)},parseXML:function(b,c,e){a.DOMParser?(e=new DOMParser,c=e.parseFromString(b,"text/xml")):(c=new ActiveXObject("Microsoft.XMLDOM"),c.async="false",c.loadXML(b)),e=c.documentElement,(!e||!e.nodeName||e.nodeName==="parsererror")&&d.error("Invalid XML: "+b);return c},noop:function(){},globalEval:function(a){if(a&&i.test(a)){var b=c.head||c.getElementsByTagName("head")[0]||c.documentElement,e=c.createElement("script");d.support.scriptEval()?e.appendChild(c.createTextNode(a)):e.text=a,b.insertBefore(e,b.firstChild),b.removeChild(e)}},nodeName:function(a,b){return a.nodeName&&a.nodeName.toUpperCase()===b.toUpperCase()},each:function(a,c,e){var f,g=0,h=a.length,i=h===b||d.isFunction(a);if(e){if(i){for(f in a)if(c.apply(a[f],e)===!1)break}else for(;g<h;)if(c.apply(a[g++],e)===!1)break}else if(i){for(f in a)if(c.call(a[f],f,a[f])===!1)break}else for(var j=a[0];g<h&&c.call(j,g,j)!==!1;j=a[++g]){}return a},trim:D?function(a){return a==null?"":D.call(a)}:function(a){return a==null?"":(a+"").replace(j,"").replace(k,"")},makeArray:function(a,b){var c=b||[];if(a!=null){var e=d.type(a);a.length==null||e==="string"||e==="function"||e==="regexp"||d.isWindow(a)?B.call(c,a):d.merge(c,a)}return c},inArray:function(a,b){if(b.indexOf)return b.indexOf(a);for(var c=0,d=b.length;c<d;c++)if(b[c]===a)return c;return-1},merge:function(a,c){var d=a.length,e=0;if(typeof c.length==="number")for(var f=c.length;e<f;e++)a[d++]=c[e];else while(c[e]!==b)a[d++]=c[e++];a.length=d;return a},grep:function(a,b,c){var d=[],e;c=!!c;for(var f=0,g=a.length;f<g;f++)e=!!b(a[f],f),c!==e&&d.push(a[f]);return d},map:function(a,b,c){var d=[],e;for(var f=0,g=a.length;f<g;f++)e=b(a[f],f,c),e!=null&&(d[d.length]=e);return d.concat.apply([],d)},guid:1,proxy:function(a,c,e){arguments.length===2&&(typeof c==="string"?(e=a,a=e[c],c=b):c&&!d.isFunction(c)&&(e=c,c=b)),!c&&a&&(c=function(){return a.apply(e||this,arguments)}),a&&(c.guid=a.guid=a.guid||c.guid||d.guid++);return c},access:function(a,c,e,f,g,h){var i=a.length;if(typeof c==="object"){for(var j in c)d.access(a,j,c[j],f,g,e);return a}if(e!==b){f=!h&&f&&d.isFunction(e);for(var k=0;k<i;k++)g(a[k],c,f?e.call(a[k],k,g(a[k],c)):e,h);return a}return i?g(a[0],c):b},now:function(){return(new Date).getTime()},uaMatch:function(a){a=a.toLowerCase();var b=r.exec(a)||s.exec(a)||t.exec(a)||a.indexOf("compatible")<0&&u.exec(a)||[];return{browser:b[1]||"",version:b[2]||"0"}},sub:function(){function a(b,c){return new a.fn.init(b,c)}d.extend(!0,a,this),a.superclass=this,a.fn=a.prototype=this(),a.fn.constructor=a,a.subclass=this.subclass,a.fn.init=function b(b,c){c&&c instanceof d&&!(c instanceof a)&&(c=a(c));return d.fn.init.call(this,b,c,e)},a.fn.init.prototype=a.fn;var e=a(c);return a},browser:{}}),d.each("Boolean Number String Function Array Date RegExp Object".split(" "),function(a,b){F["[object "+b+"]"]=b.toLowerCase()}),w=d.uaMatch(v),w.browser&&(d.browser[w.browser]=!0,d.browser.version=w.version),d.browser.webkit&&(d.browser.safari=!0),E&&(d.inArray=function(a,b){return E.call(b,a)}),i.test(" ")&&(j=/^[\s\xA0]+/,k=/[\s\xA0]+$/),g=d(c),c.addEventListener?y=function(){c.removeEventListener("DOMContentLoaded",y,!1),d.ready()}:c.attachEvent&&(y=function(){c.readyState==="complete"&&(c.detachEvent("onreadystatechange",y),d.ready())});return d}(),e="then done fail isResolved isRejected promise".split(" "),f=[].slice;d.extend({_Deferred:function(){var a=[],b,c,e,f={done:function(){if(!e){var c=arguments,g,h,i,j,k;b&&(k=b,b=0);for(g=0,h=c.length;g<h;g++)i=c[g],j=d.type(i),j==="array"?f.done.apply(f,i):j==="function"&&a.push(i);k&&f.resolveWith(k[0],k[1])}return this},resolveWith:function(d,f){if(!e&&!b&&!c){f=f||[],c=1;try{while(a[0])a.shift().apply(d,f)}finally{b=[d,f],c=0}}return this},resolve:function(){f.resolveWith(this,arguments);return this},isResolved:function(){return c||b},cancel:function(){e=1,a=[];return this}};return f},Deferred:function(a){var b=d._Deferred(),c=d._Deferred(),f;d.extend(b,{then:function(a,c){b.done(a).fail(c);return this},fail:c.done,rejectWith:c.resolveWith,reject:c.resolve,isRejected:c.isResolved,promise:function(a){if(a==null){if(f)return f;f=a={}}var c=e.length;while(c--)a[e[c]]=b[e[c]];return a}}),b.done(c.cancel).fail(b.cancel),delete b.cancel,a&&a.call(b,b);return b},when:function(a){function i(a){return function(c){b[a]=arguments.length>1?f.call(arguments,0):c,--g||h.resolveWith(h,f.call(b,0))}}var b=arguments,c=0,e=b.length,g=e,h=e<=1&&a&&d.isFunction(a.promise)?a:d.Deferred();if(e>1){for(;c<e;c++)b[c]&&d.isFunction(b[c].promise)?b[c].promise().then(i(c),h.reject):--g;g||h.resolveWith(h,b)}else h!==a&&h.resolveWith(h,e?[a]:[]);return h.promise()}}),function(){d.support={};var b=c.createElement("div");b.style.display="none",b.innerHTML="   <link/><table></table><a href='/a' style='color:red;float:left;opacity:.55;'>a</a><input type='checkbox'/>";var e=b.getElementsByTagName("*"),f=b.getElementsByTagName("a")[0],g=c.createElement("select"),h=g.appendChild(c.createElement("option")),i=b.getElementsByTagName("input")[0];if(e&&e.length&&f){d.support={leadingWhitespace:b.firstChild.nodeType===3,tbody:!b.getElementsByTagName("tbody").length,htmlSerialize:!!b.getElementsByTagName("link").length,style:/red/.test(f.getAttribute("style")),hrefNormalized:f.getAttribute("href")==="/a",opacity:/^0.55$/.test(f.style.opacity),cssFloat:!!f.style.cssFloat,checkOn:i.value==="on",optSelected:h.selected,deleteExpando:!0,optDisabled:!1,checkClone:!1,noCloneEvent:!0,noCloneChecked:!0,boxModel:null,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableHiddenOffsets:!0,reliableMarginRight:!0},i.checked=!0,d.support.noCloneChecked=i.cloneNode(!0).checked,g.disabled=!0,d.support.optDisabled=!h.disabled;var j=null;d.support.scriptEval=function(){if(j===null){var b=c.documentElement,e=c.createElement("script"),f="script"+d.now();try{e.appendChild(c.createTextNode("window."+f+"=1;"))}catch(g){}b.insertBefore(e,b.firstChild),a[f]?(j=!0,delete a[f]):j=!1,b.removeChild(e)}return j};try{delete b.test}catch(k){d.support.deleteExpando=!1}!b.addEventListener&&b.attachEvent&&b.fireEvent&&(b.attachEvent("onclick",function l(){d.support.noCloneEvent=!1,b.detachEvent("onclick",l)}),b.cloneNode(!0).fireEvent("onclick")),b=c.createElement("div"),b.innerHTML="<input type='radio' name='radiotest' checked='checked'/>";var m=c.createDocumentFragment();m.appendChild(b.firstChild),d.support.checkClone=m.cloneNode(!0).cloneNode(!0).lastChild.checked,d(function(){var a=c.createElement("div"),b=c.getElementsByTagName("body")[0];if(b){a.style.width=a.style.paddingLeft="1px",b.appendChild(a),d.boxModel=d.support.boxModel=a.offsetWidth===2,"zoom"in a.style&&(a.style.display="inline",a.style.zoom=1,d.support.inlineBlockNeedsLayout=a.offsetWidth===2,a.style.display="",a.innerHTML="<div style='width:4px;'></div>",d.support.shrinkWrapBlocks=a.offsetWidth!==2),a.innerHTML="<table><tr><td style='padding:0;border:0;display:none'></td><td>t</td></tr></table>";var e=a.getElementsByTagName("td");d.support.reliableHiddenOffsets=e[0].offsetHeight===0,e[0].style.display="",e[1].style.display="none",d.support.reliableHiddenOffsets=d.support.reliableHiddenOffsets&&e[0].offsetHeight===0,a.innerHTML="",c.defaultView&&c.defaultView.getComputedStyle&&(a.style.width="1px",a.style.marginRight="0",d.support.reliableMarginRight=(parseInt(c.defaultView.getComputedStyle(a,null).marginRight,10)||0)===0),b.removeChild(a).style.display="none",a=e=null}});var n=function(a){var b=c.createElement("div");a="on"+a;if(!b.attachEvent)return!0;var d=a in b;d||(b.setAttribute(a,"return;"),d=typeof b[a]==="function");return d};d.support.submitBubbles=n("submit"),d.support.changeBubbles=n("change"),b=e=f=null}}();var g=/^(?:\{.*\}|\[.*\])$/;d.extend({cache:{},uuid:0,expando:"jQuery"+(d.fn.jquery+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(a){a=a.nodeType?d.cache[a[d.expando]]:a[d.expando];return!!a&&!i(a)},data:function(a,c,e,f){if(d.acceptData(a)){var g=d.expando,h=typeof c==="string",i,j=a.nodeType,k=j?d.cache:a,l=j?a[d.expando]:a[d.expando]&&d.expando;if((!l||f&&l&&!k[l][g])&&h&&e===b)return;l||(j?a[d.expando]=l=++d.uuid:l=d.expando),k[l]||(k[l]={},j||(k[l].toJSON=d.noop));if(typeof c==="object"||typeof c==="function")f?k[l][g]=d.extend(k[l][g],c):k[l]=d.extend(k[l],c);i=k[l],f&&(i[g]||(i[g]={}),i=i[g]),e!==b&&(i[c]=e);if(c==="events"&&!i[c])return i[g]&&i[g].events;return h?i[c]:i}},removeData:function(b,c,e){if(d.acceptData(b)){var f=d.expando,g=b.nodeType,h=g?d.cache:b,j=g?b[d.expando]:d.expando;if(!h[j])return;if(c){var k=e?h[j][f]:h[j];if(k){delete k[c];if(!i(k))return}}if(e){delete h[j][f];if(!i(h[j]))return}var l=h[j][f];d.support.deleteExpando||h!=a?delete h[j]:h[j]=null,l?(h[j]={},g||(h[j].toJSON=d.noop),h[j][f]=l):g&&(d.support.deleteExpando?delete b[d.expando]:b.removeAttribute?b.removeAttribute(d.expando):b[d.expando]=null)}},_data:function(a,b,c){return d.data(a,b,c,!0)},acceptData:function(a){if(a.nodeName){var b=d.noData[a.nodeName.toLowerCase()];if(b)return b!==!0&&a.getAttribute("classid")===b}return!0}}),d.fn.extend({data:function(a,c){var e=null;if(typeof a==="undefined"){if(this.length){e=d.data(this[0]);if(this[0].nodeType===1){var f=this[0].attributes,g;for(var i=0,j=f.length;i<j;i++)g=f[i].name,g.indexOf("data-")===0&&(g=g.substr(5),h(this[0],g,e[g]))}}return e}if(typeof a==="object")return this.each(function(){d.data(this,a)});var k=a.split(".");k[1]=k[1]?"."+k[1]:"";if(c===b){e=this.triggerHandler("getData"+k[1]+"!",[k[0]]),e===b&&this.length&&(e=d.data(this[0],a),e=h(this[0],a,e));return e===b&&k[1]?this.data(k[0]):e}return this.each(function(){var b=d(this),e=[k[0],c];b.triggerHandler("setData"+k[1]+"!",e),d.data(this,a,c),b.triggerHandler("changeData"+k[1]+"!",e)})},removeData:function(a){return this.each(function(){d.removeData(this,a)})}}),d.extend({queue:function(a,b,c){if(a){b=(b||"fx")+"queue";var e=d._data(a,b);if(!c)return e||[];!e||d.isArray(c)?e=d._data(a,b,d.makeArray(c)):e.push(c);return e}},dequeue:function(a,b){b=b||"fx";var c=d.queue(a,b),e=c.shift();e==="inprogress"&&(e=c.shift()),e&&(b==="fx"&&c.unshift("inprogress"),e.call(a,function(){d.dequeue(a,b)})),c.length||d.removeData(a,b+"queue",!0)}}),d.fn.extend({queue:function(a,c){typeof a!=="string"&&(c=a,a="fx");if(c===b)return d.queue(this[0],a);return this.each(function(b){var e=d.queue(this,a,c);a==="fx"&&e[0]!=="inprogress"&&d.dequeue(this,a)})},dequeue:function(a){return this.each(function(){d.dequeue(this,a)})},delay:function(a,b){a=d.fx?d.fx.speeds[a]||a:a,b=b||"fx";return this.queue(b,function(){var c=this;setTimeout(function(){d.dequeue(c,b)},a)})},clearQueue:function(a){return this.queue(a||"fx",[])}});var j=/[\n\t\r]/g,k=/\s+/,l=/\r/g,m=/^(?:href|src|style)$/,n=/^(?:button|input)$/i,o=/^(?:button|input|object|select|textarea)$/i,p=/^a(?:rea)?$/i,q=/^(?:radio|checkbox)$/i;d.props={"for":"htmlFor","class":"className",readonly:"readOnly",maxlength:"maxLength",cellspacing:"cellSpacing",rowspan:"rowSpan",colspan:"colSpan",tabindex:"tabIndex",usemap:"useMap",frameborder:"frameBorder"},d.fn.extend({attr:function(a,b){return d.access(this,a,b,!0,d.attr)},removeAttr:function(a,b){return this.each(function(){d.attr(this,a,""),this.nodeType===1&&this.removeAttribute(a)})},addClass:function(a){if(d.isFunction(a))return this.each(function(b){var c=d(this);c.addClass(a.call(this,b,c.attr("class")))});if(a&&typeof a==="string"){var b=(a||"").split(k);for(var c=0,e=this.length;c<e;c++){var f=this[c];if(f.nodeType===1)if(f.className){var g=" "+f.className+" ",h=f.className;for(var i=0,j=b.length;i<j;i++)g.indexOf(" "+b[i]+" ")<0&&(h+=" "+b[i]);f.className=d.trim(h)}else f.className=a}}return this},removeClass:function(a){if(d.isFunction(a))return this.each(function(b){var c=d(this);c.removeClass(a.call(this,b,c.attr("class")))});if(a&&typeof a==="string"||a===b){var c=(a||"").split(k);for(var e=0,f=this.length;e<f;e++){var g=this[e];if(g.nodeType===1&&g.className)if(a){var h=(" "+g.className+" ").replace(j," ");for(var i=0,l=c.length;i<l;i++)h=h.replace(" "+c[i]+" "," ");g.className=d.trim(h)}else g.className=""}}return this},toggleClass:function(a,b){var c=typeof a,e=typeof b==="boolean";if(d.isFunction(a))return this.each(function(c){var e=d(this);e.toggleClass(a.call(this,c,e.attr("class"),b),b)});return this.each(function(){if(c==="string"){var f,g=0,h=d(this),i=b,j=a.split(k);while(f=j[g++])i=e?i:!h.hasClass(f),h[i?"addClass":"removeClass"](f)}else if(c==="undefined"||c==="boolean")this.className&&d._data(this,"__className__",this.className),this.className=this.className||a===!1?"":d._data(this,"__className__")||""})},hasClass:function(a){var b=" "+a+" ";for(var c=0,d=this.length;c<d;c++)if((" "+this[c].className+" ").replace(j," ").indexOf(b)>-1)return!0;return!1},val:function(a){if(!arguments.length){var c=this[0];if(c){if(d.nodeName(c,"option")){var e=c.attributes.value;return!e||e.specified?c.value:c.text}if(d.nodeName(c,"select")){var f=c.selectedIndex,g=[],h=c.options,i=c.type==="select-one";if(f<0)return null;for(var j=i?f:0,k=i?f+1:h.length;j<k;j++){var m=h[j];if(m.selected&&(d.support.optDisabled?!m.disabled:m.getAttribute("disabled")===null)&&(!m.parentNode.disabled||!d.nodeName(m.parentNode,"optgroup"))){a=d(m).val();if(i)return a;g.push(a)}}if(i&&!g.length&&h.length)return d(h[f]).val();return g}if(q.test(c.type)&&!d.support.checkOn)return c.getAttribute("value")===null?"on":c.value;return(c.value||"").replace(l,"")}return b}var n=d.isFunction(a);return this.each(function(b){var c=d(this),e=a;if(this.nodeType===1){n&&(e=a.call(this,b,c.val())),e==null?e="":typeof e==="number"?e+="":d.isArray(e)&&(e=d.map(e,function(a){return a==null?"":a+""}));if(d.isArray(e)&&q.test(this.type))this.checked=d.inArray(c.val(),e)>=0;else if(d.nodeName(this,"select")){var f=d.makeArray(e);d("option",this).each(function(){this.selected=d.inArray(d(this).val(),f)>=0}),f.length||(this.selectedIndex=-1)}else this.value=e}})}}),d.extend({attrFn:{val:!0,css:!0,html:!0,text:!0,data:!0,width:!0,height:!0,offset:!0},attr:function(a,c,e,f){if(!a||a.nodeType===3||a.nodeType===8||a.nodeType===2)return b;if(f&&c in d.attrFn)return d(a)[c](e);var g=a.nodeType!==1||!d.isXMLDoc(a),h=e!==b;c=g&&d.props[c]||c;if(a.nodeType===1){var i=m.test(c);if(c==="selected"&&!d.support.optSelected){var j=a.parentNode;j&&(j.selectedIndex,j.parentNode&&j.parentNode.selectedIndex)}if((c in a||a[c]!==b)&&g&&!i){h&&(c==="type"&&n.test(a.nodeName)&&a.parentNode&&d.error("type property can't be changed"),e===null?a.nodeType===1&&a.removeAttribute(c):a[c]=e);if(d.nodeName(a,"form")&&a.getAttributeNode(c))return a.getAttributeNode(c).nodeValue;if(c==="tabIndex"){var k=a.getAttributeNode("tabIndex");return k&&k.specified?k.value:o.test(a.nodeName)||p.test(a.nodeName)&&a.href?0:b}return a[c]}if(!d.support.style&&g&&c==="style"){h&&(a.style.cssText=""+e);return a.style.cssText}h&&a.setAttribute(c,""+e);if(!a.attributes[c]&&(a.hasAttribute&&!a.hasAttribute(c)))return b;var l=!d.support.hrefNormalized&&g&&i?a.getAttribute(c,2):a.getAttribute(c);return l===null?b:l}h&&(a[c]=e);return a[c]}});var r=/\.(.*)$/,s=/^(?:textarea|input|select)$/i,t=/\./g,u=/ /g,v=/[^\w\s.|`]/g,w=function(a){return a.replace(v,"\\$&")};d.event={add:function(c,e,f,g){if(c.nodeType!==3&&c.nodeType!==8){try{d.isWindow(c)&&(c!==a&&!c.frameElement)&&(c=a)}catch(h){}if(f===!1)f=x;else if(!f)return;var i,j;f.handler&&(i=f,f=i.handler),f.guid||(f.guid=d.guid++);var k=d._data(c);if(!k)return;var l=k.events,m=k.handle;l||(k.events=l={}),m||(k.handle=m=function(a){return typeof d!=="undefined"&&d.event.triggered!==a.type?d.event.handle.apply(m.elem,arguments):b}),m.elem=c,e=e.split(" ");var n,o=0,p;while(n=e[o++]){j=i?d.extend({},i):{handler:f,data:g},n.indexOf(".")>-1?(p=n.split("."),n=p.shift(),j.namespace=p.slice(0).sort().join(".")):(p=[],j.namespace=""),j.type=n,j.guid||(j.guid=f.guid);var q=l[n],r=d.event.special[n]||{};if(!q){q=l[n]=[];if(!r.setup||r.setup.call(c,g,p,m)===!1)c.addEventListener?c.addEventListener(n,m,!1):c.attachEvent&&c.attachEvent("on"+n,m)}r.add&&(r.add.call(c,j),j.handler.guid||(j.handler.guid=f.guid)),q.push(j),d.event.global[n]=!0}c=null}},global:{},remove:function(a,c,e,f){if(a.nodeType!==3&&a.nodeType!==8){e===!1&&(e=x);var g,h,i,j,k=0,l,m,n,o,p,q,r,s=d.hasData(a)&&d._data(a),t=s&&s.events;if(!s||!t)return;c&&c.type&&(e=c.handler,c=c.type);if(!c||typeof c==="string"&&c.charAt(0)==="."){c=c||"";for(h in t)d.event.remove(a,h+c);return}c=c.split(" ");while(h=c[k++]){r=h,q=null,l=h.indexOf(".")<0,m=[],l||(m=h.split("."),h=m.shift(),n=new RegExp("(^|\\.)"+d.map(m.slice(0).sort(),w).join("\\.(?:.*\\.)?")+"(\\.|$)")),p=t[h];if(!p)continue;if(!e){for(j=0;j<p.length;j++){q=p[j];if(l||n.test(q.namespace))d.event.remove(a,r,q.handler,j),p.splice(j--,1)}continue}o=d.event.special[h]||{};for(j=f||0;j<p.length;j++){q=p[j];if(e.guid===q.guid){if(l||n.test(q.namespace))f==null&&p.splice(j--,1),o.remove&&o.remove.call(a,q);if(f!=null)break}}if(p.length===0||f!=null&&p.length===1)(!o.teardown||o.teardown.call(a,m)===!1)&&d.removeEvent(a,h,s.handle),g=null,delete t[h]}if(d.isEmptyObject(t)){var u=s.handle;u&&(u.elem=null),delete s.events,delete s.handle,d.isEmptyObject(s)&&d.removeData(a,b,!0)}}},trigger:function(a,c,e){var f=a.type||a,g=arguments[3];if(!g){a=typeof a==="object"?a[d.expando]?a:d.extend(d.Event(f),a):d.Event(f),f.indexOf("!")>=0&&(a.type=f=f.slice(0,-1),a.exclusive=!0),e||(a.stopPropagation(),d.event.global[f]&&d.each(d.cache,function(){var b=d.expando,e=this[b];e&&e.events&&e.events[f]&&d.event.trigger(a,c,e.handle.elem)}));if(!e||e.nodeType===3||e.nodeType===8)return b;a.result=b,a.target=e,c=d.makeArray(c),c.unshift(a)}a.currentTarget=e;var h=d._data(e,"handle");h&&h.apply(e,c);var i=e.parentNode||e.ownerDocument;try{e&&e.nodeName&&d.noData[e.nodeName.toLowerCase()]||e["on"+f]&&e["on"+f].apply(e,c)===!1&&(a.result=!1,a.preventDefault())}catch(j){}if(!a.isPropagationStopped()&&i)d.event.trigger(a,c,i,!0);else if(!a.isDefaultPrevented()){var k,l=a.target,m=f.replace(r,""),n=d.nodeName(l,"a")&&m==="click",o=d.event.special[m]||{};if((!o._default||o._default.call(e,a)===!1)&&!n&&!(l&&l.nodeName&&d.noData[l.nodeName.toLowerCase()])){try{l[m]&&(k=l["on"+m],k&&(l["on"+m]=null),d.event.triggered=a.type,l[m]())}catch(p){}k&&(l["on"+m]=k),d.event.triggered=b}}},handle:function(c){var e,f,g,h,i,j=[],k=d.makeArray(arguments);c=k[0]=d.event.fix(c||a.event),c.currentTarget=this,e=c.type.indexOf(".")<0&&!c.exclusive,e||(g=c.type.split("."),c.type=g.shift(),j=g.slice(0).sort(),h=new RegExp("(^|\\.)"+j.join("\\.(?:.*\\.)?")+"(\\.|$)")),c.namespace=c.namespace||j.join("."),i=d._data(this,"events"),f=(i||{})[c.type];if(i&&f){f=f.slice(0);for(var l=0,m=f.length;l<m;l++){var n=f[l];if(e||h.test(n.namespace)){c.handler=n.handler,c.data=n.data,c.handleObj=n;var o=n.handler.apply(this,k);o!==b&&(c.result=o,o===!1&&(c.preventDefault(),c.stopPropagation()));if(c.isImmediatePropagationStopped())break}}}return c.result},props:"altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode layerX layerY metaKey newValue offsetX offsetY pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta which".split(" "),fix:function(a){if(a[d.expando])return a;var e=a;a=d.Event(e);for(var f=this.props.length,g;f;)g=this.props[--f],a[g]=e[g];a.target||(a.target=a.srcElement||c),a.target.nodeType===3&&(a.target=a.target.parentNode),!a.relatedTarget&&a.fromElement&&(a.relatedTarget=a.fromElement===a.target?a.toElement:a.fromElement);if(a.pageX==null&&a.clientX!=null){var h=c.documentElement,i=c.body;a.pageX=a.clientX+(h&&h.scrollLeft||i&&i.scrollLeft||0)-(h&&h.clientLeft||i&&i.clientLeft||0),a.pageY=a.clientY+(h&&h.scrollTop||i&&i.scrollTop||0)-(h&&h.clientTop||i&&i.clientTop||0)}a.which==null&&(a.charCode!=null||a.keyCode!=null)&&(a.which=a.charCode!=null?a.charCode:a.keyCode),!a.metaKey&&a.ctrlKey&&(a.metaKey=a.ctrlKey),!a.which&&a.button!==b&&(a.which=a.button&1?1:a.button&2?3:a.button&4?2:0);return a},guid:1e8,proxy:d.proxy,special:{ready:{setup:d.bindReady,teardown:d.noop},live:{add:function(a){d.event.add(this,H(a.origType,a.selector),d.extend({},a,{handler:G,guid:a.handler.guid}))},remove:function(a){d.event.remove(this,H(a.origType,a.selector),a)}},beforeunload:{setup:function(a,b,c){d.isWindow(this)&&(this.onbeforeunload=c)},teardown:function(a,b){this.onbeforeunload===b&&(this.onbeforeunload=null)}}}},d.removeEvent=c.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){a.detachEvent&&a.detachEvent("on"+b,c)},d.Event=function(a){if(!this.preventDefault)return new d.Event(a);a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||a.returnValue===!1||a.getPreventDefault&&a.getPreventDefault()?y:x):this.type=a,this.timeStamp=d.now(),this[d.expando]=!0},d.Event.prototype={preventDefault:function(){this.isDefaultPrevented=y;var a=this.originalEvent;a&&(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){this.isPropagationStopped=y;var a=this.originalEvent;a&&(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=y,this.stopPropagation()},isDefaultPrevented:x,isPropagationStopped:x,isImmediatePropagationStopped:x};var z=function(a){var b=a.relatedTarget;try{if(b&&b!==c&&!b.parentNode)return;while(b&&b!==this)b=b.parentNode;b!==this&&(a.type=a.data,d.event.handle.apply(this,arguments))}catch(e){}},A=function(a){a.type=a.data,d.event.handle.apply(this,arguments)};d.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(a,b){d.event.special[a]={setup:function(c){d.event.add(this,b,c&&c.selector?A:z,a)},teardown:function(a){d.event.remove(this,b,a&&a.selector?A:z)}}}),d.support.submitBubbles||(d.event.special.submit={setup:function(a,b){if(this.nodeName&&this.nodeName.toLowerCase()!=="form")d.event.add(this,"click.specialSubmit",function(a){var b=a.target,c=b.type;(c==="submit"||c==="image")&&d(b).closest("form").length&&E("submit",this,arguments)}),d.event.add(this,"keypress.specialSubmit",function(a){var b=a.target,c=b.type;(c==="text"||c==="password")&&d(b).closest("form").length&&a.keyCode===13&&E("submit",this,arguments)});else return!1},teardown:function(a){d.event.remove(this,".specialSubmit")}});if(!d.support.changeBubbles){var B,C=function(a){var b=a.type,c=a.value;b==="radio"||b==="checkbox"?c=a.checked:b==="select-multiple"?c=a.selectedIndex>-1?d.map(a.options,function(a){return a.selected}).join("-"):"":a.nodeName.toLowerCase()==="select"&&(c=a.selectedIndex);return c},D=function D(a){var c=a.target,e,f;if(s.test(c.nodeName)&&!c.readOnly){e=d._data(c,"_change_data"),f=C(c),(a.type!=="focusout"||c.type!=="radio")&&d._data(c,"_change_data",f);if(e===b||f===e)return;if(e!=null||f)a.type="change",a.liveFired=b,d.event.trigger(a,arguments[1],c)}};d.event.special.change={filters:{focusout:D,beforedeactivate:D,click:function(a){var b=a.target,c=b.type;(c==="radio"||c==="checkbox"||b.nodeName.toLowerCase()==="select")&&D.call(this,a)},keydown:function(a){var b=a.target,c=b.type;(a.keyCode===13&&b.nodeName.toLowerCase()!=="textarea"||a.keyCode===32&&(c==="checkbox"||c==="radio")||c==="select-multiple")&&D.call(this,a)},beforeactivate:function(a){var b=a.target;d._data(b,"_change_data",C(b))}},setup:function(a,b){if(this.type==="file")return!1;for(var c in B)d.event.add(this,c+".specialChange",B[c]);return s.test(this.nodeName)},teardown:function(a){d.event.remove(this,".specialChange");return s.test(this.nodeName)}},B=d.event.special.change.filters,B.focus=B.beforeactivate}c.addEventListener&&d.each({focus:"focusin",blur:"focusout"},function(a,b){function f(a){var c=d.event.fix(a);c.type=b,c.originalEvent={},d.event.trigger(c,null,c.target),c.isDefaultPrevented()&&a.preventDefault()}var e=0;d.event.special[b]={setup:function(){e++===0&&c.addEventListener(a,f,!0)},teardown:function(){--e===0&&c.removeEventListener(a,f,!0)}}}),d.each(["bind","one"],function(a,c){d.fn[c]=function(a,e,f){if(typeof a==="object"){for(var g in a)this[c](g,e,a[g],f);return this}if(d.isFunction(e)||e===!1)f=e,e=b;var h=c==="one"?d.proxy(f,function(a){d(this).unbind(a,h);return f.apply(this,arguments)}):f;if(a==="unload"&&c!=="one")this.one(a,e,f);else for(var i=0,j=this.length;i<j;i++)d.event.add(this[i],a,h,e);return this}}),d.fn.extend({unbind:function(a,b){if(typeof a!=="object"||a.preventDefault)for(var e=0,f=this.length;e<f;e++)d.event.remove(this[e],a,b);else for(var c in a)this.unbind(c,a[c]);return this},delegate:function(a,b,c,d){return this.live(b,c,d,a)},undelegate:function(a,b,c){return arguments.length===0?this.unbind("live"):this.die(b,null,c,a)},trigger:function(a,b){return this.each(function(){d.event.trigger(a,b,this)})},triggerHandler:function(a,b){if(this[0]){var c=d.Event(a);c.preventDefault(),c.stopPropagation(),d.event.trigger(c,b,this[0]);return c.result}},toggle:function(a){var b=arguments,c=1;while(c<b.length)d.proxy(a,b[c++]);return this.click(d.proxy(a,function(e){var f=(d._data(this,"lastToggle"+a.guid)||0)%c;d._data(this,"lastToggle"+a.guid,f+1),e.preventDefault();return b[f].apply(this,arguments)||!1}))},hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}});var F={focus:"focusin",blur:"focusout",mouseenter:"mouseover",mouseleave:"mouseout"};d.each(["live","die"],function(a,c){d.fn[c]=function(a,e,f,g){var h,i=0,j,k,l,m=g||this.selector,n=g?this:d(this.context);if(typeof a==="object"&&!a.preventDefault){for(var o in a)n[c](o,e,a[o],m);return this}d.isFunction(e)&&(f=e,e=b),a=(a||"").split(" ");while((h=a[i++])!=null){j=r.exec(h),k="",j&&(k=j[0],h=h.replace(r,""));if(h==="hover"){a.push("mouseenter"+k,"mouseleave"+k);continue}l=h,h==="focus"||h==="blur"?(a.push(F[h]+k),h=h+k):h=(F[h]||h)+k;if(c==="live")for(var p=0,q=n.length;p<q;p++)d.event.add(n[p],"live."+H(h,m),{data:e,selector:m,handler:f,origType:h,origHandler:f,preType:l});else n.unbind("live."+H(h,m),f)}return this}}),d.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error".split(" "),function(a,b){d.fn[b]=function(a,c){c==null&&(c=a,a=null);return arguments.length>0?this.bind(b,a,c):this.trigger(b)},d.attrFn&&(d.attrFn[b]=!0)}),function(){function u(a,b,c,d,e,f){for(var g=0,h=d.length;g<h;g++){var i=d[g];if(i){var j=!1;i=i[a];while(i){if(i.sizcache===c){j=d[i.sizset];break}if(i.nodeType===1){f||(i.sizcache=c,i.sizset=g);if(typeof b!=="string"){if(i===b){j=!0;break}}else if(k.filter(b,[i]).length>0){j=i;break}}i=i[a]}d[g]=j}}}function t(a,b,c,d,e,f){for(var g=0,h=d.length;g<h;g++){var i=d[g];if(i){var j=!1;i=i[a];while(i){if(i.sizcache===c){j=d[i.sizset];break}i.nodeType===1&&!f&&(i.sizcache=c,i.sizset=g);if(i.nodeName.toLowerCase()===b){j=i;break}i=i[a]}d[g]=j}}}var a=/((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,e=0,f=Object.prototype.toString,g=!1,h=!0,i=/\\/g,j=/\W/;[0,0].sort(function(){h=!1;return 0});var k=function(b,d,e,g){e=e||[],d=d||c;var h=d;if(d.nodeType!==1&&d.nodeType!==9)return[];if(!b||typeof b!=="string")return e;var i,j,n,o,q,r,s,t,u=!0,w=k.isXML(d),x=[],y=b;do{a.exec(""),i=a.exec(y);if(i){y=i[3],x.push(i[1]);if(i[2]){o=i[3];break}}}while(i);if(x.length>1&&m.exec(b))if(x.length===2&&l.relative[x[0]])j=v(x[0]+x[1],d);else{j=l.relative[x[0]]?[d]:k(x.shift(),d);while(x.length)b=x.shift(),l.relative[b]&&(b+=x.shift()),j=v(b,j)}else{!g&&x.length>1&&d.nodeType===9&&!w&&l.match.ID.test(x[0])&&!l.match.ID.test(x[x.length-1])&&(q=k.find(x.shift(),d,w),d=q.expr?k.filter(q.expr,q.set)[0]:q.set[0]);if(d){q=g?{expr:x.pop(),set:p(g)}:k.find(x.pop(),x.length===1&&(x[0]==="~"||x[0]==="+")&&d.parentNode?d.parentNode:d,w),j=q.expr?k.filter(q.expr,q.set):q.set,x.length>0?n=p(j):u=!1;while(x.length)r=x.pop(),s=r,l.relative[r]?s=x.pop():r="",s==null&&(s=d),l.relative[r](n,s,w)}else n=x=[]}n||(n=j),n||k.error(r||b);if(f.call(n)==="[object Array]")if(u)if(d&&d.nodeType===1)for(t=0;n[t]!=null;t++)n[t]&&(n[t]===!0||n[t].nodeType===1&&k.contains(d,n[t]))&&e.push(j[t]);else for(t=0;n[t]!=null;t++)n[t]&&n[t].nodeType===1&&e.push(j[t]);else e.push.apply(e,n);else p(n,e);o&&(k(o,h,e,g),k.uniqueSort(e));return e};k.uniqueSort=function(a){if(r){g=h,a.sort(r);if(g)for(var b=1;b<a.length;b++)a[b]===a[b-1]&&a.splice(b--,1)}return a},k.matches=function(a,b){return k(a,null,null,b)},k.matchesSelector=function(a,b){return k(b,null,null,[a]).length>0},k.find=function(a,b,c){var d;if(!a)return[];for(var e=0,f=l.order.length;e<f;e++){var g,h=l.order[e];if(g=l.leftMatch[h].exec(a)){var j=g[1];g.splice(1,1);if(j.substr(j.length-1)!=="\\"){g[1]=(g[1]||"").replace(i,""),d=l.find[h](g,b,c);if(d!=null){a=a.replace(l.match[h],"");break}}}}d||(d=typeof b.getElementsByTagName!=="undefined"?b.getElementsByTagName("*"):[]);return{set:d,expr:a}},k.filter=function(a,c,d,e){var f,g,h=a,i=[],j=c,m=c&&c[0]&&k.isXML(c[0]);while(a&&c.length){for(var n in l.filter)if((f=l.leftMatch[n].exec(a))!=null&&f[2]){var o,p,q=l.filter[n],r=f[1];g=!1,f.splice(1,1);if(r.substr(r.length-1)==="\\")continue;j===i&&(i=[]);if(l.preFilter[n]){f=l.preFilter[n](f,j,d,i,e,m);if(f){if(f===!0)continue}else g=o=!0}if(f)for(var s=0;(p=j[s])!=null;s++)if(p){o=q(p,f,s,j);var t=e^!!o;d&&o!=null?t?g=!0:j[s]=!1:t&&(i.push(p),g=!0)}if(o!==b){d||(j=i),a=a.replace(l.match[n],"");if(!g)return[];break}}if(a===h)if(g==null)k.error(a);else break;h=a}return j},k.error=function(a){throw"Syntax error, unrecognized expression: "+a};var l=k.selectors={order:["ID","NAME","TAG"],match:{ID:/#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,CLASS:/\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,NAME:/\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,ATTR:/\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,TAG:/^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,CHILD:/:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,POS:/:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,PSEUDO:/:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/},leftMatch:{},attrMap:{"class":"className","for":"htmlFor"},attrHandle:{href:function(a){return a.getAttribute("href")},type:function(a){return a.getAttribute("type")}},relative:{"+":function(a,b){var c=typeof b==="string",d=c&&!j.test(b),e=c&&!d;d&&(b=b.toLowerCase());for(var f=0,g=a.length,h;f<g;f++)if(h=a[f]){while((h=h.previousSibling)&&h.nodeType!==1){}a[f]=e||h&&h.nodeName.toLowerCase()===b?h||!1:h===b}e&&k.filter(b,a,!0)},">":function(a,b){var c,d=typeof b==="string",e=0,f=a.length;if(d&&!j.test(b)){b=b.toLowerCase();for(;e<f;e++){c=a[e];if(c){var g=c.parentNode;a[e]=g.nodeName.toLowerCase()===b?g:!1}}}else{for(;e<f;e++)c=a[e],c&&(a[e]=d?c.parentNode:c.parentNode===b);d&&k.filter(b,a,!0)}},"":function(a,b,c){var d,f=e++,g=u;typeof b==="string"&&!j.test(b)&&(b=b.toLowerCase(),d=b,g=t),g("parentNode",b,f,a,d,c)},"~":function(a,b,c){var d,f=e++,g=u;typeof b==="string"&&!j.test(b)&&(b=b.toLowerCase(),d=b,g=t),g("previousSibling",b,f,a,d,c)}},find:{ID:function(a,b,c){if(typeof b.getElementById!=="undefined"&&!c){var d=b.getElementById(a[1]);return d&&d.parentNode?[d]:[]}},NAME:function(a,b){if(typeof b.getElementsByName!=="undefined"){var c=[],d=b.getElementsByName(a[1]);for(var e=0,f=d.length;e<f;e++)d[e].getAttribute("name")===a[1]&&c.push(d[e]);return c.length===0?null:c}},TAG:function(a,b){if(typeof b.getElementsByTagName!=="undefined")return b.getElementsByTagName(a[1])}},preFilter:{CLASS:function(a,b,c,d,e,f){a=" "+a[1].replace(i,"")+" ";if(f)return a;for(var g=0,h;(h=b[g])!=null;g++)h&&(e^(h.className&&(" "+h.className+" ").replace(/[\t\n\r]/g," ").indexOf(a)>=0)?c||d.push(h):c&&(b[g]=!1));return!1},ID:function(a){return a[1].replace(i,"")},TAG:function(a,b){return a[1].replace(i,"").toLowerCase()},CHILD:function(a){if(a[1]==="nth"){a[2]||k.error(a[0]),a[2]=a[2].replace(/^\+|\s*/g,"");var b=/(-?)(\d*)(?:n([+\-]?\d*))?/.exec(a[2]==="even"&&"2n"||a[2]==="odd"&&"2n+1"||!/\D/.test(a[2])&&"0n+"+a[2]||a[2]);a[2]=b[1]+(b[2]||1)-0,a[3]=b[3]-0}else a[2]&&k.error(a[0]);a[0]=e++;return a},ATTR:function(a,b,c,d,e,f){var g=a[1]=a[1].replace(i,"");!f&&l.attrMap[g]&&(a[1]=l.attrMap[g]),a[4]=(a[4]||a[5]||"").replace(i,""),a[2]==="~="&&(a[4]=" "+a[4]+" ");return a},PSEUDO:function(b,c,d,e,f){if(b[1]==="not")if((a.exec(b[3])||"").length>1||/^\w/.test(b[3]))b[3]=k(b[3],null,null,c);else{var g=k.filter(b[3],c,d,!0^f);d||e.push.apply(e,g);return!1}else if(l.match.POS.test(b[0])||l.match.CHILD.test(b[0]))return!0;return b},POS:function(a){a.unshift(!0);return a}},filters:{enabled:function(a){return a.disabled===!1&&a.type!=="hidden"},disabled:function(a){return a.disabled===!0},checked:function(a){return a.checked===!0},selected:function(a){a.parentNode&&a.parentNode.selectedIndex;return a.selected===!0},parent:function(a){return!!a.firstChild},empty:function(a){return!a.firstChild},has:function(a,b,c){return!!k(c[3],a).length},header:function(a){return/h\d/i.test(a.nodeName)},text:function(a){var b=a.getAttribute("type"),c=a.type;return"text"===c&&(b===c||b===null)},radio:function(a){return"radio"===a.type},checkbox:function(a){return"checkbox"===a.type},file:function(a){return"file"===a.type},password:function(a){return"password"===a.type},submit:function(a){return"submit"===a.type},image:function(a){return"image"===a.type},reset:function(a){return"reset"===a.type},button:function(a){return"button"===a.type||a.nodeName.toLowerCase()==="button"},input:function(a){return/input|select|textarea|button/i.test(a.nodeName)}},setFilters:{first:function(a,b){return b===0},last:function(a,b,c,d){return b===d.length-1},even:function(a,b){return b%2===0},odd:function(a,b){return b%2===1},lt:function(a,b,c){return b<c[3]-0},gt:function(a,b,c){return b>c[3]-0},nth:function(a,b,c){return c[3]-0===b},eq:function(a,b,c){return c[3]-0===b}},filter:{PSEUDO:function(a,b,c,d){var e=b[1],f=l.filters[e];if(f)return f(a,c,b,d);if(e==="contains")return(a.textContent||a.innerText||k.getText([a])||"").indexOf(b[3])>=0;if(e==="not"){var g=b[3];for(var h=0,i=g.length;h<i;h++)if(g[h]===a)return!1;return!0}k.error(e)},CHILD:function(a,b){var c=b[1],d=a;switch(c){case"only":case"first":while(d=d.previousSibling)if(d.nodeType===1)return!1;if(c==="first")return!0;d=a;case"last":while(d=d.nextSibling)if(d.nodeType===1)return!1;return!0;case"nth":var e=b[2],f=b[3];if(e===1&&f===0)return!0;var g=b[0],h=a.parentNode;if(h&&(h.sizcache!==g||!a.nodeIndex)){var i=0;for(d=h.firstChild;d;d=d.nextSibling)d.nodeType===1&&(d.nodeIndex=++i);h.sizcache=g}var j=a.nodeIndex-f;return e===0?j===0:j%e===0&&j/e>=0}},ID:function(a,b){return a.nodeType===1&&a.getAttribute("id")===b},TAG:function(a,b){return b==="*"&&a.nodeType===1||a.nodeName.toLowerCase()===b},CLASS:function(a,b){return(" "+(a.className||a.getAttribute("class"))+" ").indexOf(b)>-1},ATTR:function(a,b){var c=b[1],d=l.attrHandle[c]?l.attrHandle[c](a):a[c]!=null?a[c]:a.getAttribute(c),e=d+"",f=b[2],g=b[4];return d==null?f==="!=":f==="="?e===g:f==="*="?e.indexOf(g)>=0:f==="~="?(" "+e+" ").indexOf(g)>=0:g?f==="!="?e!==g:f==="^="?e.indexOf(g)===0:f==="$="?e.substr(e.length-g.length)===g:f==="|="?e===g||e.substr(0,g.length+1)===g+"-":!1:e&&d!==!1},POS:function(a,b,c,d){var e=b[2],f=l.setFilters[e];if(f)return f(a,c,b,d)}}},m=l.match.POS,n=function(a,b){return"\\"+(b-0+1)};for(var o in l.match)l.match[o]=new RegExp(l.match[o].source+/(?![^\[]*\])(?![^\(]*\))/.source),l.leftMatch[o]=new RegExp(/(^(?:.|\r|\n)*?)/.source+l.match[o].source.replace(/\\(\d+)/g,n));var p=function(a,b){a=Array.prototype.slice.call(a,0);if(b){b.push.apply(b,a);return b}return a};try{Array.prototype.slice.call(c.documentElement.childNodes,0)[0].nodeType}catch(q){p=function(a,b){var c=0,d=b||[];if(f.call(a)==="[object Array]")Array.prototype.push.apply(d,a);else if(typeof a.length==="number")for(var e=a.length;c<e;c++)d.push(a[c]);else for(;a[c];c++)d.push(a[c]);return d}}var r,s;c.documentElement.compareDocumentPosition?r=function(a,b){if(a===b){g=!0;return 0}if(!a.compareDocumentPosition||!b.compareDocumentPosition)return a.compareDocumentPosition?-1:1;return a.compareDocumentPosition(b)&4?-1:1}:(r=function(a,b){var c,d,e=[],f=[],h=a.parentNode,i=b.parentNode,j=h;if(a===b){g=!0;return 0}if(h===i)return s(a,b);if(!h)return-1;if(!i)return 1;while(j)e.unshift(j),j=j.parentNode;j=i;while(j)f.unshift(j),j=j.parentNode;c=e.length,d=f.length;for(var k=0;k<c&&k<d;k++)if(e[k]!==f[k])return s(e[k],f[k]);return k===c?s(a,f[k],-1):s(e[k],b,1)},s=function(a,b,c){if(a===b)return c;var d=a.nextSibling;while(d){if(d===b)return-1;d=d.nextSibling}return 1}),k.getText=function(a){var b="",c;for(var d=0;a[d];d++)c=a[d],c.nodeType===3||c.nodeType===4?b+=c.nodeValue:c.nodeType!==8&&(b+=k.getText(c.childNodes));return b},function(){var a=c.createElement("div"),d="script"+(new Date).getTime(),e=c.documentElement;a.innerHTML="<a name='"+d+"'/>",e.insertBefore(a,e.firstChild),c.getElementById(d)&&(l.find.ID=function(a,c,d){if(typeof c.getElementById!=="undefined"&&!d){var e=c.getElementById(a[1]);return e?e.id===a[1]||typeof e.getAttributeNode!=="undefined"&&e.getAttributeNode("id").nodeValue===a[1]?[e]:b:[]}},l.filter.ID=function(a,b){var c=typeof a.getAttributeNode!=="undefined"&&a.getAttributeNode("id");return a.nodeType===1&&c&&c.nodeValue===b}),e.removeChild(a),e=a=null}(),function(){var a=c.createElement("div");a.appendChild(c.createComment("")),a.getElementsByTagName("*").length>0&&(l.find.TAG=function(a,b){var c=b.getElementsByTagName(a[1]);if(a[1]==="*"){var d=[];for(var e=0;c[e];e++)c[e].nodeType===1&&d.push(c[e]);c=d}return c}),a.innerHTML="<a href='#'></a>",a.firstChild&&typeof a.firstChild.getAttribute!=="undefined"&&a.firstChild.getAttribute("href")!=="#"&&(l.attrHandle.href=function(a){return a.getAttribute("href",2)}),a=null}(),c.querySelectorAll&&function(){var a=k,b=c.createElement("div"),d="__sizzle__";b.innerHTML="<p class='TEST'></p>";if(!b.querySelectorAll||b.querySelectorAll(".TEST").length!==0){k=function(b,e,f,g){e=e||c;if(!g&&!k.isXML(e)){var h=/^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec(b);if(h&&(e.nodeType===1||e.nodeType===9)){if(h[1])return p(e.getElementsByTagName(b),f);if(h[2]&&l.find.CLASS&&e.getElementsByClassName)return p(e.getElementsByClassName(h[2]),f)}if(e.nodeType===9){if(b==="body"&&e.body)return p([e.body],f);if(h&&h[3]){var i=e.getElementById(h[3]);if(!i||!i.parentNode)return p([],f);if(i.id===h[3])return p([i],f)}try{return p(e.querySelectorAll(b),f)}catch(j){}}else if(e.nodeType===1&&e.nodeName.toLowerCase()!=="object"){var m=e,n=e.getAttribute("id"),o=n||d,q=e.parentNode,r=/^\s*[+~]/.test(b);n?o=o.replace(/'/g,"\\$&"):e.setAttribute("id",o),r&&q&&(e=e.parentNode);try{if(!r||q)return p(e.querySelectorAll("[id='"+o+"'] "+b),f)}catch(s){}finally{n||m.removeAttribute("id")}}}return a(b,e,f,g)};for(var e in a)k[e]=a[e];b=null}}(),function(){var a=c.documentElement,b=a.matchesSelector||a.mozMatchesSelector||a.webkitMatchesSelector||a.msMatchesSelector;if(b){var d=!b.call(c.createElement("div"),"div"),e=!1;try{b.call(c.documentElement,"[test!='']:sizzle")}catch(f){e=!0}k.matchesSelector=function(a,c){c=c.replace(/\=\s*([^'"\]]*)\s*\]/g,"='$1']");if(!k.isXML(a))try{if(e||!l.match.PSEUDO.test(c)&&!/!=/.test(c)){var f=b.call(a,c);if(f||!d||a.document&&a.document.nodeType!==11)return f}}catch(g){}return k(c,null,null,[a]).length>0}}}(),function(){var a=c.createElement("div");a.innerHTML="<div class='test e'></div><div class='test'></div>";if(a.getElementsByClassName&&a.getElementsByClassName("e").length!==0){a.lastChild.className="e";if(a.getElementsByClassName("e").length===1)return;l.order.splice(1,0,"CLASS"),l.find.CLASS=function(a,b,c){if(typeof b.getElementsByClassName!=="undefined"&&!c)return b.getElementsByClassName(a[1])},a=null}}(),c.documentElement.contains?k.contains=function(a,b){return a!==b&&(a.contains?a.contains(b):!0)}:c.documentElement.compareDocumentPosition?k.contains=function(a,b){return!!(a.compareDocumentPosition(b)&16)}:k.contains=function(){return!1},k.isXML=function(a){var b=(a?a.ownerDocument||a:0).documentElement;return b?b.nodeName!=="HTML":!1};var v=function(a,b){var c,d=[],e="",f=b.nodeType?[b]:b;while(c=l.match.PSEUDO.exec(a))e+=c[0],a=a.replace(l.match.PSEUDO,"");a=l.relative[a]?a+"*":a;for(var g=0,h=f.length;g<h;g++)k(a,f[g],d);return k.filter(e,d)};d.find=k,d.expr=k.selectors,d.expr[":"]=d.expr.filters,d.unique=k.uniqueSort,d.text=k.getText,d.isXMLDoc=k.isXML,d.contains=k.contains}();var I=/Until$/,J=/^(?:parents|prevUntil|prevAll)/,K=/,/,L=/^.[^:#\[\.,]*$/,M=Array.prototype.slice,N=d.expr.match.POS,O={children:!0,contents:!0,next:!0,prev:!0};d.fn.extend({find:function(a){var b=this.pushStack("","find",a),c=0;for(var e=0,f=this.length;e<f;e++){c=b.length,d.find(a,this[e],b);if(e>0)for(var g=c;g<b.length;g++)for(var h=0;h<c;h++)if(b[h]===b[g]){b.splice(g--,1);break}}return b},has:function(a){var b=d(a);return this.filter(function(){for(var a=0,c=b.length;a<c;a++)if(d.contains(this,b[a]))return!0})},not:function(a){return this.pushStack(Q(this,a,!1),"not",a)},filter:function(a){return this.pushStack(Q(this,a,!0),"filter",a)},is:function(a){return!!a&&d.filter(a,this).length>0},closest:function(a,b){var c=[],e,f,g=this[0];if(d.isArray(a)){var h,i,j={},k=1;if(g&&a.length){for(e=0,f=a.length;e<f;e++)i=a[e],j[i]||(j[i]=d.expr.match.POS.test(i)?d(i,b||this.context):i);while(g&&g.ownerDocument&&g!==b){for(i in j)h=j[i],(h.jquery?h.index(g)>-1:d(g).is(h))&&c.push({selector:i,elem:g,level:k});g=g.parentNode,k++}}return c}var l=N.test(a)?d(a,b||this.context):null;for(e=0,f=this.length;e<f;e++){g=this[e];while(g){if(l?l.index(g)>-1:d.find.matchesSelector(g,a)){c.push(g);break}g=g.parentNode;if(!g||!g.ownerDocument||g===b)break}}c=c.length>1?d.unique(c):c;return this.pushStack(c,"closest",a)},index:function(a){if(!a||typeof a==="string")return d.inArray(this[0],a?d(a):this.parent().children());return d.inArray(a.jquery?a[0]:a,this)},add:function(a,b){var c=typeof a==="string"?d(a,b):d.makeArray(a),e=d.merge(this.get(),c);return this.pushStack(P(c[0])||P(e[0])?e:d.unique(e))},andSelf:function(){return this.add(this.prevObject)}}),d.each({parent:function(a){var b=a.parentNode;return b&&b.nodeType!==11?b:null},parents:function(a){return d.dir(a,"parentNode")},parentsUntil:function(a,b,c){return d.dir(a,"parentNode",c)},next:function(a){return d.nth(a,2,"nextSibling")},prev:function(a){return d.nth(a,2,"previousSibling")},nextAll:function(a){return d.dir(a,"nextSibling")},prevAll:function(a){return d.dir(a,"previousSibling")},nextUntil:function(a,b,c){return d.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return d.dir(a,"previousSibling",c)},siblings:function(a){return d.sibling(a.parentNode.firstChild,a)},children:function(a){return d.sibling(a.firstChild)},contents:function(a){return d.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:d.makeArray(a.childNodes)}},function(a,b){d.fn[a]=function(c,e){var f=d.map(this,b,c),g=M.call(arguments);I.test(a)||(e=c),e&&typeof e==="string"&&(f=d.filter(e,f)),f=this.length>1&&!O[a]?d.unique(f):f,(this.length>1||K.test(e))&&J.test(a)&&(f=f.reverse());return this.pushStack(f,a,g.join(","))}}),d.extend({filter:function(a,b,c){c&&(a=":not("+a+")");return b.length===1?d.find.matchesSelector(b[0],a)?[b[0]]:[]:d.find.matches(a,b)},dir:function(a,c,e){var f=[],g=a[c];while(g&&g.nodeType!==9&&(e===b||g.nodeType!==1||!d(g).is(e)))g.nodeType===1&&f.push(g),g=g[c];return f},nth:function(a,b,c,d){b=b||1;var e=0;for(;a;a=a[c])if(a.nodeType===1&&++e===b)break;return a},sibling:function(a,b){var c=[];for(;a;a=a.nextSibling)a.nodeType===1&&a!==b&&c.push(a);return c}});var R=/ jQuery\d+="(?:\d+|null)"/g,S=/^\s+/,T=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,U=/<([\w:]+)/,V=/<tbody/i,W=/<|&#?\w+;/,X=/<(?:script|object|embed|option|style)/i,Y=/checked\s*(?:[^=]|=\s*.checked.)/i,Z={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],area:[1,"<map>","</map>"],_default:[0,"",""]};Z.optgroup=Z.option,Z.tbody=Z.tfoot=Z.colgroup=Z.caption=Z.thead,Z.th=Z.td,d.support.htmlSerialize||(Z._default=[1,"div<div>","</div>"]),d.fn.extend({text:function(a){if(d.isFunction(a))return this.each(function(b){var c=d(this);c.text(a.call(this,b,c.text()))});if(typeof a!=="object"&&a!==b)return this.empty().append((this[0]&&this[0].ownerDocument||c).createTextNode(a));return d.text(this)},wrapAll:function(a){if(d.isFunction(a))return this.each(function(b){d(this).wrapAll(a.call(this,b))});if(this[0]){var b=d(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&a.firstChild.nodeType===1)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){if(d.isFunction(a))return this.each(function(b){d(this).wrapInner(a.call(this,b))});return this.each(function(){var b=d(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){return this.each(function(){d(this).wrapAll(a)})},unwrap:function(){return this.parent().each(function(){d.nodeName(this,"body")||d(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(a){this.nodeType===1&&this.appendChild(a)})},prepend:function(){return this.domManip(arguments,!0,function(a){this.nodeType===1&&this.insertBefore(a,this.firstChild)})},before:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this)});if(arguments.length){var a=d(arguments[0]);a.push.apply(a,this.toArray());return this.pushStack(a,"before",arguments)}},after:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this.nextSibling)});if(arguments.length){var a=this.pushStack(this,"after",arguments);a.push.apply(a,d(arguments[0]).toArray());return a}},remove:function(a,b){for(var c=0,e;(e=this[c])!=null;c++)if(!a||d.filter(a,[e]).length)!b&&e.nodeType===1&&(d.cleanData(e.getElementsByTagName("*")),d.cleanData([e])),e.parentNode&&e.parentNode.removeChild(e);return this},empty:function(){for(var a=0,b;(b=this[a])!=null;a++){b.nodeType===1&&d.cleanData(b.getElementsByTagName("*"));while(b.firstChild)b.removeChild(b.firstChild)}return this},clone:function(a,b){a=a==null?!1:a,b=b==null?a:b;return this.map(function(){return d.clone(this,a,b)})},html:function(a){if(a===b)return this[0]&&this[0].nodeType===1?this[0].innerHTML.replace(R,""):null;if(typeof a!=="string"||X.test(a)||!d.support.leadingWhitespace&&S.test(a)||Z[(U.exec(a)||["",""])[1].toLowerCase()])d.isFunction(a)?this.each(function(b){var c=d(this);c.html(a.call(this,b,c.html()))}):this.empty().append(a);else{a=a.replace(T,"<$1></$2>");try{for(var c=0,e=this.length;c<e;c++)this[c].nodeType===1&&(d.cleanData(this[c].getElementsByTagName("*")),this[c].innerHTML=a)}catch(f){this.empty().append(a)}}return this},replaceWith:function(a){if(this[0]&&this[0].parentNode){if(d.isFunction(a))return this.each(function(b){var c=d(this),e=c.html();c.replaceWith(a.call(this,b,e))});typeof a!=="string"&&(a=d(a).detach());return this.each(function(){var b=this.nextSibling,c=this.parentNode;d(this).remove(),b?d(b).before(a):d(c).append(a)})}return this.length?this.pushStack(d(d.isFunction(a)?a():a),"replaceWith",a):this},detach:function(a){return this.remove(a,!0)},domManip:function(a,c,e){var f,g,h,i,j=a[0],k=[];if(!d.support.checkClone&&arguments.length===3&&typeof j==="string"&&Y.test(j))return this.each(function(){d(this).domManip(a,c,e,!0)});if(d.isFunction(j))return this.each(function(f){var g=d(this);a[0]=j.call(this,f,c?g.html():b),g.domManip(a,c,e)});if(this[0]){i=j&&j.parentNode,d.support.parentNode&&i&&i.nodeType===11&&i.childNodes.length===this.length?f={fragment:i}:f=d.buildFragment(a,this,k),h=f.fragment,h.childNodes.length===1?g=h=h.firstChild:g=h.firstChild;if(g){c=c&&d.nodeName(g,"tr");for(var l=0,m=this.length,n=m-1;l<m;l++)e.call(c?$(this[l],g):this[l],f.cacheable||m>1&&l<n?d.clone(h,!0,!0):h)}k.length&&d.each(k,bc)}return this}}),d.buildFragment=function(a,b,e){var f,g,h,i=b&&b[0]?b[0].ownerDocument||b[0]:c;a.length===1&&typeof a[0]==="string"&&a[0].length<512&&i===c&&a[0].charAt(0)==="<"&&!X.test(a[0])&&(d.support.checkClone||!Y.test(a[0]))&&(g=!0,h=d.fragments[a[0]],h&&(h!==1&&(f=h))),f||(f=i.createDocumentFragment(),d.clean(a,i,f,e)),g&&(d.fragments[a[0]]=h?f:1);return{fragment:f,cacheable:g}},d.fragments={},d.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){d.fn[a]=function(c){var e=[],f=d(c),g=this.length===1&&this[0].parentNode;if(g&&g.nodeType===11&&g.childNodes.length===1&&f.length===1){f[b](this[0]);return this}for(var h=0,i=f.length;h<i;h++){var j=(h>0?this.clone(!0):this).get();d(f[h])[b](j),e=e.concat(j)}return this.pushStack(e,a,f.selector)}}),d.extend({clone:function(a,b,c){var e=a.cloneNode(!0),f,g,h;if((!d.support.noCloneEvent||!d.support.noCloneChecked)&&(a.nodeType===1||a.nodeType===11)&&!d.isXMLDoc(a)){ba(a,e),f=bb(a),g=bb(e);for(h=0;f[h];++h)ba(f[h],g[h])}if(b){_(a,e);if(c){f=bb(a),g=bb(e);for(h=0;f[h];++h)_(f[h],g[h])}}return e},clean:function(a,b,e,f){b=b||c,typeof b.createElement==="undefined"&&(b=b.ownerDocument||b[0]&&b[0].ownerDocument||c);var g=[];for(var h=0,i;(i=a[h])!=null;h++){typeof i==="number"&&(i+="");if(!i)continue;if(typeof i!=="string"||W.test(i)){if(typeof i==="string"){i=i.replace(T,"<$1></$2>");var j=(U.exec(i)||["",""])[1].toLowerCase(),k=Z[j]||Z._default,l=k[0],m=b.createElement("div");m.innerHTML=k[1]+i+k[2];while(l--)m=m.lastChild;if(!d.support.tbody){var n=V.test(i),o=j==="table"&&!n?m.firstChild&&m.firstChild.childNodes:k[1]==="<table>"&&!n?m.childNodes:[];for(var p=o.length-1;p>=0;--p)d.nodeName(o[p],"tbody")&&!o[p].childNodes.length&&o[p].parentNode.removeChild(o[p])}!d.support.leadingWhitespace&&S.test(i)&&m.insertBefore(b.createTextNode(S.exec(i)[0]),m.firstChild),i=m.childNodes}}else i=b.createTextNode(i);i.nodeType?g.push(i):g=d.merge(g,i)}if(e)for(h=0;g[h];h++)!f||!d.nodeName(g[h],"script")||g[h].type&&g[h].type.toLowerCase()!=="text/javascript"?(g[h].nodeType===1&&g.splice.apply(g,[h+1,0].concat(d.makeArray(g[h].getElementsByTagName("script")))),e.appendChild(g[h])):f.push(g[h].parentNode?g[h].parentNode.removeChild(g[h]):g[h]);return g},cleanData:function(a){var b,c,e=d.cache,f=d.expando,g=d.event.special,h=d.support.deleteExpando;for(var i=0,j;(j=a[i])!=null;i++){if(j.nodeName&&d.noData[j.nodeName.toLowerCase()])continue;c=j[d.expando];if(c){b=e[c]&&e[c][f];if(b&&b.events){for(var k in b.events)g[k]?d.event.remove(j,k):d.removeEvent(j,k,b.handle);b.handle&&(b.handle.elem=null)}h?delete j[d.expando]:j.removeAttribute&&j.removeAttribute(d.expando),delete e[c]}}}});var bd=/alpha\([^)]*\)/i,be=/opacity=([^)]*)/,bf=/-([a-z])/ig,bg=/([A-Z]|^ms)/g,bh=/^-?\d+(?:px)?$/i,bi=/^-?\d/,bj={position:"absolute",visibility:"hidden",display:"block"},bk=["Left","Right"],bl=["Top","Bottom"],bm,bn,bo,bp=function(a,b){return b.toUpperCase()};d.fn.css=function(a,c){if(arguments.length===2&&c===b)return this;return d.access(this,a,c,!0,function(a,c,e){return e!==b?d.style(a,c,e):d.css(a,c)})},d.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=bm(a,"opacity","opacity");return c===""?"1":c}return a.style.opacity}}},cssNumber:{zIndex:!0,fontWeight:!0,opacity:!0,zoom:!0,lineHeight:!0},cssProps:{"float":d.support.cssFloat?"cssFloat":"styleFloat"},style:function(a,c,e,f){if(a&&a.nodeType!==3&&a.nodeType!==8&&a.style){var g,h=d.camelCase(c),i=a.style,j=d.cssHooks[h];c=d.cssProps[h]||h;if(e===b){if(j&&"get"in j&&(g=j.get(a,!1,f))!==b)return g;return i[c]}if(typeof e==="number"&&isNaN(e)||e==null)return;typeof e==="number"&&!d.cssNumber[h]&&(e+="px");if(!j||!("set"in j)||(e=j.set(a,e))!==b)try{i[c]=e}catch(k){}}},css:function(a,c,e){var f,g=d.camelCase(c),h=d.cssHooks[g];c=d.cssProps[g]||g;if(h&&"get"in h&&(f=h.get(a,!0,e))!==b)return f;if(bm)return bm(a,c,g)},swap:function(a,b,c){var d={};for(var e in b)d[e]=a.style[e],a.style[e]=b[e];c.call(a);for(e in b)a.style[e]=d[e]},camelCase:function(a){return a.replace(bf,bp)}}),d.curCSS=d.css,d.each(["height","width"],function(a,b){d.cssHooks[b]={get:function(a,c,e){var f;if(c){a.offsetWidth!==0?f=bq(a,b,e):d.swap(a,bj,function(){f=bq(a,b,e)});if(f<=0){f=bm(a,b,b),f==="0px"&&bo&&(f=bo(a,b,b));if(f!=null)return f===""||f==="auto"?"0px":f}if(f<0||f==null){f=a.style[b];return f===""||f==="auto"?"0px":f}return typeof f==="string"?f:f+"px"}},set:function(a,b){if(!bh.test(b))return b;b=parseFloat(b);if(b>=0)return b+"px"}}}),d.support.opacity||(d.cssHooks.opacity={get:function(a,b){return be.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?parseFloat(RegExp.$1)/100+"":b?"1":""},set:function(a,b){var c=a.style;c.zoom=1;var e=d.isNaN(b)?"":"alpha(opacity="+b*100+")",f=c.filter||"";c.filter=bd.test(f)?f.replace(bd,e):c.filter+" "+e}}),d(function(){d.support.reliableMarginRight||(d.cssHooks.marginRight={get:function(a,b){var c;d.swap(a,{display:"inline-block"},function(){b?c=bm(a,"margin-right","marginRight"):c=a.style.marginRight});return c}})}),c.defaultView&&c.defaultView.getComputedStyle&&(bn=function(a,c,e){var f,g,h;e=e.replace(bg,"-$1").toLowerCase();if(!(g=a.ownerDocument.defaultView))return b;if(h=g.getComputedStyle(a,null))f=h.getPropertyValue(e),f===""&&!d.contains(a.ownerDocument.documentElement,a)&&(f=d.style(a,e));return f}),c.documentElement.currentStyle&&(bo=function(a,b){var c,d=a.currentStyle&&a.currentStyle[b],e=a.runtimeStyle&&a.runtimeStyle[b],f=a.style;!bh.test(d)&&bi.test(d)&&(c=f.left,e&&(a.runtimeStyle.left=a.currentStyle.left),f.left=b==="fontSize"?"1em":d||0,d=f.pixelLeft+"px",f.left=c,e&&(a.runtimeStyle.left=e));return d===""?"auto":d}),bm=bn||bo,d.expr&&d.expr.filters&&(d.expr.filters.hidden=function(a){var b=a.offsetWidth,c=a.offsetHeight;return b===0&&c===0||!d.support.reliableHiddenOffsets&&(a.style.display||d.css(a,"display"))==="none"},d.expr.filters.visible=function(a){return!d.expr.filters.hidden(a)});var br=/%20/g,bs=/\[\]$/,bt=/\r?\n/g,bu=/#.*$/,bv=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg,bw=/^(?:color|date|datetime|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,bx=/^(?:about|app|app\-storage|.+\-extension|file|widget):$/,by=/^(?:GET|HEAD)$/,bz=/^\/\//,bA=/\?/,bB=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,bC=/^(?:select|textarea)/i,bD=/\s+/,bE=/([?&])_=[^&]*/,bF=/(^|\-)([a-z])/g,bG=function(a,b,c){return b+c.toUpperCase()},bH=/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,bI=d.fn.load,bJ={},bK={},bL,bM;try{bL=c.location.href}catch(bN){bL=c.createElement("a"),bL.href="",bL=bL.href}bM=bH.exec(bL.toLowerCase())||[],d.fn.extend({load:function(a,c,e){if(typeof a!=="string"&&bI)return bI.apply(this,arguments);if(!this.length)return this;var f=a.indexOf(" ");if(f>=0){var g=a.slice(f,a.length);a=a.slice(0,f)}var h="GET";c&&(d.isFunction(c)?(e=c,c=b):typeof c==="object"&&(c=d.param(c,d.ajaxSettings.traditional),h="POST"));var i=this;d.ajax({url:a,type:h,dataType:"html",data:c,complete:function(a,b,c){c=a.responseText,a.isResolved()&&(a.done(function(a){c=a}),i.html(g?d("<div>").append(c.replace(bB,"")).find(g):c)),e&&i.each(e,[c,b,a])}});return this},serialize:function(){return d.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?d.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||bC.test(this.nodeName)||bw.test(this.type))}).map(function(a,b){var c=d(this).val();return c==null?null:d.isArray(c)?d.map(c,function(a,c){return{name:b.name,value:a.replace(bt,"\r\n")}}):{name:b.name,value:c.replace(bt,"\r\n")}}).get()}}),d.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(a,b){d.fn[b]=function(a){return this.bind(b,a)}}),d.each(["get","post"],function(a,c){d[c]=function(a,e,f,g){d.isFunction(e)&&(g=g||f,f=e,e=b);return d.ajax({type:c,url:a,data:e,success:f,dataType:g})}}),d.extend({getScript:function(a,c){return d.get(a,b,c,"script")},getJSON:function(a,b,c){return d.get(a,b,c,"json")},ajaxSetup:function(a,b){b?d.extend(!0,a,d.ajaxSettings,b):(b=a,a=d.extend(!0,d.ajaxSettings,b));for(var c in {context:1,url:1})c in b?a[c]=b[c]:c in d.ajaxSettings&&(a[c]=d.ajaxSettings[c]);return a},ajaxSettings:{url:bL,isLocal:bx.test(bM[1]),global:!0,type:"GET",contentType:"application/x-www-form-urlencoded",processData:!0,async:!0,accepts:{xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript","*":"*/*"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":a.String,"text html":!0,"text json":d.parseJSON,"text xml":d.parseXML}},ajaxPrefilter:bO(bJ),ajaxTransport:bO(bK),ajax:function(a,c){function v(a,c,l,n){if(r!==2){r=2,p&&clearTimeout(p),o=b,m=n||"",u.readyState=a?4:0;var q,t,v,w=l?bR(e,u,l):b,x,y;if(a>=200&&a<300||a===304){if(e.ifModified){if(x=u.getResponseHeader("Last-Modified"))d.lastModified[k]=x;if(y=u.getResponseHeader("Etag"))d.etag[k]=y}if(a===304)c="notmodified",q=!0;else try{t=bS(e,w),c="success",q=!0}catch(z){c="parsererror",v=z}}else{v=c;if(!c||a)c="error",a<0&&(a=0)}u.status=a,u.statusText=c,q?h.resolveWith(f,[t,c,u]):h.rejectWith(f,[u,c,v]),u.statusCode(j),j=b,s&&g.trigger("ajax"+(q?"Success":"Error"),[u,e,q?t:v]),i.resolveWith(f,[u,c]),s&&(g.trigger("ajaxComplete",[u,e]),--d.active||d.event.trigger("ajaxStop"))}}typeof a==="object"&&(c=a,a=b),c=c||{};var e=d.ajaxSetup({},c),f=e.context||e,g=f!==e&&(f.nodeType||f instanceof d)?d(f):d.event,h=d.Deferred(),i=d._Deferred(),j=e.statusCode||{},k,l={},m,n,o,p,q,r=0,s,t,u={readyState:0,setRequestHeader:function(a,b){r||(l[a.toLowerCase().replace(bF,bG)]=b);return this},getAllResponseHeaders:function(){return r===2?m:null},getResponseHeader:function(a){var c;if(r===2){if(!n){n={};while(c=bv.exec(m))n[c[1].toLowerCase()]=c[2]}c=n[a.toLowerCase()]}return c===b?null:c},overrideMimeType:function(a){r||(e.mimeType=a);return this},abort:function(a){a=a||"abort",o&&o.abort(a),v(0,a);return this}};h.promise(u),u.success=u.done,u.error=u.fail,u.complete=i.done,u.statusCode=function(a){if(a){var b;if(r<2)for(b in a)j[b]=[j[b],a[b]];else b=a[u.status],u.then(b,b)}return this},e.url=((a||e.url)+"").replace(bu,"").replace(bz,bM[1]+"//"),e.dataTypes=d.trim(e.dataType||"*").toLowerCase().split(bD),e.crossDomain==null&&(q=bH.exec(e.url.toLowerCase()),e.crossDomain=q&&(q[1]!=bM[1]||q[2]!=bM[2]||(q[3]||(q[1]==="http:"?80:443))!=(bM[3]||(bM[1]==="http:"?80:443)))),e.data&&e.processData&&typeof e.data!=="string"&&(e.data=d.param(e.data,e.traditional)),bP(bJ,e,c,u);if(r===2)return!1;s=e.global,e.type=e.type.toUpperCase(),e.hasContent=!by.test(e.type),s&&d.active++===0&&d.event.trigger("ajaxStart");if(!e.hasContent){e.data&&(e.url+=(bA.test(e.url)?"&":"?")+e.data),k=e.url;if(e.cache===!1){var w=d.now(),x=e.url.replace(bE,"$1_="+w);e.url=x+(x===e.url?(bA.test(e.url)?"&":"?")+"_="+w:"")}}if(e.data&&e.hasContent&&e.contentType!==!1||c.contentType)l["Content-Type"]=e.contentType;e.ifModified&&(k=k||e.url,d.lastModified[k]&&(l["If-Modified-Since"]=d.lastModified[k]),d.etag[k]&&(l["If-None-Match"]=d.etag[k])),l.Accept=e.dataTypes[0]&&e.accepts[e.dataTypes[0]]?e.accepts[e.dataTypes[0]]+(e.dataTypes[0]!=="*"?", */*; q=0.01":""):e.accepts["*"];for(t in e.headers)u.setRequestHeader(t,e.headers[t]);if(e.beforeSend&&(e.beforeSend.call(f,u,e)===!1||r===2)){u.abort();return!1}for(t in {success:1,error:1,complete:1})u[t](e[t]);o=bP(bK,e,c,u);if(o){u.readyState=1,s&&g.trigger("ajaxSend",[u,e]),e.async&&e.timeout>0&&(p=setTimeout(function(){u.abort("timeout")},e.timeout));try{r=1,o.send(l,v)}catch(y){status<2?v(-1,y):d.error(y)}}else v(-1,"No Transport");return u},param:function(a,c){var e=[],f=function(a,b){b=d.isFunction(b)?b():b,e[e.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};c===b&&(c=d.ajaxSettings.traditional);if(d.isArray(a)||a.jquery&&!d.isPlainObject(a))d.each(a,function(){f(this.name,this.value)});else for(var g in a)bQ(g,a[g],c,f);return e.join("&").replace(br,"+")}}),d.extend({active:0,lastModified:{},etag:{}});var bT=d.now(),bU=/(\=)\?(&|$)|\?\?/i;d.ajaxSetup({jsonp:"callback",jsonpCallback:function(){return d.expando+"_"+bT++}}),d.ajaxPrefilter("json jsonp",function(b,c,e){var f=typeof b.data==="string";if(b.dataTypes[0]==="jsonp"||c.jsonpCallback||c.jsonp!=null||b.jsonp!==!1&&(bU.test(b.url)||f&&bU.test(b.data))){var g,h=b.jsonpCallback=d.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,i=a[h],j=b.url,k=b.data,l="$1"+h+"$2",m=function(){a[h]=i,g&&d.isFunction(i)&&a[h](g[0])};b.jsonp!==!1&&(j=j.replace(bU,l),b.url===j&&(f&&(k=k.replace(bU,l)),b.data===k&&(j+=(/\?/.test(j)?"&":"?")+b.jsonp+"="+h))),b.url=j,b.data=k,a[h]=function(a){g=[a]},e.then(m,m),b.converters["script json"]=function(){g||d.error(h+" was not called");return g[0]},b.dataTypes[0]="json";return"script"}}),d.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/javascript|ecmascript/},converters:{"text script":function(a){d.globalEval(a);return a}}}),d.ajaxPrefilter("script",function(a){a.cache===b&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),d.ajaxTransport("script",function(a){if(a.crossDomain){var d,e=c.head||c.getElementsByTagName("head")[0]||c.documentElement;return{send:function(f,g){d=c.createElement("script"),d.async="async",a.scriptCharset&&(d.charset=a.scriptCharset),d.src=a.url,d.onload=d.onreadystatechange=function(a,c){if(!d.readyState||/loaded|complete/.test(d.readyState))d.onload=d.onreadystatechange=null,e&&d.parentNode&&e.removeChild(d),d=b,c||g(200,"success")},e.insertBefore(d,e.firstChild)},abort:function(){d&&d.onload(0,1)}}}});var bV=d.now(),bW,bX;d.ajaxSettings.xhr=a.ActiveXObject?function(){return!this.isLocal&&bZ()||b$()}:bZ,bX=d.ajaxSettings.xhr(),d.support.ajax=!!bX,d.support.cors=bX&&"withCredentials"in bX,bX=b,d.support.ajax&&d.ajaxTransport(function(a){if(!a.crossDomain||d.support.cors){var c;return{send:function(e,f){var g=a.xhr(),h,i;a.username?g.open(a.type,a.url,a.async,a.username,a.password):g.open(a.type,a.url,a.async);if(a.xhrFields)for(i in a.xhrFields)g[i]=a.xhrFields[i];a.mimeType&&g.overrideMimeType&&g.overrideMimeType(a.mimeType),!a.crossDomain&&!e["X-Requested-With"]&&(e["X-Requested-With"]="XMLHttpRequest");try{for(i in e)g.setRequestHeader(i,e[i])}catch(j){}g.send(a.hasContent&&a.data||null),c=function(e,i){var j,k,l,m,n;try{if(c&&(i||g.readyState===4)){c=b,h&&(g.onreadystatechange=d.noop,delete bW[h]);if(i)g.readyState!==4&&g.abort();else{j=g.status,l=g.getAllResponseHeaders(),m={},n=g.responseXML,n&&n.documentElement&&(m.xml=n),m.text=g.responseText;try{k=g.statusText}catch(o){k=""}j||!a.isLocal||a.crossDomain?j===1223&&(j=204):j=m.text?200:404}}}catch(p){i||f(-1,p)}m&&f(j,k,m,l)},a.async&&g.readyState!==4?(bW||(bW={},bY()),h=bV++,g.onreadystatechange=bW[h]=c):c()},abort:function(){c&&c(0,1)}}}});var b_={},ca=/^(?:toggle|show|hide)$/,cb=/^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i,cc,cd=[["height","marginTop","marginBottom","paddingTop","paddingBottom"],["width","marginLeft","marginRight","paddingLeft","paddingRight"],["opacity"]];d.fn.extend({show:function(a,b,c){var e,f;if(a||a===0)return this.animate(ce("show",3),a,b,c);for(var g=0,h=this.length;g<h;g++)e=this[g],f=e.style.display,!d._data(e,"olddisplay")&&f==="none"&&(f=e.style.display=""),f===""&&d.css(e,"display")==="none"&&d._data(e,"olddisplay",cf(e.nodeName));for(g=0;g<h;g++){e=this[g],f=e.style.display;if(f===""||f==="none")e.style.display=d._data(e,"olddisplay")||""}return this},hide:function(a,b,c){if(a||a===0)return this.animate(ce("hide",3),a,b,c);for(var e=0,f=this.length;e<f;e++){var g=d.css(this[e],"display");g!=="none"&&!d._data(this[e],"olddisplay")&&d._data(this[e],"olddisplay",g)}for(e=0;e<f;e++)this[e].style.display="none";return this},_toggle:d.fn.toggle,toggle:function(a,b,c){var e=typeof a==="boolean";d.isFunction(a)&&d.isFunction(b)?this._toggle.apply(this,arguments):a==null||e?this.each(function(){var b=e?a:d(this).is(":hidden");d(this)[b?"show":"hide"]()}):this.animate(ce("toggle",3),a,b,c);return this},fadeTo:function(a,b,c,d){return this.filter(":hidden").css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,e){var f=d.speed(b,c,e);if(d.isEmptyObject(a))return this.each(f.complete);return this[f.queue===!1?"each":"queue"](function(){var b=d.extend({},f),c,e=this.nodeType===1,g=e&&d(this).is(":hidden"),h=this;for(c in a){var i=d.camelCase(c);c!==i&&(a[i]=a[c],delete a[c],c=i);if(a[c]==="hide"&&g||a[c]==="show"&&!g)return b.complete.call(this);if(e&&(c==="height"||c==="width")){b.overflow=[this.style.overflow,this.style.overflowX,this.style.overflowY];if(d.css(this,"display")==="inline"&&d.css(this,"float")==="none")if(d.support.inlineBlockNeedsLayout){var j=cf(this.nodeName);j==="inline"?this.style.display="inline-block":(this.style.display="inline",this.style.zoom=1)}else this.style.display="inline-block"}d.isArray(a[c])&&((b.specialEasing=b.specialEasing||{})[c]=a[c][1],a[c]=a[c][0])}b.overflow!=null&&(this.style.overflow="hidden"),b.curAnim=d.extend({},a),d.each(a,function(c,e){var f=new d.fx(h,b,c);if(ca.test(e))f[e==="toggle"?g?"show":"hide":e](a);else{var i=cb.exec(e),j=f.cur();if(i){var k=parseFloat(i[2]),l=i[3]||(d.cssNumber[c]?"":"px");l!=="px"&&(d.style(h,c,(k||1)+l),j=(k||1)/f.cur()*j,d.style(h,c,j+l)),i[1]&&(k=(i[1]==="-="?-1:1)*k+j),f.custom(j,k,l)}else f.custom(j,e,"")}});return!0})},stop:function(a,b){var c=d.timers;a&&this.queue([]),this.each(function(){for(var a=c.length-1;a>=0;a--)c[a].elem===this&&(b&&c[a](!0),c.splice(a,1))}),b||this.dequeue();return this}}),d.each({slideDown:ce("show",1),slideUp:ce("hide",1),slideToggle:ce("toggle",1),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){d.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),d.extend({speed:function(a,b,c){var e=a&&typeof a==="object"?d.extend({},a):{complete:c||!c&&b||d.isFunction(a)&&a,duration:a,easing:c&&b||b&&!d.isFunction(b)&&b};e.duration=d.fx.off?0:typeof e.duration==="number"?e.duration:e.duration in d.fx.speeds?d.fx.speeds[e.duration]:d.fx.speeds._default,e.old=e.complete,e.complete=function(){e.queue!==!1&&d(this).dequeue(),d.isFunction(e.old)&&e.old.call(this)};return e},easing:{linear:function(a,b,c,d){return c+d*a},swing:function(a,b,c,d){return(-Math.cos(a*Math.PI)/2+.5)*d+c}},timers:[],fx:function(a,b,c){this.options=b,this.elem=a,this.prop=c,b.orig||(b.orig={})}}),d.fx.prototype={update:function(){this.options.step&&this.options.step.call(this.elem,this.now,this),(d.fx.step[this.prop]||d.fx.step._default)(this)},cur:function(){if(this.elem[this.prop]!=null&&(!this.elem.style||this.elem.style[this.prop]==null))return this.elem[this.prop];var a,b=d.css(this.elem,this.prop);return isNaN(a=parseFloat(b))?!b||b==="auto"?0:b:a},custom:function(a,b,c){function g(a){return e.step(a)}var e=this,f=d.fx;this.startTime=d.now(),this.start=a,this.end=b,this.unit=c||this.unit||(d.cssNumber[this.prop]?"":"px"),this.now=this.start,this.pos=this.state=0,g.elem=this.elem,g()&&d.timers.push(g)&&!cc&&(cc=setInterval(f.tick,f.interval))},show:function(){this.options.orig[this.prop]=d.style(this.elem,this.prop),this.options.show=!0,this.custom(this.prop==="width"||this.prop==="height"?1:0,this.cur()),d(this.elem).show()},hide:function(){this.options.orig[this.prop]=d.style(this.elem,this.prop),this.options.hide=!0,this.custom(this.cur(),0)},step:function(a){var b=d.now(),c=!0;if(a||b>=this.options.duration+this.startTime){this.now=this.end,this.pos=this.state=1,this.update(),this.options.curAnim[this.prop]=!0;for(var e in this.options.curAnim)this.options.curAnim[e]!==!0&&(c=!1);if(c){if(this.options.overflow!=null&&!d.support.shrinkWrapBlocks){var f=this.elem,g=this.options;d.each(["","X","Y"],function(a,b){f.style["overflow"+b]=g.overflow[a]})}this.options.hide&&d(this.elem).hide();if(this.options.hide||this.options.show)for(var h in this.options.curAnim)d.style(this.elem,h,this.options.orig[h]);this.options.complete.call(this.elem)}return!1}var i=b-this.startTime;this.state=i/this.options.duration;var j=this.options.specialEasing&&this.options.specialEasing[this.prop],k=this.options.easing||(d.easing.swing?"swing":"linear");this.pos=d.easing[j||k](this.state,i,0,1,this.options.duration),this.now=this.start+(this.end-this.start)*this.pos,this.update();return!0}},d.extend(d.fx,{tick:function(){var a=d.timers;for(var b=0;b<a.length;b++)a[b]()||a.splice(b--,1);a.length||d.fx.stop()},interval:13,stop:function(){clearInterval(cc),cc=null},speeds:{slow:600,fast:200,_default:400},step:{opacity:function(a){d.style(a.elem,"opacity",a.now)},_default:function(a){a.elem.style&&a.elem.style[a.prop]!=null?a.elem.style[a.prop]=(a.prop==="width"||a.prop==="height"?Math.max(0,a.now):a.now)+a.unit:a.elem[a.prop]=a.now}}}),d.expr&&d.expr.filters&&(d.expr.filters.animated=function(a){return d.grep(d.timers,function(b){return a===b.elem}).length});var cg=/^t(?:able|d|h)$/i,ch=/^(?:body|html)$/i;"getBoundingClientRect"in c.documentElement?d.fn.offset=function(a){var b=this[0],c;if(a)return this.each(function(b){d.offset.setOffset(this,a,b)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return d.offset.bodyOffset(b);try{c=b.getBoundingClientRect()}catch(e){}var f=b.ownerDocument,g=f.documentElement;if(!c||!d.contains(g,b))return c?{top:c.top,left:c.left}:{top:0,left:0};var h=f.body,i=ci(f),j=g.clientTop||h.clientTop||0,k=g.clientLeft||h.clientLeft||0,l=i.pageYOffset||d.support.boxModel&&g.scrollTop||h.scrollTop,m=i.pageXOffset||d.support.boxModel&&g.scrollLeft||h.scrollLeft,n=c.top+l-j,o=c.left+m-k;return{top:n,left:o}}:d.fn.offset=function(a){var b=this[0];if(a)return this.each(function(b){d.offset.setOffset(this,a,b)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return d.offset.bodyOffset(b);d.offset.initialize();var c,e=b.offsetParent,f=b,g=b.ownerDocument,h=g.documentElement,i=g.body,j=g.defaultView,k=j?j.getComputedStyle(b,null):b.currentStyle,l=b.offsetTop,m=b.offsetLeft;while((b=b.parentNode)&&b!==i&&b!==h){if(d.offset.supportsFixedPosition&&k.position==="fixed")break;c=j?j.getComputedStyle(b,null):b.currentStyle,l-=b.scrollTop,m-=b.scrollLeft,b===e&&(l+=b.offsetTop,m+=b.offsetLeft,d.offset.doesNotAddBorder&&(!d.offset.doesAddBorderForTableAndCells||!cg.test(b.nodeName))&&(l+=parseFloat(c.borderTopWidth)||0,m+=parseFloat(c.borderLeftWidth)||0),f=e,e=b.offsetParent),d.offset.subtractsBorderForOverflowNotVisible&&c.overflow!=="visible"&&(l+=parseFloat(c.borderTopWidth)||0,m+=parseFloat(c.borderLeftWidth)||0),k=c}if(k.position==="relative"||k.position==="static")l+=i.offsetTop,m+=i.offsetLeft;d.offset.supportsFixedPosition&&k.position==="fixed"&&(l+=Math.max(h.scrollTop,i.scrollTop),m+=Math.max(h.scrollLeft,i.scrollLeft));return{top:l,left:m}},d.offset={initialize:function(){var a=c.body,b=c.createElement("div"),e,f,g,h,i=parseFloat(d.css(a,"marginTop"))||0,j="<div style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;'><div></div></div><table style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;' cellpadding='0' cellspacing='0'><tr><td></td></tr></table>";d.extend(b.style,{position:"absolute",top:0,left:0,margin:0,border:0,width:"1px",height:"1px",visibility:"hidden"}),b.innerHTML=j,a.insertBefore(b,a.firstChild),e=b.firstChild,f=e.firstChild,h=e.nextSibling.firstChild.firstChild,this.doesNotAddBorder=f.offsetTop!==5,this.doesAddBorderForTableAndCells=h.offsetTop===5,f.style.position="fixed",f.style.top="20px",this.supportsFixedPosition=f.offsetTop===20||f.offsetTop===15,f.style.position=f.style.top="",e.style.overflow="hidden",e.style.position="relative",this.subtractsBorderForOverflowNotVisible=f.offsetTop===-5,this.doesNotIncludeMarginInBodyOffset=a.offsetTop!==i,a.removeChild(b),d.offset.initialize=d.noop},bodyOffset:function(a){var b=a.offsetTop,c=a.offsetLeft;d.offset.initialize(),d.offset.doesNotIncludeMarginInBodyOffset&&(b+=parseFloat(d.css(a,"marginTop"))||0,c+=parseFloat(d.css(a,"marginLeft"))||0);return{top:b,left:c}},setOffset:function(a,b,c){var e=d.css(a,"position");e==="static"&&(a.style.position="relative");var f=d(a),g=f.offset(),h=d.css(a,"top"),i=d.css(a,"left"),j=(e==="absolute"||e==="fixed")&&d.inArray("auto",[h,i])>-1,k={},l={},m,n;j&&(l=f.position()),m=j?l.top:parseInt(h,10)||0,n=j?l.left:parseInt(i,10)||0,d.isFunction(b)&&(b=b.call(a,c,g)),b.top!=null&&(k.top=b.top-g.top+m),b.left!=null&&(k.left=b.left-g.left+n),"using"in b?b.using.call(a,k):f.css(k)}},d.fn.extend({position:function(){if(!this[0])return null;var a=this[0],b=this.offsetParent(),c=this.offset(),e=ch.test(b[0].nodeName)?{top:0,left:0}:b.offset();c.top-=parseFloat(d.css(a,"marginTop"))||0,c.left-=parseFloat(d.css(a,"marginLeft"))||0,e.top+=parseFloat(d.css(b[0],"borderTopWidth"))||0,e.left+=parseFloat(d.css(b[0],"borderLeftWidth"))||0;return{top:c.top-e.top,left:c.left-e.left}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||c.body;while(a&&(!ch.test(a.nodeName)&&d.css(a,"position")==="static"))a=a.offsetParent;return a})}}),d.each(["Left","Top"],function(a,c){var e="scroll"+c;d.fn[e]=function(c){var f=this[0],g;if(!f)return null;if(c!==b)return this.each(function(){g=ci(this),g?g.scrollTo(a?d(g).scrollLeft():c,a?c:d(g).scrollTop()):this[e]=c});g=ci(f);return g?"pageXOffset"in g?g[a?"pageYOffset":"pageXOffset"]:d.support.boxModel&&g.document.documentElement[e]||g.document.body[e]:f[e]}}),d.each(["Height","Width"],function(a,c){var e=c.toLowerCase();d.fn["inner"+c]=function(){return this[0]?parseFloat(d.css(this[0],e,"padding")):null},d.fn["outer"+c]=function(a){return this[0]?parseFloat(d.css(this[0],e,a?"margin":"border")):null},d.fn[e]=function(a){var f=this[0];if(!f)return a==null?null:this;if(d.isFunction(a))return this.each(function(b){var c=d(this);c[e](a.call(this,b,c[e]()))});if(d.isWindow(f)){var g=f.document.documentElement["client"+c];return f.document.compatMode==="CSS1Compat"&&g||f.document.body["client"+c]||g}if(f.nodeType===9)return Math.max(f.documentElement["client"+c],f.body["scroll"+c],f.documentElement["scroll"+c],f.body["offset"+c],f.documentElement["offset"+c]);if(a===b){var h=d.css(f,e),i=parseFloat(h);return d.isNaN(i)?h:i}return this.css(e,typeof a==="string"?a:a+"px")}}),a.jQuery=a.$=d})(window);
</script>
<script >
$('#cover .status').text('loading precompiled caterwaul');
</script>

<script>
(function(f){return f(f)})(function(initializer,key,undefined){(function(f){return f(f)})(function(initializer){var calls_init=function(){var f=function(){return f.init.apply(f,arguments)
};return f},original_global=typeof caterwaul==="undefined"?undefined:caterwaul,caterwaul_global=calls_init();caterwaul_global.deglobalize=function(){caterwaul=original_global;
return caterwaul_global};caterwaul_global.core_initializer=initializer;caterwaul_global.context=this;caterwaul_global.merge=(function(o){for(var k in o){if(o.hasOwnProperty(k)){return true
}}})({toString:true})?function(o){for(var i=1,l=arguments.length,_;i<l;++i){if(_=arguments[i]){for(var k in _){if(has(_,k)){o[k]=_[k]}}}}return o}:function(o){for(var i=1,l=arguments.length,_;
i<l;++i){if(_=arguments[i]){for(var k in _){if(has(_,k)){o[k]=_[k]}}if(_.toString&&!/\[native code\]/.test(_.toString.toString())){o.toString=_.toString}}}return o
},caterwaul_global.modules=[];caterwaul_global.module=function(name,transform,f){if(arguments.length===1){return caterwaul_global[name+"_initializer"]}name+"_initializer" in caterwaul_global||caterwaul_global.modules.push(name);
f||(f=transform,transform=null);(caterwaul_global[name+"_initializer"]=transform?caterwaul_global(transform)(f):f)(caterwaul_global);return caterwaul_global};return caterwaul=caterwaul_global
});var qw=function(x){return x.split(/\s+/)},se=function(x,f){return f&&f.call(x,x)||x},fail=function(m){throw new Error(m)},unique=key||(function(){for(var xs=[],d="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789$_",i=21,n;
i>=0;--i){xs.push(d.charAt(Math.random()*64>>>0))}return xs.join("")})(),gensym=(function(c){return function(name){return[name||"",(++c).toString(36),unique].join("_")
}})(0),is_gensym=function(s){return s.substr(s.length-22)===unique},bind=function(f,t){return function(){return f.apply(t,arguments)}},map=function(f,xs){for(var i=0,ys=[],l=xs.length;
i<l;++i){ys.push(f(xs[i],i))}return ys},rmap=function(f,xs){return map(function(x){return x instanceof Array?rmap(f,x):f(x)})},hash=function(s){for(var i=0,xs=qw(s),o={},l=xs.length;
i<l;++i){o[xs[i]]=true}return annotate_keys(o)},max_length_key=gensym("hash"),annotate_keys=function(o){var max=0;for(var k in o){own.call(o,k)&&(max=k.length>max?k.length:max)
}o[max_length_key]=max;return o},has=function(o,p){return p!=null&&!(p.length>o[max_length_key])&&own.call(o,p)},own=Object.prototype.hasOwnProperty,caterwaul_global=caterwaul.merge(caterwaul,{map:map,rmap:rmap,gensym:gensym,is_gensym:is_gensym,gensym_entropy:function(){return unique
}}),lex_op=hash(". new ++ -- u++ u-- u+ u- typeof void u~ u! ! * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || ? = += -= *= /= %= &= |= ^= <<= >>= >>>= : , return throw case var const break continue else u; ;"),lex_table=function(s){for(var i=0,xs=[false];
i<8;++i){xs.push.apply(xs,xs)}for(var i=0,l=s.length;i<l;++i){xs[s.charCodeAt(i)]=true}return xs},lex_float=lex_table(".0123456789"),lex_decimal=lex_table("0123456789"),lex_integer=lex_table("0123456789abcdefABCDEFx"),lex_exp=lex_table("eE"),lex_space=lex_table(" \n\r\t"),lex_bracket=lex_table("()[]{}?:"),lex_opener=lex_table("([{?:"),lex_punct=lex_table("+-*/%&|^!~=<>?:;.,"),lex_eol=lex_table("\n\r"),lex_regexp_suffix=lex_table("gims"),lex_quote=lex_table("'\"/"),lex_slash="/".charCodeAt(0),lex_zero="0".charCodeAt(0),lex_postfix_unary=hash("++ --"),lex_ident=lex_table("@$_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"),lex_star="*".charCodeAt(0),lex_back="\\".charCodeAt(0),lex_x="x".charCodeAt(0),lex_dot=".".charCodeAt(0),lex_hash="#".charCodeAt(0),parse_reduce_order=map(hash,["function","( [ . [] ()","new delete void","u++ u-- ++ -- typeof u~ u! u+ u-","* / %","+ -","<< >> >>>","< > <= >= instanceof in","== != === !==","::",":::","&","^","|","&&","||","-> =>","case","? = += -= *= /= %= &= |= ^= <<= >>= >>>= &&= ||=",":",",","return throw break continue","var const","if else try catch finally for switch with while do",";"]),parse_associates_right=hash("= += -= *= /= %= &= ^= |= <<= >>= >>>= &&= ||= :: ::: -> => ~ ! new typeof void u+ u- -- ++ u-- u++ ? if else function try catch finally for switch case with while do"),parse_inverse_order=(function(xs){for(var o={},i=0,l=xs.length;
i<l;++i){for(var k in xs[i]){has(xs[i],k)&&(o[k]=i)}}return annotate_keys(o)})(parse_reduce_order),parse_index_forward=(function(rs){for(var xs=[],i=0,l=rs.length,_=null;
_=rs[i],xs[i]=true,i<l;++i){for(var k in _){if(has(_,k)&&(xs[i]=xs[i]&&!has(parse_associates_right,k))){break}}}return xs})(parse_reduce_order),parse_lr=hash("[] . () * / % + - << >> >>> < > <= >= instanceof in == != === !== & ^ | && || -> => = += -= *= /= %= &= |= ^= <<= >>= >>>= &&= ||= , : ;"),parse_r_until_block=annotate_keys({"function":2,"if":1,"do":1,"catch":1,"try":1,"for":1,"while":1,"with":1,"switch":1}),parse_accepts=annotate_keys({"if":"else","do":"while","catch":"finally","try":"catch"}),parse_invocation=hash("[] ()"),parse_r_optional=hash("return throw break continue else"),parse_r=hash("u+ u- u! u~ u++ u-- new typeof finally case var const void delete"),parse_block=hash("; {"),parse_invisible=hash("i;"),parse_l=hash("++ --"),parse_group=annotate_keys({"(":")","[":"]","{":"}","?":":"}),parse_ambiguous_group=hash("[ ("),parse_ternary=hash("?"),parse_not_a_value=hash("function if for while with catch void delete new typeof in instanceof"),parse_also_expression=hash("function"),parse_misleading_postfix=hash(":"),syntax_common=caterwaul_global.syntax_common={_replace:function(n){return(n.l=this.l)&&(this.l.r=n),(n.r=this.r)&&(this.r.l=n),this
},_append_to:function(n){return n&&n._append(this),this},_reparent:function(n){return this.p&&this.p[0]===this&&(this.p[0]=n),this},_fold_l:function(n){return this._append(this.l&&this.l._unlink(this)||empty)
},_append:function(n){return(this[this.length++]=n)&&(n.p=this),this},_fold_r:function(n){return this._append(this.r&&this.r._unlink(this)||empty)},_sibling:function(n){return n.p=this.p,(this.r=n).l=this
},_fold_lr:function(){return this._fold_l()._fold_r()},_fold_rr:function(){return this._fold_r()._fold_r()},_wrap:function(n){return n.p=this._replace(n).p,this._reparent(n),delete this.l,delete this.r,this._append_to(n)
},_unlink:function(n){return this.l&&(this.l.r=this.r),this.r&&(this.r.l=this.l),delete this.l,delete this.r,this._reparent(n)},pop:function(){return --this.length,this
},push:function(x){return this[this.length++]=caterwaul_global.syntax.promote(x||empty),this},id:function(){var id=gensym("id");return(this.id=function(){return id
})()},is_caterwaul_syntax:true,each:function(f){for(var i=0,l=this.length;i<l;++i){f(this[i],i)}return this},map:function(f){for(var n=new this.constructor(this),i=0,l=this.length;
i<l;++i){n.push(f(this[i],i)||this[i])}return n},reach:function(f){f(this);for(var i=0,l=this.length;i<l;++i){this[i].reach(f)}return this},rmap:function(f){var r=f(this);
return !r||r===this?this.map(function(n){return n.rmap(f)}):r===true?this:r.rmap===undefined?new this.constructor(r):r},peach:function(f){for(var i=0,l=this.length;
i<l;++i){this[i].peach(f)}f(this);return this},pmap:function(f){var t=this.map(function(n){return n.pmap(f)});return f(t)},clone:function(){return this.rmap(function(){return false
})},collect:function(p){var ns=[];this.reach(function(n){p(n)&&ns.push(n)});return ns},replace:function(rs){var r;return own.call(rs,this.data)&&(r=rs[this.data])?r.constructor===String?se(this.map(function(n){return n.replace(rs)
}),function(){this.data=r}):r:this.map(function(n){return n.replace(rs)})},repopulated_with:function(xs){return new this.constructor(this.data,xs)},with_data:function(d){return new this.constructor(d,Array.prototype.slice.call(this))
},change:function(i,x){return se(new this.constructor(this.data,Array.prototype.slice.call(this)),function(n){n[i]=x})},compose_single:function(i,f){return this.change(i,f(this[i]))
},slice:function(x1,x2){return new this.constructor(this.data,Array.prototype.slice.call(this,x1,x2))},traverse:function(f){f({entering:this});f({exiting:this.each(function(n){n.traverse(f)
})});return this},flatten:function(d){d=d||this.data;return d!==this.data?this.as(d):!(has(parse_lr,d)&&this.length)?this:has(parse_associates_right,d)?se(new this.constructor(d),bind(function(n){for(var i=this;
i&&i.data===d;i=i[1]){n.push(i[0])}n.push(i)},this)):se(new this.constructor(d),bind(function(n){for(var i=this,ns=[];i.data===d;i=i[0]){i[1]&&ns.push(i[1])}ns.push(i);
for(i=ns.length-1;i>=0;--i){n.push(ns[i])}},this))},unflatten:function(){var t=this,right=has(parse_associates_right,this.data);return this.length<=2?this:se(new this.constructor(this.data),function(n){if(right){for(var i=0,l=t.length-1;
i<l;++i){n=n.push(t[i]).push(i<l-2?t.data:t[i])[1]}}else{for(var i=t.length-1;i>=1;--i){n=n.push(i>1?t.data:t[0]).push(t[i])[0]}}})},as:function(d){return this.data===d?this:new caterwaul_global.syntax(d).push(this)
},bindings:function(hash){var result=hash||{};this.reach(function(n){n.add_bindings_to(result)});return result},expressions:function(hash){var result=hash||{};this.reach(function(n){n.add_expressions_to(result)
});return result},add_bindings_to:function(hash){},add_expressions_to:function(hash){},resolve:function(){return this},reduce:function(){return this},prefix:function(d){return this.prefixes().push(d),this
},prefixes:function(){return this.prefix_data||(this.prefix_data=[])},infix:function(d){return this.infixes().push(d),this},infixes:function(){return this.infix_data||(this.infix_data=[])
},suffix:function(d){return this.suffixes().push(d),this},suffixes:function(){return this.suffix_data||(this.suffix_data=[])},contains:function(f){var result=f(this);
if(result){return result}for(var i=0,l=this.length;i<l;++i){if(result=this[i].contains(f)){return result}}},match:function(target,variables){target=target.constructor===String?caterwaul_global.parse(target):target;
variables||(variables={_:target});if(this.is_wildcard()&&(!this.leaf_nodes_only()||!this.length)){return variables[this.without_metadata()]=target,variables}else{if(this.length===target.length&&this.data===target.data){for(var i=0,l=this.length;
i<l;++i){if(!this[i].match(target[i],variables)){return null}}return variables}}},toString:function(depth){var xs=[""];this.serialize(xs,depth||-1);return xs.join("")
},structure:function(){if(this.length){return"("+['"'+this.data+'"'].concat(map(function(x){return x.structure()},this)).join(" ")+")"}else{return this.data}}};caterwaul_global.syntax_subclasses=[];
caterwaul_global.syntax_subclass=function(ctor){var extensions=Array.prototype.slice.call(arguments,1),proxy=function(){return ctor.apply(this,arguments)};caterwaul_global.merge.apply(this,[proxy.prototype,syntax_common].concat(extensions));
caterwaul_global.syntax_subclasses.push(proxy);proxy.prototype.constructor=proxy;return proxy};caterwaul_global.syntax_extend=function(){for(var i=0,l=caterwaul_global.syntax_subclasses.length,es=Array.prototype.slice.call(arguments);
i<l;++i){caterwaul_global.merge.apply(this,[caterwaul_global.syntax_subclasses[i].prototype].concat(es))}caterwaul_global.merge.apply(this,[syntax_common].concat(es));
return caterwaul_global};var parse_hex=caterwaul_global.parse_hex=function(digits){for(var result=0,i=0,l=digits.length,d;i<l;++i){result*=16,result+=(d=digits.charCodeAt(i))<=58?d-48:(d&95)-55
}return result},parse_octal=caterwaul_global.parse_octal=function(digits){for(var result=0,i=0,l=digits.length;i<l;++i){result*=8,result+=digits.charCodeAt(i)-48
}return result},unescape_string=caterwaul_global.unescape_string=function(s){for(var i=0,c,l=s.length,result=[],is_escaped=false;i<l;++i){if(is_escaped){is_escaped=false,result.push((c=s.charAt(i))==="\\"?"\\":c==="n"?"\n":c==="r"?"\r":c==="b"?"\b":c==="f"?"\f":c==="0"?"\u0000":c==="t"?"\t":c==="v"?"\v":c==='"'||c==="'"?c:c==="x"?String.fromCharCode(parse_hex(s.substring(i,++i+1))):c==="u"?String.fromCharCode(parse_hex(s.substring(i,(i+=3)+1))):String.fromCharCode(parse_octal(s.substring(i,(i+=2)+1))))
}else{if((c=s.charAt(i))==="\\"){is_escaped=true}else{result.push(c)}}}return result.join("")};caterwaul_global.javascript_tree_type_methods={is_string:function(){return/['"]/.test(this.data.charAt(0))
},as_escaped_string:function(){return this.data.substr(1,this.data.length-2)},is_number:function(){return/^-?(0x|\d|\.\d+)/.test(this.data)},as_number:function(){return Number(this.data)
},is_boolean:function(){return this.data==="true"||this.data==="false"},as_boolean:function(){return this.data==="true"},is_regexp:function(){return/^\/./.test(this.data)
},as_escaped_regexp:function(){return this.data.substring(1,this.data.lastIndexOf("/"))},is_array:function(){return this.data==="["},as_unescaped_string:function(){return unescape_string(this.as_escaped_string())
},could_be_identifier:function(){return/^[A-Za-z_$@][A-Za-z0-9$_@]*$/.test(this.data)},is_identifier:function(){return this.length===0&&this.could_be_identifier()&&!this.is_boolean()&&!this.is_null_or_undefined()&&!has(lex_op,this.data)
},has_grouped_block:function(){return has(parse_r_until_block,this.data)},is_block:function(){return has(parse_block,this.data)},is_blockless_keyword:function(){return has(parse_r_optional,this.data)
},is_null_or_undefined:function(){return this.data==="null"||this.data==="undefined"},is_constant:function(){return this.is_number()||this.is_string()||this.is_boolean()||this.is_regexp()||this.is_null_or_undefined()
},left_is_lvalue:function(){return/=$/.test(this.data)||/\+\+$/.test(this.data)||/--$/.test(this.data)},is_empty:function(){return !this.length},has_parameter_list:function(){return this.data==="function"||this.data==="catch"
},has_lvalue_list:function(){return this.data==="var"||this.data==="const"},is_dereference:function(){return this.data==="."||this.data==="[]"},is_invocation:function(){return this.data==="()"
},is_contextualized_invocation:function(){return this.is_invocation()&&this[0].is_dereference()},is_invisible:function(){return has(parse_invisible,this.data)},is_binary_operator:function(){return has(parse_lr,this.data)
},is_prefix_unary_operator:function(){return has(parse_r,this.data)},is_postfix_unary_operator:function(){return has(parse_l,this.data)},is_unary_operator:function(){return this.is_prefix_unary_operator()||this.is_postfix_unary_operator()
},precedence:function(){return parse_inverse_order[this.data]},is_right_associative:function(){return has(parse_associates_right,this.data)},is_associative:function(){return/^[,;]$/.test(this.data)
},is_group:function(){return/^[(\[{][)\]]?$/.test(this.data)},accepts:function(e){return has(parse_accepts,this.data)&&parse_accepts[this.data]===(e.data||e)}};caterwaul_global.javascript_tree_metadata_methods={could_have_metadata:function(){return this.could_be_identifier()
},without_metadata:function(){return this.data.replace(/@.*$/g,"")},is_wildcard:function(){return this.data.charCodeAt(0)===95},leaf_nodes_only:function(){return/@0/.test(this.data)
},is_opaque:function(){return this.data.charCodeAt(0)===64}};caterwaul_global.javascript_tree_serialization_methods={ends_with_block:function(){var block=this[this.length-1];
if(block&&block.data===parse_accepts[this.data]){block=block[0]}return this.data==="{"||has(parse_r_until_block,this.data)&&(this.data!=="function"||this.length===3)&&block&&block.ends_with_block()
},never_guarded:function(){return this.is_group()||this.precedence()>parse_inverse_order[","]},guarded:function(p){var this_p=this.never_guarded()?undefined:this.precedence(),associative=this.is_associative(),right=this.is_right_associative(),result=this.map(function(x,i){return x.guarded(this_p-(!associative&&!right&&!!i))
});return this_p>p?result.as("("):result},serialize:function(xs,depth){var l=this.length,d=this.data,d1=depth-1,e=function(x){xs.push(x)},p=this.prefix_data?this.prefix_data.join(""):" ",i=this.infix_data?this.infix_data.join(""):"",s=this.suffix_data?this.suffix_data.join(""):"";
if(l&&depth===0){return e("...")}switch(l){case 0:if(has(parse_r_optional,d)){return e(p),e(d.replace(/^u/,"")),e(s)}else{if(has(parse_group,d)){return e(p),e(d),e(i),e(parse_group[d]),e(s)
}else{return e(p),e(d),e(s)}}case 1:if(has(parse_r,d)||has(parse_r_optional,d)){return e(p),e(d.replace(/^u/,"")),this[0].serialize(xs,d1),e(s)}else{if(has(parse_misleading_postfix,d)){return this[0].serialize(xs,d1),e(p),e(d),e(s)
}else{if(has(parse_group,d)){return e(p),e(d),this[0].serialize(xs,d1),e(i),e(parse_group[d]),e(s)}else{if(has(parse_lr,d)){return e(p),this[0].serialize(xs,d1),e(s)
}else{return this[0].serialize(xs,d1),e(p),e(d),e(s)}}}}case 2:if(has(parse_invocation,d)){return this[0].serialize(xs,d1),e(p),e(d.charAt(0)),this[1].serialize(xs,d1),e(i),e(d.charAt(1)),e(s)
}else{if(has(parse_r_until_block,d)){return e(p),e(d),this[0].serialize(xs,d1),this[1].serialize(xs,d1),e(s)}else{if(has(parse_invisible,d)){return this[0].serialize(xs,d1),this[1].serialize(xs,d1),e(s)
}else{if(d===";"){return this[0].serialize(xs,d1),e(p),e(";"),this[1].serialize(xs,d1),e(s)}else{return this[0].serialize(xs,d1),e(p),e(d),this[1].serialize(xs,d1),e(s)
}}}}default:if(has(parse_ternary,d)){return this[0].serialize(xs,d1),e(p),e(d),this[1].precedence()>this.precedence()?(this[1].as("(").serialize(xs,d1),e(i),e(":"),this[2].serialize(xs,d1),e(s)):(this[1].serialize(xs,d1),e(i),e(":"),this[2].serialize(xs,d1),e(s))
}else{if(has(parse_r_until_block,d)){return this.accepts(this[2])&&!this[1].ends_with_block()?(e(p),e(d),this[0].serialize(xs,d1),this[1].serialize(xs,d1),e(";"),this[2].serialize(xs,d1),e(s)):(e(p),e(d),this[0].serialize(xs,d1),this[1].serialize(xs,d1),this[2].serialize(xs,d1),e(s))
}else{return e(p),this.unflatten().serialize(xs,d1),e(s)}}}}};caterwaul_global.ref_common=caterwaul_global.merge({},caterwaul_global.javascript_tree_type_methods,caterwaul_global.javascript_tree_metadata_methods,caterwaul_global.javascript_tree_serialization_methods,{replace:function(replacements){var r;
return own.call(replacements,this.data)&&(r=replacements[this.data])?r.constructor===String?se(new this.constructor(this.value),function(){this.data=r}):r:this},length:0});
caterwaul_global.ref=caterwaul_global.syntax_subclass(function(value,name){if(value instanceof this.constructor){this.value=value.value,this.data=value.data}else{this.value=value,this.data=gensym(name&&name.constructor===String?name:"ref")
}},caterwaul_global.ref_common,{add_bindings_to:function(hash){hash[this.data]=this.value}});caterwaul_global.expression_ref=caterwaul_global.syntax_subclass(function(e,name){if(e instanceof this.constructor){this.e=e.e,this.data=e.data
}else{this.e=e,this.data=gensym(name&&name.constructor===String?name:"e")}},caterwaul_global.ref_common,{add_expressions_to:function(hash){hash[this.data]=this.e
}});caterwaul_global.metadata_node=caterwaul_global.syntax_subclass(function(d,name){if(d instanceof this.constructor){this.metadata=d.metadata,this.data=d.data}else{this.metadata=d,this.data="@"+(name||"")
}},caterwaul_global.ref_common);caterwaul_global.opaque_tree=caterwaul_global.syntax_subclass(function(code,expression_refs){if(code instanceof this.constructor){this.data=code.data,this.expression_refs=code.expression_refs
}else{this.data=code.toString(),this.expression_refs=expression_refs||code.caterwaul_expression_ref_table}var rs=this.expression_refs;for(var k in rs){own.call(rs,k)&&rs[k].constructor===String&&(rs[k]=new caterwaul_global.opaque_tree(rs[k]))
}},{resolve:function(){return this.expression_refs?caterwaul_global.late_bound_tree(new this.constructor(this.data),this.expression_refs):this},reduce:function(){return this.expression_refs?caterwaul_global.late_bound_tree(this.parse(),this.expression_refs):this.parse()
},guarded:function(){return this},serialize:function(xs){return xs.push(this.data),xs},parse:function(){return caterwaul_global.parse(this.data)}});caterwaul_global.syntax=se(caterwaul_global.syntax_subclass(function(data){if(data instanceof this.constructor){this.data=data.data,this.length=0
}else{this.data=data&&data.toString();this.length=0;for(var i=1,l=arguments.length,_;_=arguments[i],i<l;++i){for(var j=0,lj=_.length,it,c;_ instanceof Array?(it=_[j],j<lj):(it=_,!j);
++j){this._append(caterwaul_global.syntax.promote(it))}}}},caterwaul_global.javascript_tree_type_methods,caterwaul_global.javascript_tree_metadata_methods,caterwaul_global.javascript_tree_serialization_methods),function(){this.from_string=function(s){return new caterwaul_global.syntax('"'+s.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\n/g,"\\n")+'"')
};this.from_array=function(xs){for(var i=0,c=new caterwaul_global.syntax(","),l=xs.length;i<l;++i){c.push(xs[i])}return new caterwaul_global.syntax("[",c.length?c.unflatten():[])
};this.from_object=function(o){var comma=new caterwaul_global.syntax(",");for(var k in o){if(own.call(o,k)){comma.push(new caterwaul_global.syntax(":",/^[$_A-Za-z][A-Za-z0-9$_]*$/.test(k)?k:caterwaul_global.syntax.from_string(k),o[k].as("(")))
}}return new caterwaul_global.syntax("{",comma.length?comma.unflatten():[])}});caterwaul_global.syntax.promote=function(v){var c=v.constructor;return c===String||c===Number||c===Boolean?new caterwaul_global.syntax(v):v
};var empty=caterwaul_global.empty=new caterwaul_global.syntax("");caterwaul_global.parse=function(input){if(input==null){return input}if(input.constructor===caterwaul_global.syntax){return input
}var s=input.toString().replace(/^\s*|\s*$/g,""),mark=0,c=0,re=true,esc=false,dot=false,exp=false,close=0,t="",i=0,l=s.length,cs=function(i){return s.charCodeAt(i)
},grouping_stack=[],gs_top=null,head=null,parent=null,indexes=map(function(){return[]},parse_reduce_order),invocation_nodes=[],all_nodes=[empty],new_node=function(n){return all_nodes.push(n),n.prefix_data=shift_prefix(),n
},push=function(n){return head?head._sibling(head=n):(head=n._append_to(parent)),new_node(n)},syntax_node=this.syntax,groups=[],ternaries=[],prefix=[],shift_prefix=function(){var k=prefix;
prefix=[];return k};if(l===0){return empty}while((mark=i)<l){esc=exp=dot=t=0;if(lex_space[c=cs(i)]){while(++i<l&&lex_space[c=cs(i)]){}}else{if(lex_bracket[c]){++i,t=1,re=lex_opener[c]
}else{if(c===lex_slash&&cs(i+1)===lex_star&&(i+=2)){while(++i<l&&cs(i)!==lex_slash||cs(i-1)!==lex_star){}}else{if(c===lex_slash&&cs(i+1)===lex_slash){while(++i<l&&!lex_eol[cs(i)]){}}else{if(c===lex_hash){while(++i<l&&!lex_eol[cs(i)]){}}else{if(lex_quote[c]&&(close=c)&&re&&!(re=!(t=s.charAt(i)))){while(++i<l&&(c=cs(i))!==close||esc){esc=!esc&&c===lex_back
}while(++i<l&&lex_regexp_suffix[cs(i)]){}t=1}else{if(c===lex_zero&&lex_integer[cs(i+1)]){while(++i<l&&lex_integer[cs(i)]){}re=!(t=1)}else{if(lex_float[c]&&(c!==lex_dot||lex_decimal[cs(i+1)])){while(++i<l&&(lex_decimal[c=cs(i)]||(dot^(dot|=c===lex_dot))||(exp^(exp|=lex_exp[c]&&++i)))){}while(i<l&&lex_decimal[cs(i)]){++i
}re=!(t=1)}else{if(lex_punct[c]&&(t=re?"u":"",re=true)){while(i<l&&lex_punct[cs(i)]&&has(lex_op,t+s.charAt(i))){t+=s.charAt(i++)}re=!has(lex_postfix_unary,t)}else{while(++i<l&&(lex_ident[c=cs(i)]||c>127)){}re=has(lex_op,t=s.substring(mark,i))
}}}}}}}}}if(i===mark){throw new Error('Caterwaul lex error at "'+s.substr(mark,80)+'" with leading context "'+s.substr(mark-80,80)+'" (probably a Caterwaul bug)')
}if(t===0){prefix.push(s.substring(mark,i));continue}t=t===1?s.substring(mark,i):t==="u;"?";":t;t===gs_top?(grouping_stack.pop(),gs_top=grouping_stack[grouping_stack.length-1],(head||parent).infix_data=shift_prefix(),head=head?head.p:parent,parent=null):(has(parse_group,t)?(grouping_stack.push(gs_top=parse_group[t]),parent=push(new_node(new syntax_node(t))),groups.push(parent),head=null):push(new_node(new syntax_node(t))),has(parse_inverse_order,t)&&indexes[parse_inverse_order[t]].push(head||parent));
re|=t===")"&&head.l&&has(parse_r_until_block,head.l.data)}for(var i=0,l=indexes.length,forward,_;_=indexes[i],forward=parse_index_forward[i],i<l;++i){for(var j=forward?0:_.length-1,lj=_.length,inc=forward?1:-1,node,data,ll;
forward?j<lj:j>=0;j+=inc){if(has(parse_lr,data=(node=_[j]).data)){if(data===":"&&parse_inverse_order[node.r.data]>i){node._fold_l()}else{node._fold_lr()}}else{if(has(parse_ambiguous_group,data)&&node.l&&!((ll=node.l.l)&&has(parse_r_until_block,ll.data))&&(node.l.data==="."||(node.l.data==="function"&&node.l.length===2)||!(has(lex_op,node.l.data)||has(parse_not_a_value,node.l.data)))){invocation_nodes.push(node.l._wrap(new_node(new syntax_node(data+parse_group[data]))).p._fold_r())
}else{if(has(parse_l,data)){node._fold_l()}else{if(has(parse_r,data)){node._fold_r()}else{if(has(parse_ternary,data)){node._fold_lr(),ternaries.push(node)}else{if(has(parse_r_until_block,data)&&node.r&&node.r.data!==":"){for(var count=0,limit=parse_r_until_block[data];
count<limit&&node.r&&!has(parse_block,node.r.data);++count){node._fold_r()}node.r&&(node.r.data===";"?node.push(empty):node._fold_r());if(has(parse_accepts,data)&&parse_accepts[data]===(node.r&&node.r.r&&node.r.r.data)){node._fold_r().pop()._fold_r()
}else{if(has(parse_accepts,data)&&parse_accepts[data]===(node.r&&node.r.data)){node._fold_r()}}}else{if(has(parse_r_optional,data)){node.r&&node.r.data!==";"&&node._fold_r()
}}}}}}}}}for(var i=all_nodes.length-1,_;i>=0;--i){(_=all_nodes[i]).r&&_._wrap(new_node(new syntax_node("i;"))).p._fold_r()}for(var i=0,l=invocation_nodes.length,_,child;
i<l;++i){(child=(_=invocation_nodes[i])[1]=_[1][0]||empty)&&(child.p=_)}for(var i=0,l=groups.length,_;i<l;++i){(_=groups[i]).length||_.push(empty)}for(var i=0,l=ternaries.length,_,n,temp;
i<l;++i){n=(_=ternaries[i]).length,temp=_[0],_[0]=_[n-2],_[1]=temp,_[2]=_[n-1],_.length=3}while(head.p){head=head.p}for(var i=all_nodes.length-1,_;i>=0;--i){delete (_=all_nodes[i]).p,delete _.l,delete _.r
}head.suffix_data=prefix;return head};var bound_expression_template=caterwaul_global.parse("var _bindings; return(_expression)"),binding_template=caterwaul_global.parse("_variable = _base._variable"),undefined_binding=caterwaul_global.parse("undefined = void(0)"),late_bound_template=caterwaul_global.parse("(function (_bindings) {var _result=(_body);_result_init;return(_result)}).call(this, _expressions)"),late_bound_ref_table_template=caterwaul_global.parse("_result.caterwaul_expression_ref_table = _expression_ref_table");
caterwaul_global.compile=function(tree,environment,options){options=caterwaul_global.merge({gensym_renaming:true,transparent_errors:false,unbound_closure:false,guard:true},options);
tree=caterwaul_global.late_bound_tree(tree,null,options);if(options.guard){tree=tree.guarded()}var bindings=caterwaul_global.merge({},this._environment,environment,tree.bindings()),variables=[undefined_binding],s=gensym("base");
for(var k in bindings){if(own.call(bindings,k)&&k!=="this"){variables.push(binding_template.replace({_variable:k,_base:s}))}}var variable_definitions=new this.syntax(",",variables).unflatten(),function_body=bound_expression_template.replace({_bindings:variable_definitions,_expression:tree});
if(options.gensym_renaming){var renaming_table=this.gensym_rename_table(function_body);for(var k in bindings){own.call(bindings,k)&&(bindings[renaming_table[k]||k]=bindings[k])
}function_body=function_body.replace(renaming_table);s=renaming_table[s]}var code=function_body.toString(),closure=(function(){if(options.transparent_errors){return new Function(s,code)
}else{try{return new Function(s,code)}catch(e){throw new Error((e.message||e)+" while compiling "+code)}}})();return options.unbound_closure?closure:closure.call(bindings["this"],bindings)
};var trivial_node_template=caterwaul_global.parse("new caterwaul.syntax(_data)"),nontrivial_node_template=caterwaul_global.parse("new caterwaul.syntax(_data, _xs)");
caterwaul_global.syntax_to_expression=function(tree){if(tree.length){for(var comma=new caterwaul_global.syntax(","),i=0,l=tree.length;i<l;++i){comma.push(caterwaul_global.syntax_to_expression(tree[i]))
}return nontrivial_node_template.replace({_data:caterwaul_global.syntax.from_string(tree.data),_xs:comma.unflatten()})}else{return trivial_node_template.replace({_data:caterwaul_global.syntax.from_string(tree.data)})
}};caterwaul_global.late_bound_tree=function(tree,environment,options){options=caterwaul_global.merge({expression_ref_table:true},options);tree=tree.rmap(function(node){return node.resolve()
});var bindings=caterwaul_global.merge({},environment,tree.expressions()),variables=new caterwaul_global.syntax(","),expressions=new caterwaul_global.syntax(","),table={};
for(var k in bindings){if(own.call(bindings,k)){variables.push(new caterwaul_global.syntax(k)),expressions.push(bindings[k]),table[k]=caterwaul_global.syntax.from_string(bindings[k].toString())
}}var result_gensym=caterwaul_global.gensym("result"),result_initializer=options.expression_ref_table?late_bound_ref_table_template.replace({_result:result_gensym,_expression_ref_table:caterwaul_global.syntax.from_object(table)}):caterwaul_global.empty;
return variables.length?late_bound_template.replace({_bindings:variables.unflatten(),_expressions:expressions.unflatten(),_result:result_gensym,_result_init:result_initializer,_body:tree}):tree
};caterwaul_global.gensym_rename_table=function(tree){var names={},gensyms=[];tree.reach(function(node){var d=node.data;if(is_gensym(d)){names[d]||gensyms.push(d)
}names[d]=d.replace(/^(.*)_[a-z0-9]+_.{22}$/,"$1")||"anon"});var unseen_count={},next_unseen=function(name){if(!(name in names)){return name}var n=unseen_count[name]||0;
while(names[name+(++n).toString(36)]){}return name+(unseen_count[name]=n).toString(36)};for(var renamed={},i=0,l=gensyms.length,g;i<l;++i){renamed[g=gensyms[i]]||(names[renamed[g]=next_unseen(names[g])]=true)
}return renamed};var invoke_caterwaul_methods=function(methods){/^:/.test(methods)&&(methods=caterwaul_global[methods.substr(1)]);methods.constructor===String&&(methods=methods.split(/\s+/));
for(var i=1,l=methods.length,r=caterwaul_global[methods[0]]();i<l;++i){r=caterwaul_global[methods[i]](r)}return r};caterwaul_global.init=function(macroexpander){macroexpander||(macroexpander=function(x){return true
});return macroexpander.constructor===Function?se((function(){var result=function(f,environment,options){return typeof f==="function"||f.constructor===String?caterwaul_global.compile(result.call(result,caterwaul_global.parse(f)),environment,options):f.rmap(function(node){return macroexpander.call(result,node,environment,options)
})};return result})(),function(){this.global=caterwaul_global,this.macroexpander=macroexpander}):invoke_caterwaul_methods(macroexpander)};caterwaul_global.initializer=initializer;
caterwaul_global.clone=function(){return se(initializer(initializer,unique).deglobalize(),function(){for(var k in caterwaul_global){this[k]||(this[k]=caterwaul_global[k])
}})};var w_template=caterwaul_global.parse("(function (f) {return f(f)})(_x)"),module_template=caterwaul_global.parse("module(_name, _f)");caterwaul_global.replicator=function(options){if(options&&options.minimal_core_only){return w_template.replace({_x:new this.opaque_tree(this.core_initializer)})
}if(options&&options.core_only){return w_template.replace({_x:new this.opaque_tree(this.initializer)})}for(var i=0,ms=options&&options.modules||this.modules,c=[],l=ms.length;
i<l;++i){c.push(module_template.replace({_name:this.syntax.from_string(ms[i]),_f:new this.opaque_tree(this.module(ms[i]))}))}for(var i=0,l=c.length,result=new this.syntax(".",w_template.replace({_x:new this.opaque_tree(this.initializer)}));
i<l;++i){result.push(c[i])}return this.late_bound_tree(result.unflatten())};return caterwaul});
</script>
<script>
caterwaul.module("std.all-bundle",function($){$.all=[]});caterwaul.module("std.macro",function($){var syntax_manipulator=function(base_case){var result=function(x){if(x.constructor===Array){for(var i=0,l=x.length,ys=[];
i<l;++i){ys.push(result(x[i]))}return function(tree){for(var i=ys.length-1,r;i>=0;--i){if(r=ys[i].call(this,tree)){return r}}}}else{return x.constructor===String?result($.parse(x)):x.constructor===$.syntax?base_case.call(this,x):x
}};return result};$.pattern=syntax_manipulator(function(pattern){return function(tree){return pattern.match(tree)}});$.expander=syntax_manipulator(function(expander){return function(match){return expander.replace(match)
}});$.alternatives=syntax_manipulator(function(alternative){throw new Error("must use replacer functions with caterwaul.alternatives()")});$.reexpander=function(expander){var e=$.expander(expander);
return function(match){var r=e.call(this,match);return r&&this(r)}};var composer=function(expander_base_case){return function(pattern,expander){var new_pattern=$.pattern(pattern),new_expander=expander_base_case(expander);
return function(tree){var match=new_pattern.call(this,tree);return match&&new_expander.call(this,match)}}};$.replacer=composer($.expander);$.rereplacer=composer($.reexpander);
$.macroexpand=function(tree){return $($.alternatives(Array.prototype.slice.call(arguments,1)))(tree)}});caterwaul.module("std.anon",function($){$.anonymizer=function(){var xs=arguments;
return(function(){var table=(function(o){for(var r={},i=0,l=o.length,x;i<l;++i){x=o[i],r[x[0]]=x[1]}return r}).call(this,((function(xs){var x,x0,xi,xl,xr;for(var xr=new xs.constructor(),xi=0,xl=xs.length;
xi<xl;++xi){x=xs[xi],xr.push(([x,$.gensym(x)]))}return xr}).call(this,(function(xs){var x,x0,xi,xl,xr;for(var xr=new xs.constructor(),xi=0,xl=xs.length;xi<xl;++xi){x=xs[xi],xr.push.apply(xr,Array.prototype.slice.call((x.constructor===Array?x:x.split(" "))))
}return xr}).call(this,Array.prototype.slice.call((xs))))));return function(_){return(($).parse(_)).replace(table)}}).call(this)}});caterwaul.module("std.js",(function(qs,qs1,qs2,qs3,qs4,qs5,qs6,qs7,qs8,qs9,qsa,qsb,qsc,qsd,qse,qsf,qsg,qsh,qsi,qsj,qsk,qsl,qsm,qsn){var result1=(function($){$.js=function(macroexpander){var string_interpolator=function(node){var s=node.data,q=s.charAt(0),syntax=$.syntax;
if(q!=="'"&&q!=='"'||!/#\{[^\}]+\}/.test(s)){return false}for(var pieces=[],is_code=[],i=1,l=s.length-1,brace_depth=0,got_hash=false,start=1,c;i<l;++i){if(brace_depth){if((c=s.charAt(i))==="}"){--brace_depth||(pieces.push(s.substring(start,i)),is_code.push(true))&&(start=i+1),got_hash=false
}else{brace_depth+=c==="{"}}else{if((c=s.charAt(i))==="#"){got_hash=true}else{if(c==="{"&&got_hash){pieces.push(s.substring(start,i-1)),is_code.push(false),start=i+1,++brace_depth
}else{got_hash=false}}}}pieces.push(s.substring(start,l)),is_code.push(false);for(var quoted=new RegExp("\\\\"+q,"g"),i=0,l=pieces.length;i<l;++i){pieces[i]=is_code[i]?this($.parse(pieces[i].replace(quoted,q)).as("(")):new syntax(q+pieces[i]+q)
}return new syntax("+",pieces).unflatten().as("(")};var function_local_template=qs,function_bind_pattern=qs1,function_result_pattern=qs2,function_with_afters=qs3,function_without_afters=qs4,function_assignment_template=qs5,function_is_result=function(n){return n.is_empty()&&n.data==="result"
},function_destructure=$.rereplacer(qs6,function(match){for(var formals=[],befores=[],afters=[],ps=match._xs.flatten(","),i=0,l=ps.length;i<l;++i){(afters.length||ps[i].contains(function_is_result)?afters:befores.length||ps[i].length?befores:formals).push(ps[i])
}for(var contains_locals=[befores,afters],i=0,l=contains_locals.length;i<l;++i){for(var xs=contains_locals[i],j=0,lj=xs.length,m;j<lj;++j){xs[j]=(m=function_bind_pattern.match(xs[j]))&&m._x.is_empty()?function_local_template.replace(m):xs[j].as("(")
}}var new_formals=formals.length?new $.syntax(",",formals).unflatten():$.empty,new_befores=befores.length?new $.syntax(";",befores).unflatten():$.empty,new_afters=afters.length?new $.syntax(";",afters).unflatten():$.empty,template=function_assignment_template.replace({_f:match._f,_x:afters.length?function_with_afters:function_without_afters});
return template.replace({_formals:new_formals,_befores:new_befores,_afters:new_afters,_result:match._y})});var tuple_template=qs7,tuple_constructor=qs8,tuple_assignment=qs9,tuple_destructure=$.rereplacer(qsa,function(match){for(var formals=match._xs.flatten(","),assignments=new $.syntax(";"),i=0,l=formals.length;
i<l;++i){assignments.push(tuple_assignment.replace({_name:formals[i]}))}return tuple_template.replace({_f:match._f,_g:$.gensym("tuple_ctor"),_ctor:tuple_constructor.replace({_formals:formals,_assignments:assignments.unflatten()}),_prototype:match._y})
});var infix_function=function(node){var d=node.data,left,fn;if((d==="/"||d==="|")&&(left=node[0]).data===d&&left[1]&&left[1].data==="u-"&&(fn=left[1][0])){return new $.syntax("()",fn,this(left[0]).flatten(d).push(this(node[1])).with_data(",").unflatten())
}};var infix_method=function(node){var d=node.data,left,fn;if((d==="/"||d==="|")&&(left=node[0]).data===d&&left[1]&&left[1].data==="u~"&&(fn=left[1][0])){var xs=[].slice.call(this(node[0][0]).flatten(d)),object=xs.shift();
return new $.syntax("()",new $.syntax(".",new $.syntax("(",object),fn),new $.syntax(",",xs,this(node[1])).unflatten())}};var postfix_function_template=qsb,postfix_function=$.rereplacer(qsc,function(match){return postfix_function_template.replace({_f:match._f,_x:this(match._x).flatten("/").with_data(",").unflatten()})
});var modified_literal_form=$.pattern(qsd),lookup_literal_modifier=function(caterwaul,type,modifier){var hash=caterwaul.literal_modifiers[type];return hash.hasOwnProperty(modifier)&&hash[modifier]
},literal_modifier=function(node){var modified_literal=modified_literal_form.call(this,node),literal,expander;if(modified_literal&&(literal=modified_literal._literal)&&(expander=literal.is_identifier()?lookup_literal_modifier(this,"identifier",modified_literal._modifier.data):literal.is_array()?lookup_literal_modifier(this,"array",modified_literal._modifier.data):literal.is_regexp()?lookup_literal_modifier(this,"regexp",modified_literal._modifier.data):literal.is_number()?lookup_literal_modifier(this,"number",modified_literal._modifier.data):literal.is_string()?lookup_literal_modifier(this,"string",modified_literal._modifier.data):null)){return expander.call(this,literal)
}};var bracket_modifier_form=$.pattern(qse),slash_modifier_form=$.pattern(qsf),minus_modifier_form=$.pattern(qsg),in_modifier_form=$.pattern(qsh),pipe_modifier_form=$.pattern(qsi),comma_modifier_form=$.pattern(qsj),dot_parameters=$.pattern(qsk),bracket_parameters=$.pattern(qsl),parameterized_wickets=$.pattern(qsm),parameterized_minus=$.pattern(qsn),modifier=function(node){var modifier,parameterized_match=parameterized_wickets.call(this,node)||parameterized_minus.call(this,node);
if(parameterized_match&&this.parameterized_modifiers.hasOwnProperty(modifier=parameterized_match._modifier.data)){var r=this.parameterized_modifiers[modifier].call(this,parameterized_match);
if(r){return r}}var regular_match=bracket_modifier_form.call(this,node)||slash_modifier_form.call(this,node)||minus_modifier_form.call(this,node)||in_modifier_form.call(this,node)||pipe_modifier_form.call(this,node)||comma_modifier_form.call(this,node);
if(regular_match){var parameter_match=dot_parameters.call(this,regular_match._modifier)||bracket_parameters.call(this,regular_match._modifier);if(parameter_match){regular_match._modifier=parameter_match._modifier;
regular_match._parameters=parameter_match._parameters;return this.parameterized_modifiers.hasOwnProperty(modifier=regular_match._modifier.data)&&this.parameterized_modifiers[modifier].call(this,regular_match)
}else{return this.modifiers.hasOwnProperty(modifier=regular_match._modifier.data)&&this.modifiers[modifier].call(this,regular_match)}}};var each_node=function(node){return string_interpolator.call(this,node)||literal_modifier.call(this,node)||node.length&&(modifier.call(this,node)||function_destructure.call(this,node)||tuple_destructure.call(this,node)||infix_function.call(this,node)||infix_method.call(this,node)||postfix_function.call(this,node))
},result=macroexpander?$(function(node){return macroexpander.call(this,node)||each_node.call(this,node)}):$(each_node);result.modifiers={};result.parameterized_modifiers={};
result.literal_modifiers={regexp:{},array:{},string:{},number:{},identifier:{}};return result}});result1.caterwaul_expression_ref_table={qs:('new caterwaul.syntax( "var" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "_y" ) ) )'),qs1:('new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "_y" ) )'),qs2:('new caterwaul.syntax( "result" )'),qs3:('new caterwaul.syntax( "function" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_formals" ) ) ,new caterwaul.syntax( "{" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "_befores" ) ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "result" ) ,new caterwaul.syntax( "_result" ) ) ) ) ,new caterwaul.syntax( "_afters" ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "result" ) ) ) ) )'),qs4:('new caterwaul.syntax( "function" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_formals" ) ) ,new caterwaul.syntax( "{" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "_befores" ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_result" ) ) ) ) )'),qs5:('new caterwaul.syntax( "=" ,new caterwaul.syntax( "_f" ) ,new caterwaul.syntax( "_x" ) )'),qs6:('new caterwaul.syntax( "=" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "_f" ) ,new caterwaul.syntax( "_xs" ) ) ,new caterwaul.syntax( "_y" ) )'),qs7:('new caterwaul.syntax( "=" ,new caterwaul.syntax( "_f" ) ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "function" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "" ) ) ,new caterwaul.syntax( "{" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_g" ) ,new caterwaul.syntax( "_ctor" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_g" ) ,new caterwaul.syntax( "prototype" ) ) ,new caterwaul.syntax( "_prototype" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_g" ) ,new caterwaul.syntax( "prototype" ) ) ,new caterwaul.syntax( "constructor" ) ) ,new caterwaul.syntax( "_g" ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_g" ) ) ) ) ) ) ,new caterwaul.syntax( "call" ) ) ,new caterwaul.syntax( "this" ) ) )'),qs8:('new caterwaul.syntax( "function" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_formals" ) ) ,new caterwaul.syntax( "{" ,new caterwaul.syntax( "_assignments" ) ) )'),qs9:('new caterwaul.syntax( "=" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "this" ) ,new caterwaul.syntax( "_name" ) ) ,new caterwaul.syntax( "_name" ) )'),qsa:('new caterwaul.syntax( "*=" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "_f" ) ,new caterwaul.syntax( "_xs" ) ) ,new caterwaul.syntax( "_y" ) )'),qsb:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "_f" ) ,new caterwaul.syntax( "_x" ) )'),qsc:('new caterwaul.syntax( "/" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "u!" ,new caterwaul.syntax( "_f" ) ) )'),qsd:('new caterwaul.syntax( "." ,new caterwaul.syntax( "_literal" ) ,new caterwaul.syntax( "_modifier" ) )'),qse:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_modifier" ) ,new caterwaul.syntax( "_expression" ) )'),qsf:('new caterwaul.syntax( "/" ,new caterwaul.syntax( "_expression" ) ,new caterwaul.syntax( "_modifier" ) )'),qsg:('new caterwaul.syntax( "-" ,new caterwaul.syntax( "_expression" ) ,new caterwaul.syntax( "_modifier" ) )'),qsh:('new caterwaul.syntax( "in" ,new caterwaul.syntax( "_modifier" ) ,new caterwaul.syntax( "_expression" ) )'),qsi:('new caterwaul.syntax( "|" ,new caterwaul.syntax( "_expression" ) ,new caterwaul.syntax( "_modifier" ) )'),qsj:('new caterwaul.syntax( "," ,new caterwaul.syntax( "_expression" ) ,new caterwaul.syntax( "_modifier" ) )'),qsk:('new caterwaul.syntax( "." ,new caterwaul.syntax( "_modifier" ) ,new caterwaul.syntax( "_parameters" ) )'),qsl:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_modifier" ) ,new caterwaul.syntax( "_parameters" ) )'),qsm:('new caterwaul.syntax( ">" ,new caterwaul.syntax( "<" ,new caterwaul.syntax( "_expression" ) ,new caterwaul.syntax( "_modifier" ) ) ,new caterwaul.syntax( "_parameters" ) )'),qsn:('new caterwaul.syntax( "-" ,new caterwaul.syntax( "-" ,new caterwaul.syntax( "_expression" ) ,new caterwaul.syntax( "_modifier" ) ) ,new caterwaul.syntax( "_parameters" ) )')};
return(result1)}).call(this,new caterwaul.syntax("var",new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("_y"))),new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("_y")),new caterwaul.syntax("result"),new caterwaul.syntax("function",new caterwaul.syntax("(",new caterwaul.syntax("_formals")),new caterwaul.syntax("{",new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("_befores"),new caterwaul.syntax("var",new caterwaul.syntax("=",new caterwaul.syntax("result"),new caterwaul.syntax("_result")))),new caterwaul.syntax("_afters")),new caterwaul.syntax("return",new caterwaul.syntax("result"))))),new caterwaul.syntax("function",new caterwaul.syntax("(",new caterwaul.syntax("_formals")),new caterwaul.syntax("{",new caterwaul.syntax(";",new caterwaul.syntax("_befores"),new caterwaul.syntax("return",new caterwaul.syntax("_result"))))),new caterwaul.syntax("=",new caterwaul.syntax("_f"),new caterwaul.syntax("_x")),new caterwaul.syntax("=",new caterwaul.syntax("()",new caterwaul.syntax("_f"),new caterwaul.syntax("_xs")),new caterwaul.syntax("_y")),new caterwaul.syntax("=",new caterwaul.syntax("_f"),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("(",new caterwaul.syntax("function",new caterwaul.syntax("(",new caterwaul.syntax("")),new caterwaul.syntax("{",new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax("=",new caterwaul.syntax("_g"),new caterwaul.syntax("_ctor"))),new caterwaul.syntax("=",new caterwaul.syntax(".",new caterwaul.syntax("_g"),new caterwaul.syntax("prototype")),new caterwaul.syntax("_prototype"))),new caterwaul.syntax("=",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax("_g"),new caterwaul.syntax("prototype")),new caterwaul.syntax("constructor")),new caterwaul.syntax("_g"))),new caterwaul.syntax("return",new caterwaul.syntax("_g")))))),new caterwaul.syntax("call")),new caterwaul.syntax("this"))),new caterwaul.syntax("function",new caterwaul.syntax("(",new caterwaul.syntax("_formals")),new caterwaul.syntax("{",new caterwaul.syntax("_assignments"))),new caterwaul.syntax("=",new caterwaul.syntax(".",new caterwaul.syntax("this"),new caterwaul.syntax("_name")),new caterwaul.syntax("_name")),new caterwaul.syntax("*=",new caterwaul.syntax("()",new caterwaul.syntax("_f"),new caterwaul.syntax("_xs")),new caterwaul.syntax("_y")),new caterwaul.syntax("()",new caterwaul.syntax("_f"),new caterwaul.syntax("_x")),new caterwaul.syntax("/",new caterwaul.syntax("_x"),new caterwaul.syntax("u!",new caterwaul.syntax("_f"))),new caterwaul.syntax(".",new caterwaul.syntax("_literal"),new caterwaul.syntax("_modifier")),new caterwaul.syntax("[]",new caterwaul.syntax("_modifier"),new caterwaul.syntax("_expression")),new caterwaul.syntax("/",new caterwaul.syntax("_expression"),new caterwaul.syntax("_modifier")),new caterwaul.syntax("-",new caterwaul.syntax("_expression"),new caterwaul.syntax("_modifier")),new caterwaul.syntax("in",new caterwaul.syntax("_modifier"),new caterwaul.syntax("_expression")),new caterwaul.syntax("|",new caterwaul.syntax("_expression"),new caterwaul.syntax("_modifier")),new caterwaul.syntax(",",new caterwaul.syntax("_expression"),new caterwaul.syntax("_modifier")),new caterwaul.syntax(".",new caterwaul.syntax("_modifier"),new caterwaul.syntax("_parameters")),new caterwaul.syntax("[]",new caterwaul.syntax("_modifier"),new caterwaul.syntax("_parameters")),new caterwaul.syntax(">",new caterwaul.syntax("<",new caterwaul.syntax("_expression"),new caterwaul.syntax("_modifier")),new caterwaul.syntax("_parameters")),new caterwaul.syntax("-",new caterwaul.syntax("-",new caterwaul.syntax("_expression"),new caterwaul.syntax("_modifier")),new caterwaul.syntax("_parameters"))));
caterwaul.module("std.js-literals",(function(qs1,qs2){var result=(function($){$.js_literals=function(caterwaul_function){var function_template=qs1;(function(r){r.x=$.reexpander(function(node){return node.with_data(node.data.replace(/\s+/g,""))
});var call_exec_template=qs2;r.qf=function(node){return function_template.replace({_body:call_exec_template.replace({_regexp:node})})}})(caterwaul_function.literal_modifiers.regexp);
(function(s){s.qw=$.reexpander(function(node){for(var array_node=new $.syntax("["),comma=new $.syntax(","),delimiter=node.data.charAt(0),pieces=node.as_escaped_string().split(/\s+/),i=0,l=pieces.length;
i<l;++i){comma.push(new $.syntax(delimiter+pieces[i]+delimiter))}return array_node.push(comma.unflatten())});s.qh=$.reexpander(function(node){for(var hash_node=new $.syntax("{"),comma=new $.syntax(","),delimiter=node.data.charAt(0),pieces=node.as_escaped_string().split(/\s+/),i=0,l=pieces.length;
i<l;i+=2){comma.push(new $.syntax(":",new $.syntax(delimiter+pieces[i]+delimiter),new $.syntax(delimiter+pieces[i+1]+delimiter)))}return hash_node.push(comma.unflatten())
});s.qr=$.reexpander(function(node){return node.with_data("/"+node.as_escaped_string().replace(/\//g,"\\/")+"/")});s.qs=function(node){return new $.expression_ref($.syntax_to_expression($.parse(node.as_unescaped_string())),"qs")
};s.qse=function(node){return new $.expression_ref($.syntax_to_expression(this.call(this,$.parse(node.as_unescaped_string()))),"qse")};s.qf=$.reexpander(function(node){return function_template.replace({_body:$.parse(node.as_unescaped_string())})
})})(caterwaul_function.literal_modifiers.string);return caterwaul_function}});result.caterwaul_expression_ref_table={qs1:('new caterwaul.syntax( "function" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_" ) ) ,new caterwaul.syntax( "{" ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_body" ) ) ) )'),qs2:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_regexp" ) ,new caterwaul.syntax( "exec" ) ) ,new caterwaul.syntax( "_" ) )')};
return(result)}).call(this,new caterwaul.syntax("function",new caterwaul.syntax("(",new caterwaul.syntax("_")),new caterwaul.syntax("{",new caterwaul.syntax("return",new caterwaul.syntax("_body")))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("_regexp"),new caterwaul.syntax("exec")),new caterwaul.syntax("_"))));
caterwaul.module("std.words",(function(qs1,qs2,qs3,qs4,qs5,qs6,qs7,qs8,qs9,qsa,qsb,qsc,qsd,qsf,qsg,qsh,qsi,qsj,qsk,qsl,qsm,qsn){var result=(function($){(function(){var scope_template=qs1;
return $.words=function(caterwaul_function){return($.merge(caterwaul_function.modifiers,$.words.modifiers),$.merge(caterwaul_function.parameterized_modifiers,$.words.parameterized_modifiers),caterwaul_function)
},$.words.modifiers={qs:function(match){return new $.expression_ref($.syntax_to_expression(match._expression),"qs")},qse:function(match){return new $.expression_ref($.syntax_to_expression(this(match._expression)),"qse")
},reexpand:function(match){return this(this(match._expression))},noexpand:function(match){return match._expression},raise:$.reexpander(qs2),eval:function(match){return new $.ref($.compile(this(match._expression)),"eval")
},ahead:function(match){return new $.expression_ref(this(match._expression),"ahead")},capture:function(match){for(var comma=new $.syntax(","),bindings=match._expression.flatten(","),i=0,l=bindings.length;
i<l;++i){comma.push(this(bindings[i]).with_data(":"))}return new $.syntax("{",comma.unflatten())},wcapture:function(match){for(var e=this(match._expression),comma=new $.syntax(","),bindings=e.flatten(","),node,i=0,l=bindings.length;
i<l;++i){(node=this(bindings[i]))[1]=node[0],comma.push(node.with_data(":"))}return scope_template.replace({_variables:e,_expression:new $.syntax("{",comma.unflatten())})
}},$.words.parameterized_modifiers={given:$.reexpander(qs3),bgiven:$.reexpander(qs4),rescue:$.reexpander(qs5),se:$.reexpander(qs6),re:$.reexpander(qs7),then:$.reexpander(qs8),eq:$.reexpander(qs9),aeq:$.reexpander(qsa),deq:$.reexpander(qsb),oeq:$.reexpander(qsc),neq:$.reexpander(qsd),ocq:$.reexpander(qsf),dcq:$.reexpander(qsg),acq:$.reexpander(qsh),ncq:$.reexpander(qsi),where:$.reexpander(qsj),using:$.reexpander(function(match){var m=this(match._parameters),o=$.compile(m),comma=new $.syntax(","),expression_ref=new $.expression_ref(m);
for(var k in o){Object.prototype.hasOwnProperty.call(o,k)&&/^[_$a-zA-Z][_$0-9a-zA-Z]*$/.test(k)&&!this.modifiers.hasOwnProperty(k)&&!this.parameterized_modifiers.hasOwnProperty(k)&&comma.push(new $.syntax("=",k,new $.syntax(".",expression_ref,k)))
}return scope_template.replace({_variables:comma.unflatten(),_expression:match._expression})}),when:$.reexpander(qsk),and:$.reexpander(qsl),unless:$.reexpander(qsm),or:$.reexpander(qsn)}
}).call(this)});result.caterwaul_expression_ref_table={qs1:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "function" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "" ) ) ,new caterwaul.syntax( "{" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "_variables" ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_expression" ) ) ) ) ) ) ,new caterwaul.syntax( "call" ) ) ,new caterwaul.syntax( "this" ) )'),qs2:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "function" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "" ) ) ,new caterwaul.syntax( "{" ,new caterwaul.syntax( "throw" ,new caterwaul.syntax( "_expression" ) ) ) ) ) ,new caterwaul.syntax( "call" ) ) ,new caterwaul.syntax( "this" ) )'),qs3:('new caterwaul.syntax( "(" ,new caterwaul.syntax( "function" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_parameters" ) ) ,new caterwaul.syntax( "{" ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_expression" ) ) ) ) )'),qs4:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "function" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "t" ) ,new caterwaul.syntax( "f" ) ) ) ,new caterwaul.syntax( "{" ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "function" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "" ) ) ,new caterwaul.syntax( "{" ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "f" ) ,new caterwaul.syntax( "apply" ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "t" ) ,new caterwaul.syntax( "arguments" ) ) ) ) ) ) ) ) ) ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "this" ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "function" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_parameters" ) ) ,new caterwaul.syntax( "{" ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_expression" ) ) ) ) ) ) )'),qs5:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "function" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "" ) ) ,new caterwaul.syntax( "{" ,new caterwaul.syntax( "try" ,new caterwaul.syntax( "{" ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_expression" ) ) ) ,new caterwaul.syntax( "catch" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "e" ) ) ,new caterwaul.syntax( "{" ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_parameters" ) ) ) ) ) ) ) ) ,new caterwaul.syntax( "call" ) ) ,new caterwaul.syntax( "this" ) )'),qs6:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "function" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "it" ) ) ,new caterwaul.syntax( "{" ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "_parameters" ) ,new caterwaul.syntax( "it" ) ) ) ) ) ) ,new caterwaul.syntax( "call" ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "this" ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_expression" ) ) ) )'),qs7:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "function" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "it" ) ) ,new caterwaul.syntax( "{" ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_parameters" ) ) ) ) ) ,new caterwaul.syntax( "call" ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "this" ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_expression" ) ) ) )'),qs8:('new caterwaul.syntax( "(" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "_expression" ) ,new caterwaul.syntax( "_parameters" ) ) )'),qs9:('new caterwaul.syntax( "=" ,new caterwaul.syntax( "_expression" ) ,new caterwaul.syntax( "_parameters" ) )'),qsa:('new caterwaul.syntax( "||" ,new caterwaul.syntax( "u!" ,new caterwaul.syntax( "_expression" ) ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_expression" ) ,new caterwaul.syntax( "_parameters" ) ) ) )'),qsb:('new caterwaul.syntax( "||" ,new caterwaul.syntax( "!==" ,new caterwaul.syntax( "_expression" ) ,new caterwaul.syntax( "void" ,new caterwaul.syntax( "0" ) ) ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_expression" ) ,new caterwaul.syntax( "_parameters" ) ) ) )'),qsc:('new caterwaul.syntax( "||" ,new caterwaul.syntax( "u!" ,new caterwaul.syntax( "u!" ,new caterwaul.syntax( "_expression" ) ) ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_expression" ) ,new caterwaul.syntax( "_parameters" ) ) ) )'),qsd:('new caterwaul.syntax( "||" ,new caterwaul.syntax( "!=" ,new caterwaul.syntax( "_expression" ) ,new caterwaul.syntax( "void" ,new caterwaul.syntax( "0" ) ) ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_expression" ) ,new caterwaul.syntax( "_parameters" ) ) ) )'),qsf:('new caterwaul.syntax( "?" ,new caterwaul.syntax( "_expression" ) ,new caterwaul.syntax( "_expression" ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_expression" ) ,new caterwaul.syntax( "_parameters" ) ) )'),qsg:('new caterwaul.syntax( "?" ,new caterwaul.syntax( "!==" ,new caterwaul.syntax( "_expression" ) ,new caterwaul.syntax( "void" ,new caterwaul.syntax( "0" ) ) ) ,new caterwaul.syntax( "_expression" ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_expression" ) ,new caterwaul.syntax( "_parameters" ) ) )'),qsh:('new caterwaul.syntax( "?" ,new caterwaul.syntax( "u!" ,new caterwaul.syntax( "_expression" ) ) ,new caterwaul.syntax( "_expression" ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_expression" ) ,new caterwaul.syntax( "_parameters" ) ) )'),qsi:('new caterwaul.syntax( "?" ,new caterwaul.syntax( "!=" ,new caterwaul.syntax( "_expression" ) ,new caterwaul.syntax( "void" ,new caterwaul.syntax( "0" ) ) ) ,new caterwaul.syntax( "_expression" ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_expression" ) ,new caterwaul.syntax( "_parameters" ) ) )'),qsj:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "function" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "" ) ) ,new caterwaul.syntax( "{" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "_parameters" ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_expression" ) ) ) ) ) ) ,new caterwaul.syntax( "call" ) ) ,new caterwaul.syntax( "this" ) )'),qsk:('new caterwaul.syntax( "&&" ,new caterwaul.syntax( "_parameters" ) ,new caterwaul.syntax( "_expression" ) )'),qsl:('new caterwaul.syntax( "&&" ,new caterwaul.syntax( "_expression" ) ,new caterwaul.syntax( "_parameters" ) )'),qsm:('new caterwaul.syntax( "&&" ,new caterwaul.syntax( "u!" ,new caterwaul.syntax( "_parameters" ) ) ,new caterwaul.syntax( "_expression" ) )'),qsn:('new caterwaul.syntax( "||" ,new caterwaul.syntax( "_expression" ) ,new caterwaul.syntax( "_parameters" ) )')};
return(result)}).call(this,new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("(",new caterwaul.syntax("function",new caterwaul.syntax("(",new caterwaul.syntax("")),new caterwaul.syntax("{",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax("_variables")),new caterwaul.syntax("return",new caterwaul.syntax("_expression")))))),new caterwaul.syntax("call")),new caterwaul.syntax("this")),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("(",new caterwaul.syntax("function",new caterwaul.syntax("(",new caterwaul.syntax("")),new caterwaul.syntax("{",new caterwaul.syntax("throw",new caterwaul.syntax("_expression"))))),new caterwaul.syntax("call")),new caterwaul.syntax("this")),new caterwaul.syntax("(",new caterwaul.syntax("function",new caterwaul.syntax("(",new caterwaul.syntax("_parameters")),new caterwaul.syntax("{",new caterwaul.syntax("return",new caterwaul.syntax("_expression"))))),new caterwaul.syntax("()",new caterwaul.syntax("(",new caterwaul.syntax("function",new caterwaul.syntax("(",new caterwaul.syntax(",",new caterwaul.syntax("t"),new caterwaul.syntax("f"))),new caterwaul.syntax("{",new caterwaul.syntax("return",new caterwaul.syntax("(",new caterwaul.syntax("function",new caterwaul.syntax("(",new caterwaul.syntax("")),new caterwaul.syntax("{",new caterwaul.syntax("return",new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("f"),new caterwaul.syntax("apply")),new caterwaul.syntax(",",new caterwaul.syntax("t"),new caterwaul.syntax("arguments"))))))))))),new caterwaul.syntax(",",new caterwaul.syntax("this"),new caterwaul.syntax("(",new caterwaul.syntax("function",new caterwaul.syntax("(",new caterwaul.syntax("_parameters")),new caterwaul.syntax("{",new caterwaul.syntax("return",new caterwaul.syntax("_expression"))))))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("(",new caterwaul.syntax("function",new caterwaul.syntax("(",new caterwaul.syntax("")),new caterwaul.syntax("{",new caterwaul.syntax("try",new caterwaul.syntax("{",new caterwaul.syntax("return",new caterwaul.syntax("_expression"))),new caterwaul.syntax("catch",new caterwaul.syntax("(",new caterwaul.syntax("e")),new caterwaul.syntax("{",new caterwaul.syntax("return",new caterwaul.syntax("_parameters")))))))),new caterwaul.syntax("call")),new caterwaul.syntax("this")),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("(",new caterwaul.syntax("function",new caterwaul.syntax("(",new caterwaul.syntax("it")),new caterwaul.syntax("{",new caterwaul.syntax("return",new caterwaul.syntax(",",new caterwaul.syntax("_parameters"),new caterwaul.syntax("it")))))),new caterwaul.syntax("call")),new caterwaul.syntax(",",new caterwaul.syntax("this"),new caterwaul.syntax("(",new caterwaul.syntax("_expression")))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("(",new caterwaul.syntax("function",new caterwaul.syntax("(",new caterwaul.syntax("it")),new caterwaul.syntax("{",new caterwaul.syntax("return",new caterwaul.syntax("_parameters"))))),new caterwaul.syntax("call")),new caterwaul.syntax(",",new caterwaul.syntax("this"),new caterwaul.syntax("(",new caterwaul.syntax("_expression")))),new caterwaul.syntax("(",new caterwaul.syntax(",",new caterwaul.syntax("_expression"),new caterwaul.syntax("_parameters"))),new caterwaul.syntax("=",new caterwaul.syntax("_expression"),new caterwaul.syntax("_parameters")),new caterwaul.syntax("||",new caterwaul.syntax("u!",new caterwaul.syntax("_expression")),new caterwaul.syntax("(",new caterwaul.syntax("=",new caterwaul.syntax("_expression"),new caterwaul.syntax("_parameters")))),new caterwaul.syntax("||",new caterwaul.syntax("!==",new caterwaul.syntax("_expression"),new caterwaul.syntax("void",new caterwaul.syntax("0"))),new caterwaul.syntax("(",new caterwaul.syntax("=",new caterwaul.syntax("_expression"),new caterwaul.syntax("_parameters")))),new caterwaul.syntax("||",new caterwaul.syntax("u!",new caterwaul.syntax("u!",new caterwaul.syntax("_expression"))),new caterwaul.syntax("(",new caterwaul.syntax("=",new caterwaul.syntax("_expression"),new caterwaul.syntax("_parameters")))),new caterwaul.syntax("||",new caterwaul.syntax("!=",new caterwaul.syntax("_expression"),new caterwaul.syntax("void",new caterwaul.syntax("0"))),new caterwaul.syntax("(",new caterwaul.syntax("=",new caterwaul.syntax("_expression"),new caterwaul.syntax("_parameters")))),new caterwaul.syntax("?",new caterwaul.syntax("_expression"),new caterwaul.syntax("_expression"),new caterwaul.syntax("=",new caterwaul.syntax("_expression"),new caterwaul.syntax("_parameters"))),new caterwaul.syntax("?",new caterwaul.syntax("!==",new caterwaul.syntax("_expression"),new caterwaul.syntax("void",new caterwaul.syntax("0"))),new caterwaul.syntax("_expression"),new caterwaul.syntax("=",new caterwaul.syntax("_expression"),new caterwaul.syntax("_parameters"))),new caterwaul.syntax("?",new caterwaul.syntax("u!",new caterwaul.syntax("_expression")),new caterwaul.syntax("_expression"),new caterwaul.syntax("=",new caterwaul.syntax("_expression"),new caterwaul.syntax("_parameters"))),new caterwaul.syntax("?",new caterwaul.syntax("!=",new caterwaul.syntax("_expression"),new caterwaul.syntax("void",new caterwaul.syntax("0"))),new caterwaul.syntax("_expression"),new caterwaul.syntax("=",new caterwaul.syntax("_expression"),new caterwaul.syntax("_parameters"))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("(",new caterwaul.syntax("function",new caterwaul.syntax("(",new caterwaul.syntax("")),new caterwaul.syntax("{",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax("_parameters")),new caterwaul.syntax("return",new caterwaul.syntax("_expression")))))),new caterwaul.syntax("call")),new caterwaul.syntax("this")),new caterwaul.syntax("&&",new caterwaul.syntax("_parameters"),new caterwaul.syntax("_expression")),new caterwaul.syntax("&&",new caterwaul.syntax("_expression"),new caterwaul.syntax("_parameters")),new caterwaul.syntax("&&",new caterwaul.syntax("u!",new caterwaul.syntax("_parameters")),new caterwaul.syntax("_expression")),new caterwaul.syntax("||",new caterwaul.syntax("_expression"),new caterwaul.syntax("_parameters"))));
caterwaul.module("std.grammar",(function(qs){var result=(function($){$.grammar=function(anonymous_symbols,options,rule_cc){return(function(){var default_options={fix:true,descend:true,initial:qs},settings=$.merge({},default_options,options),anon=$.anonymizer(anonymous_symbols),anon_pattern=anon(settings.initial),rule=function(p,e){return $[settings.fix?"rereplacer":"replacer"](anon(p),e.constructor===$.syntax?anon(e):e)
},expand=(function(it){return settings.descend?$(it):it}).call(this,($.alternatives(rule_cc(rule,anon))));return function(_){return(function(it){return this.constructor===Function?it&&this(it):it
}).call(this,(expand.call(expand,(anon_pattern).replace(_))))}}).call(this)}});result.caterwaul_expression_ref_table={qs:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "_expression" ) )')};
return(result)}).call(this,new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("_expression"))));caterwaul.module("std.seq",(function(qs,qs1,qs2,qs3,qs4,qs5,qs6,qs7,qs8,qs9,qsa,qsb,qsc,qsd,qse,qsf,qsg,qsh,qsi,qsj,qsk,qsl,qsm,qsn,qso,qsp,qsq,qsr,qss,qst,qsu,qsv,qsw,qsx,qsy,qsz,qs10,qs11,qs12,qs13,qs14,qs15,qs16,qs17,qs18,qs19,qs1a,qs1b,qs1c,qs1d,qs1e,qs1f,qs1g,qs1h,qs1i,qs1j,qs1k,qs1l,qs1m,qs1n,qs1o,qs1p,qs1q,qs1r,qs1s,qs1t,qs1u,qs1v,qs1w,qs1x,qs1y,qs1z,qs20,qs21,qs22,qs23,qs24,qs25,qs26,qs27,qs28,qs29,qs2a,qs2b,qs2c,qs2d,qs2e,qs2f,qs2g,qs2h,qs2i,qs2j,qs2k,qs2l,qs2m,qs2n,qs2o,qs2p){var result=(function($){$.seq=function(caterwaul_function){return(function(it){return it.modifiers.seq=$.grammar("S",{initial:qs},(function(rule,anon){return(function(){var operator_macros=(function(){var loop_anon=$.anonymizer("x","y","i","j","l","lj","r","o","k"),scope=anon(qs1),scoped=function(t){return(scope).replace({_body:t})
},form=function(x){return(function(it){return it.uses_x0=/_x0\s*=/.test(x.toString()),it}).call(this,(loop_anon(scoped(anon(x)))))},map=form(qs2),each=form(qs3),flatmap=form(qs4),iterate=form(qs5),filter=form(qs6),filter_not=form(qs7),map_filter=form(qs8),imap_filter=form(qs9),foldl=form(qsa),foldr=form(qsb),unfold=form(qsc),ifoldl=form(qsd),ifoldr=form(qse),iunfold=form(qsf),exists=form(qsg),not_exists=form(qsh),r_exists=form(qsi),iexists=form(qsj),ir_exists=form(qsk),concat=anon(qsl),kmap=form(qsm),keach=form(qsn),kfilter=form(qso),kfilter_not=form(qsp),kmap_filter=form(qsq),vmap=form(qsr),veach=form(qss),vfilter=form(qst),vfilter_not=form(qsu),vmap_filter=form(qsv);
return(function(){var operator_case=function(forms){return function(match){return(function(){var use=function(form,iform){return function(body){return render_form(match._xs,body,form,iform)
}};return parse_modifiers(match._thing,use(forms.normal,forms.inormal),use(forms.bang,forms.ibang),use(forms.tbang,forms.itbang))}).call(this)}},map_forms=operator_case({normal:map,bang:each,tbang:flatmap,itbang:iterate}),filter_forms=operator_case({normal:filter,bang:filter_not,tbang:map_filter,itbang:imap_filter}),fold_forms=operator_case({normal:foldl,bang:foldr,tbang:unfold,inormal:ifoldl,ibang:ifoldr,itbang:iunfold}),kmap_forms=operator_case({normal:kmap,bang:keach}),kfilter_forms=operator_case({normal:kfilter,bang:kfilter_not,tbang:kmap_filter}),vmap_forms=operator_case({normal:vmap,bang:veach}),vfilter_forms=operator_case({normal:vfilter,bang:vfilter_not,tbang:vmap_filter}),exists_forms=operator_case({normal:exists,bang:not_exists,tbang:r_exists,inormal:iexists,itbang:ir_exists}),parse_modifiers=function(tree,n,b,tb){return(function(){var r=null;
return((r=qsw.match(tree))?tb(r._x):(r=qsx.match(tree))?b(r._x):n(tree))}).call(this)},render_form=function(xs,body,form,iform){return(function(){var r=null,use=function(f,match){return f.replace($.merge({_f:match._x,_init:match._init,_s:xs},names_for(match._var)))
},promote=function(f,body){return((f).replace({_f:(f.uses_x0?qsy:qsz).replace($.merge({_f:body},gensym_names)),_s:xs})).replace(gensym_names)};return((r=qs10.match(body)||qs11.match(body))?use(iform,r):(r=qs12.match(body)||qs13.match(body))?use(form,r):promote(form,body))
}).call(this)},names_for=function(p){return p?{_x:p,_x0:(""+(p)+"0"),_xi:(""+(p)+"i"),_xl:(""+(p)+"l"),_xs:(""+(p)+"s"),_xr:(""+(p)+"r")}:{_x:"x",_x0:"x0",_xi:"xi",_xl:"xl",_xs:"xs",_xr:"xr"}
},gensym_names=(function(xs1){var x1,x0,xi,xl,xr;var xr=new xs1.constructor();for(var k in xs1){if(Object.prototype.hasOwnProperty.call(xs1,k)){x1=xs1[k],xr[k]=($.gensym(x1))
}}return xr}).call(this,names_for(null));return[rule(qs14,qs15),rule(qs16,concat),rule(qs17,qs18),rule(qs19,qs1a),rule(qs1b,qs1c),rule(qs1d,qs1e),rule(qs1f,qs1g),rule(qs1h,qs1i),rule(qs1j,qs1k),rule(qs1l,qs1m),rule(qs1n,qs1o),rule(qs1p,qs1q),rule(qs1r,qs1s),rule(qs1t,qs1u),rule(qs1v,filter_forms),rule(qs1w,map_forms),rule(qs1x,fold_forms),rule(qs1y,exists_forms),rule(qs1z,kmap_forms),rule(qs20,vmap_forms),rule(qs21,kfilter_forms),rule(qs22,vfilter_forms)]
}).call(this)}).call(this),word_macros=(function(){var n=function(match){return n_pattern.replace($.merge({_l:"0",_step:"1"},match))},ni=function(match){return ni_pattern.replace($.merge({_l:"0",_step:"1"},match))
},scope=anon(qs23),scoped=function(t){return scope.replace({_body:t})},form=function(p){return(function(){var tree=scoped(anon(p));return function(_){return tree.replace(_)
}}).call(this)},n_pattern=anon(qs24),ni_pattern=anon(qs25),keys=form(qs26),values=form(qs27),pairs=form(qs28),object=form(qs29),mobject=form(qs2a);return[rule(qs2b,n),rule(qs2c,ni),rule(qs2d,n),rule(qs2e,ni),rule(qs2f,n),rule(qs2g,ni),rule(qs2h,keys),rule(qs2i,object),rule(qs2j,mobject),rule(qs2k,values),rule(qs2l,object),rule(qs2m,mobject),rule(qs2n,pairs),rule(qs2o,object),rule(qs2p,mobject)]
}).call(this);return(operator_macros).concat(word_macros)}).call(this)})),it}).call(this,(caterwaul_function))}});result.caterwaul_expression_ref_table={qs:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "_expression" ) )'),qs1:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "function" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_xs" ) ) ,new caterwaul.syntax( "{" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "_x0" ) ) ,new caterwaul.syntax( "_xi" ) ) ,new caterwaul.syntax( "_xl" ) ) ,new caterwaul.syntax( "_xr" ) ) ) ,new caterwaul.syntax( "_body" ) ) ) ) ) ,new caterwaul.syntax( "call" ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "this" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "_s" ) ) ) )'),qs2:('new caterwaul.syntax( ";" ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "new" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "constructor" ) ) ,new caterwaul.syntax( "" ) ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "0" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xl" ) ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "length" ) ) ) ) ) ,new caterwaul.syntax( "<" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "_xl" ) ) ) ,new caterwaul.syntax( "u++" ,new caterwaul.syntax( "_xi" ) ) ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_xi" ) ) ) ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "push" ) ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_f" ) ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_xr" ) ) )'),qs3:('new caterwaul.syntax( ";" ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "0" ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xl" ) ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "length" ) ) ) ) ) ,new caterwaul.syntax( "<" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "_xl" ) ) ) ,new caterwaul.syntax( "u++" ,new caterwaul.syntax( "_xi" ) ) ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_xi" ) ) ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_f" ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_xs" ) ) )'),qs4:('new caterwaul.syntax( ";" ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "new" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "constructor" ) ) ,new caterwaul.syntax( "" ) ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "0" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xl" ) ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "length" ) ) ) ) ) ,new caterwaul.syntax( "<" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "_xl" ) ) ) ,new caterwaul.syntax( "u++" ,new caterwaul.syntax( "_xi" ) ) ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_xi" ) ) ) ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "push" ) ) ,new caterwaul.syntax( "apply" ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "Array" ) ,new caterwaul.syntax( "prototype" ) ) ,new caterwaul.syntax( "slice" ) ) ,new caterwaul.syntax( "call" ) ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_f" ) ) ) ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_xr" ) ) )'),qs5:('new caterwaul.syntax( ";" ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "_xs" ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "0" ) ) ) ,new caterwaul.syntax( "_x0" ) ) ,new caterwaul.syntax( "_xl" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x0" ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_init" ) ) ) ) ,new caterwaul.syntax( "u++" ,new caterwaul.syntax( "_xi" ) ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_f" ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_x" ) ) )'),qs6:('new caterwaul.syntax( ";" ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "new" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "constructor" ) ) ,new caterwaul.syntax( "" ) ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "0" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xl" ) ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "length" ) ) ) ) ) ,new caterwaul.syntax( "<" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "_xl" ) ) ) ,new caterwaul.syntax( "u++" ,new caterwaul.syntax( "_xi" ) ) ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_xi" ) ) ) ,new caterwaul.syntax( "&&" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_f" ) ) ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "push" ) ) ,new caterwaul.syntax( "_x" ) ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_xr" ) ) )'),qs7:('new caterwaul.syntax( ";" ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "new" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "constructor" ) ) ,new caterwaul.syntax( "" ) ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "0" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xl" ) ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "length" ) ) ) ) ) ,new caterwaul.syntax( "<" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "_xl" ) ) ) ,new caterwaul.syntax( "u++" ,new caterwaul.syntax( "_xi" ) ) ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_xi" ) ) ) ,new caterwaul.syntax( "||" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_f" ) ) ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "push" ) ) ,new caterwaul.syntax( "_x" ) ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_xr" ) ) )'),qs8:('new caterwaul.syntax( ";" ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "new" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "constructor" ) ) ,new caterwaul.syntax( "" ) ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "0" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xl" ) ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "length" ) ) ) ) ,new caterwaul.syntax( "y" ) ) ) ,new caterwaul.syntax( "<" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "_xl" ) ) ) ,new caterwaul.syntax( "u++" ,new caterwaul.syntax( "_xi" ) ) ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_xi" ) ) ) ,new caterwaul.syntax( "&&" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "y" ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_f" ) ) ) ) ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "push" ) ) ,new caterwaul.syntax( "y" ) ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_xr" ) ) )'),qs9:('new caterwaul.syntax( ";" ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "new" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "constructor" ) ) ,new caterwaul.syntax( "" ) ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "0" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xl" ) ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "length" ) ) ) ) ,new caterwaul.syntax( "_x0" ) ) ) ,new caterwaul.syntax( "<" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "_xl" ) ) ) ,new caterwaul.syntax( "u++" ,new caterwaul.syntax( "_xi" ) ) ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_xi" ) ) ) ,new caterwaul.syntax( "&&" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x0" ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_init" ) ) ) ) ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "push" ) ) ,new caterwaul.syntax( "_f" ) ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_xr" ) ) )'),qsa:('new caterwaul.syntax( ";" ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x0" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "0" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "1" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xl" ) ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "length" ) ) ) ) ) ,new caterwaul.syntax( "<" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "_xl" ) ) ) ,new caterwaul.syntax( "u++" ,new caterwaul.syntax( "_xi" ) ) ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_xi" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x0" ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_f" ) ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_x0" ) ) )'),qsb:('new caterwaul.syntax( ";" ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xl" ) ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "length" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "-" ,new caterwaul.syntax( "_xl" ) ,new caterwaul.syntax( "2" ) ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x0" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "-" ,new caterwaul.syntax( "_xl" ) ,new caterwaul.syntax( "1" ) ) ) ) ) ) ,new caterwaul.syntax( ">=" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "0" ) ) ) ,new caterwaul.syntax( "u--" ,new caterwaul.syntax( "_xi" ) ) ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_xi" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x0" ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_f" ) ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_x0" ) ) )'),qsc:('new caterwaul.syntax( ";" ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "[" ,new caterwaul.syntax( "" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "_xs" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "0" ) ) ) ) ,new caterwaul.syntax( "!==" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "null" ) ) ) ,new caterwaul.syntax( "u++" ,new caterwaul.syntax( "_xi" ) ) ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "push" ) ) ,new caterwaul.syntax( "_x" ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_f" ) ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_xr" ) ) )'),qsd:('new caterwaul.syntax( ";" ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x0" ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_init" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "0" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xl" ) ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "length" ) ) ) ) ) ,new caterwaul.syntax( "<" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "_xl" ) ) ) ,new caterwaul.syntax( "u++" ,new caterwaul.syntax( "_xi" ) ) ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_xi" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x0" ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_f" ) ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_x0" ) ) )'),qse:('new caterwaul.syntax( ";" ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xl" ) ,new caterwaul.syntax( "-" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "length" ) ) ,new caterwaul.syntax( "1" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "_xl" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x0" ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_init" ) ) ) ) ) ,new caterwaul.syntax( ">=" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "0" ) ) ) ,new caterwaul.syntax( "u--" ,new caterwaul.syntax( "_xi" ) ) ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_xi" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x0" ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_f" ) ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_x0" ) ) )'),qsf:('new caterwaul.syntax( ";" ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "[" ,new caterwaul.syntax( "" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "_xs" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "0" ) ) ) ,new caterwaul.syntax( "_x0" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x0" ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_init" ) ) ) ) ,new caterwaul.syntax( "u++" ,new caterwaul.syntax( "_xi" ) ) ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "push" ) ) ,new caterwaul.syntax( "_x" ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_f" ) ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_xr" ) ) )'),qsg:('new caterwaul.syntax( "i;" ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "0" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "0" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xl" ) ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "length" ) ) ) ) ,new caterwaul.syntax( "x" ) ) ) ,new caterwaul.syntax( "<" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "_xl" ) ) ) ,new caterwaul.syntax( "u++" ,new caterwaul.syntax( "_xi" ) ) ) ) ,new caterwaul.syntax( "{" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_xi" ) ) ) ,new caterwaul.syntax( "if" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "x" ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_f" ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "x" ) ) ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "false" ) ) )'),qsh:('new caterwaul.syntax( "i;" ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "0" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "0" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xl" ) ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "length" ) ) ) ) ,new caterwaul.syntax( "x" ) ) ) ,new caterwaul.syntax( "<" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "_xl" ) ) ) ,new caterwaul.syntax( "u++" ,new caterwaul.syntax( "_xi" ) ) ) ) ,new caterwaul.syntax( "{" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_xi" ) ) ) ,new caterwaul.syntax( "if" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "x" ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_f" ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "false" ) ) ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "true" ) ) )'),qsi:('new caterwaul.syntax( "i;" ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xl" ) ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "length" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "-" ,new caterwaul.syntax( "_xl" ) ,new caterwaul.syntax( "1" ) ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_xi" ) ) ) ) ,new caterwaul.syntax( "x" ) ) ) ,new caterwaul.syntax( ">=" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "0" ) ) ) ,new caterwaul.syntax( "u--" ,new caterwaul.syntax( "_xi" ) ) ) ) ,new caterwaul.syntax( "{" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_xi" ) ) ) ,new caterwaul.syntax( "if" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "x" ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_f" ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "x" ) ) ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "false" ) ) )'),qsj:('new caterwaul.syntax( "i;" ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "0" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "0" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xl" ) ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "length" ) ) ) ) ,new caterwaul.syntax( "x" ) ) ) ,new caterwaul.syntax( "<" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "_xl" ) ) ) ,new caterwaul.syntax( "u++" ,new caterwaul.syntax( "_xi" ) ) ) ) ,new caterwaul.syntax( "{" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_xi" ) ) ) ,new caterwaul.syntax( "if" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x0" ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_init" ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_f" ) ) ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "false" ) ) )'),qsk:('new caterwaul.syntax( "i;" ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xl" ) ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "length" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "-" ,new caterwaul.syntax( "_xl" ) ,new caterwaul.syntax( "1" ) ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_xi" ) ) ) ) ,new caterwaul.syntax( "x" ) ) ) ,new caterwaul.syntax( ">=" ,new caterwaul.syntax( "_xi" ) ,new caterwaul.syntax( "0" ) ) ) ,new caterwaul.syntax( "u--" ,new caterwaul.syntax( "_xi" ) ) ) ) ,new caterwaul.syntax( "{" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_xi" ) ) ) ,new caterwaul.syntax( "if" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x0" ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_init" ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_f" ) ) ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "false" ) ) )'),qsl:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "_xs" ) ) ) ,new caterwaul.syntax( "concat" ) ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "_ys" ) ) ) )'),qsm:('new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "new" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "constructor" ) ) ,new caterwaul.syntax( "" ) ) ) ) ) ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "in" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "_xs" ) ) ) ) ,new caterwaul.syntax( "if" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "Object" ) ,new caterwaul.syntax( "prototype" ) ) ,new caterwaul.syntax( "hasOwnProperty" ) ) ,new caterwaul.syntax( "call" ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_x" ) ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "_f" ) ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_x" ) ) ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_xr" ) ) )'),qsn:('new caterwaul.syntax( ";" ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "in" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "_xs" ) ) ) ) ,new caterwaul.syntax( "if" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "Object" ) ,new caterwaul.syntax( "prototype" ) ) ,new caterwaul.syntax( "hasOwnProperty" ) ) ,new caterwaul.syntax( "call" ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_x" ) ) ) ) ,new caterwaul.syntax( "_f" ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_xs" ) ) )'),qso:('new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "new" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "constructor" ) ) ,new caterwaul.syntax( "" ) ) ) ) ) ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "in" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "_xs" ) ) ) ) ,new caterwaul.syntax( "if" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "&&" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "Object" ) ,new caterwaul.syntax( "prototype" ) ) ,new caterwaul.syntax( "hasOwnProperty" ) ) ,new caterwaul.syntax( "call" ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_x" ) ) ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_f" ) ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "_x" ) ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_x" ) ) ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_xr" ) ) )'),qsp:('new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "new" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "constructor" ) ) ,new caterwaul.syntax( "" ) ) ) ) ) ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "in" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "_xs" ) ) ) ) ,new caterwaul.syntax( "if" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "&&" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "Object" ) ,new caterwaul.syntax( "prototype" ) ) ,new caterwaul.syntax( "hasOwnProperty" ) ) ,new caterwaul.syntax( "call" ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_x" ) ) ) ,new caterwaul.syntax( "u!" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_f" ) ) ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "_x" ) ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_x" ) ) ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_xr" ) ) )'),qsq:('new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "new" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "constructor" ) ) ,new caterwaul.syntax( "" ) ) ) ) ,new caterwaul.syntax( "x" ) ) ) ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "in" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "_xs" ) ) ) ) ,new caterwaul.syntax( "if" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "&&" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "Object" ) ,new caterwaul.syntax( "prototype" ) ) ,new caterwaul.syntax( "hasOwnProperty" ) ) ,new caterwaul.syntax( "call" ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_x" ) ) ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "x" ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_f" ) ) ) ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "x" ) ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_x" ) ) ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_xr" ) ) )'),qsr:('new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "new" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "constructor" ) ) ,new caterwaul.syntax( "" ) ) ) ) ) ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "in" ,new caterwaul.syntax( "k" ) ,new caterwaul.syntax( "_xs" ) ) ) ) ,new caterwaul.syntax( "if" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "Object" ) ,new caterwaul.syntax( "prototype" ) ) ,new caterwaul.syntax( "hasOwnProperty" ) ) ,new caterwaul.syntax( "call" ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "k" ) ) ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "k" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "k" ) ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_f" ) ) ) ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_xr" ) ) )'),qss:('new caterwaul.syntax( ";" ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "in" ,new caterwaul.syntax( "k" ) ,new caterwaul.syntax( "_xs" ) ) ) ) ,new caterwaul.syntax( "if" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "Object" ) ,new caterwaul.syntax( "prototype" ) ) ,new caterwaul.syntax( "hasOwnProperty" ) ) ,new caterwaul.syntax( "call" ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "k" ) ) ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "k" ) ) ) ,new caterwaul.syntax( "_f" ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_xs" ) ) )'),qst:('new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "new" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "constructor" ) ) ,new caterwaul.syntax( "" ) ) ) ) ) ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "in" ,new caterwaul.syntax( "k" ) ,new caterwaul.syntax( "_xs" ) ) ) ) ,new caterwaul.syntax( "if" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "Object" ) ,new caterwaul.syntax( "prototype" ) ) ,new caterwaul.syntax( "hasOwnProperty" ) ) ,new caterwaul.syntax( "call" ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "k" ) ) ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "k" ) ) ) ,new caterwaul.syntax( "&&" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_f" ) ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "k" ) ) ,new caterwaul.syntax( "_x" ) ) ) ) ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_xr" ) ) )'),qsu:('new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "new" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "constructor" ) ) ,new caterwaul.syntax( "" ) ) ) ) ) ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "in" ,new caterwaul.syntax( "k" ) ,new caterwaul.syntax( "_xs" ) ) ) ) ,new caterwaul.syntax( "if" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "Object" ) ,new caterwaul.syntax( "prototype" ) ) ,new caterwaul.syntax( "hasOwnProperty" ) ) ,new caterwaul.syntax( "call" ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "k" ) ) ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "k" ) ) ) ,new caterwaul.syntax( "||" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_f" ) ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "k" ) ) ,new caterwaul.syntax( "_x" ) ) ) ) ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_xr" ) ) )'),qsv:('new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "new" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "constructor" ) ) ,new caterwaul.syntax( "" ) ) ) ) ,new caterwaul.syntax( "x" ) ) ) ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "in" ,new caterwaul.syntax( "k" ) ,new caterwaul.syntax( "_xs" ) ) ) ) ,new caterwaul.syntax( "if" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "Object" ) ,new caterwaul.syntax( "prototype" ) ) ,new caterwaul.syntax( "hasOwnProperty" ) ) ,new caterwaul.syntax( "call" ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "k" ) ) ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "k" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "x" ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_f" ) ) ) ) ,new caterwaul.syntax( "&&" ,new caterwaul.syntax( "x" ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_xr" ) ,new caterwaul.syntax( "k" ) ) ,new caterwaul.syntax( "x" ) ) ) ) ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "_xr" ) ) )'),qsw:('new caterwaul.syntax( "u~" ,new caterwaul.syntax( "u!" ,new caterwaul.syntax( "_x" ) ) )'),qsx:('new caterwaul.syntax( "u!" ,new caterwaul.syntax( "_x" ) )'),qsy:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "_f" ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "_x0" ) ) )'),qsz:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "_f" ) ,new caterwaul.syntax( "_x" ) )'),qs10:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_var@0" ) ,new caterwaul.syntax( "_init" ) ) ,new caterwaul.syntax( "_x" ) )'),qs11:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "[" ,new caterwaul.syntax( "_init" ) ) ,new caterwaul.syntax( "_x" ) )'),qs12:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_var@0" ) ,new caterwaul.syntax( "_x" ) )'),qs13:('new caterwaul.syntax( "[" ,new caterwaul.syntax( "_x" ) )'),qs14:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "_x" ) )'),qs15:('new caterwaul.syntax( "_x" )'),qs16:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "+" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_ys" ) ) )'),qs17:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_x" ) ) )'),qs18:('new caterwaul.syntax( "(" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "_x" ) ) )'),qs19:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "_y" ) ) )'),qs1a:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "_x" ) ) ,new caterwaul.syntax( "_y" ) )'),qs1b:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_ys" ) ) )'),qs1c:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "_xs" ) ) ,new caterwaul.syntax( "_ys" ) )'),qs1d:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "[" ,new caterwaul.syntax( "_x" ) ) )'),qs1e:('new caterwaul.syntax( "[" ,new caterwaul.syntax( "_x" ) )'),qs1f:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "_y" ) ) )'),qs1g:('new caterwaul.syntax( "," ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "_x" ) ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "_y" ) ) )'),qs1h:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_p" ) ) )'),qs1i:('new caterwaul.syntax( "." ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "_xs" ) ) ,new caterwaul.syntax( "_p" ) )'),qs1j:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "u~" ,new caterwaul.syntax( "[" ,new caterwaul.syntax( "_x" ) ) ) )'),qs1k:('new caterwaul.syntax( "[" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "_x" ) ) )'),qs1l:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "u~" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_ys" ) ) ) )'),qs1m:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "_xs" ) ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "_ys" ) ) )'),qs1n:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "?" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "_y" ) ,new caterwaul.syntax( "_z" ) ) )'),qs1o:('new caterwaul.syntax( "?" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "_x" ) ) ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "_y" ) ) ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "_z" ) ) ) )'),qs1p:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "&&" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "_y" ) ) )'),qs1q:('new caterwaul.syntax( "&&" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "_x" ) ) ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "_y" ) ) ) )'),qs1r:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "||" ,new caterwaul.syntax( "_x" ) ,new caterwaul.syntax( "_y" ) ) )'),qs1s:('new caterwaul.syntax( "||" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "_x" ) ) ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "_y" ) ) ) )'),qs1t:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "u+" ,new caterwaul.syntax( "_xs" ) ) )'),qs1u:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "Array" ) ,new caterwaul.syntax( "prototype" ) ) ,new caterwaul.syntax( "slice" ) ) ,new caterwaul.syntax( "call" ) ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "_xs" ) ) ) )'),qs1v:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "%" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_thing" ) ) )'),qs1w:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "*" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_thing" ) ) )'),qs1x:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "/" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_thing" ) ) )'),qs1y:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "|" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "_thing" ) ) )'),qs1z:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "*" ,new caterwaul.syntax( "%" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "k" ) ) ,new caterwaul.syntax( "_thing" ) ) )'),qs20:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "*" ,new caterwaul.syntax( "%" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "v" ) ) ,new caterwaul.syntax( "_thing" ) ) )'),qs21:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "%" ,new caterwaul.syntax( "%" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "k" ) ) ,new caterwaul.syntax( "_thing" ) ) )'),qs22:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "%" ,new caterwaul.syntax( "%" ,new caterwaul.syntax( "_xs" ) ,new caterwaul.syntax( "v" ) ) ,new caterwaul.syntax( "_thing" ) ) )'),qs23:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "function" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "o" ) ) ,new caterwaul.syntax( "{" ,new caterwaul.syntax( "_body" ) ) ) ) ,new caterwaul.syntax( "call" ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "this" ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "_o" ) ) ) ) )'),qs24:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "function" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "i" ) ,new caterwaul.syntax( "u" ) ) ,new caterwaul.syntax( "s" ) ) ) ,new caterwaul.syntax( "{" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "if" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "<=" ,new caterwaul.syntax( "*" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "-" ,new caterwaul.syntax( "u" ) ,new caterwaul.syntax( "i" ) ) ) ,new caterwaul.syntax( "s" ) ) ,new caterwaul.syntax( "0" ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "[" ,new caterwaul.syntax( "" ) ) ) ) ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "r" ) ,new caterwaul.syntax( "[" ,new caterwaul.syntax( "" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "d" ) ,new caterwaul.syntax( "-" ,new caterwaul.syntax( "u" ) ,new caterwaul.syntax( "i" ) ) ) ) ) ,new caterwaul.syntax( "?" ,new caterwaul.syntax( ">" ,new caterwaul.syntax( "d" ) ,new caterwaul.syntax( "0" ) ) ,new caterwaul.syntax( "<" ,new caterwaul.syntax( "i" ) ,new caterwaul.syntax( "u" ) ) ,new caterwaul.syntax( ">" ,new caterwaul.syntax( "i" ) ,new caterwaul.syntax( "u" ) ) ) ) ,new caterwaul.syntax( "+=" ,new caterwaul.syntax( "i" ) ,new caterwaul.syntax( "s" ) ) ) ) ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "r" ) ,new caterwaul.syntax( "push" ) ) ,new caterwaul.syntax( "i" ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "r" ) ) ) ) ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_l" ) ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_u" ) ) ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_step" ) ) ) )'),qs25:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "function" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "i" ) ,new caterwaul.syntax( "u" ) ) ,new caterwaul.syntax( "s" ) ) ) ,new caterwaul.syntax( "{" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "if" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "||" ,new caterwaul.syntax( "<" ,new caterwaul.syntax( "*" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "-" ,new caterwaul.syntax( "u" ) ,new caterwaul.syntax( "i" ) ) ) ,new caterwaul.syntax( "s" ) ) ,new caterwaul.syntax( "0" ) ) ,new caterwaul.syntax( "u!" ,new caterwaul.syntax( "s" ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "[" ,new caterwaul.syntax( "" ) ) ) ) ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "r" ) ,new caterwaul.syntax( "[" ,new caterwaul.syntax( "" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "d" ) ,new caterwaul.syntax( "-" ,new caterwaul.syntax( "u" ) ,new caterwaul.syntax( "i" ) ) ) ) ) ,new caterwaul.syntax( "?" ,new caterwaul.syntax( ">" ,new caterwaul.syntax( "d" ) ,new caterwaul.syntax( "0" ) ) ,new caterwaul.syntax( "<=" ,new caterwaul.syntax( "i" ) ,new caterwaul.syntax( "u" ) ) ,new caterwaul.syntax( ">=" ,new caterwaul.syntax( "i" ) ,new caterwaul.syntax( "u" ) ) ) ) ,new caterwaul.syntax( "+=" ,new caterwaul.syntax( "i" ) ,new caterwaul.syntax( "s" ) ) ) ) ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "r" ) ,new caterwaul.syntax( "push" ) ) ,new caterwaul.syntax( "i" ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "r" ) ) ) ) ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_l" ) ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_u" ) ) ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_step" ) ) ) )'),qs26:('new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "ks" ) ,new caterwaul.syntax( "[" ,new caterwaul.syntax( "" ) ) ) ) ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "in" ,new caterwaul.syntax( "k" ) ,new caterwaul.syntax( "o" ) ) ) ) ,new caterwaul.syntax( "&&" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "Object" ) ,new caterwaul.syntax( "prototype" ) ) ,new caterwaul.syntax( "hasOwnProperty" ) ) ,new caterwaul.syntax( "call" ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "o" ) ,new caterwaul.syntax( "k" ) ) ) ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "ks" ) ,new caterwaul.syntax( "push" ) ) ,new caterwaul.syntax( "k" ) ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "ks" ) ) )'),qs27:('new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "vs" ) ,new caterwaul.syntax( "[" ,new caterwaul.syntax( "" ) ) ) ) ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "in" ,new caterwaul.syntax( "k" ) ,new caterwaul.syntax( "o" ) ) ) ) ,new caterwaul.syntax( "&&" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "Object" ) ,new caterwaul.syntax( "prototype" ) ) ,new caterwaul.syntax( "hasOwnProperty" ) ) ,new caterwaul.syntax( "call" ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "o" ) ,new caterwaul.syntax( "k" ) ) ) ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "vs" ) ,new caterwaul.syntax( "push" ) ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "o" ) ,new caterwaul.syntax( "k" ) ) ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "vs" ) ) )'),qs28:('new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "ps" ) ,new caterwaul.syntax( "[" ,new caterwaul.syntax( "" ) ) ) ) ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "in" ,new caterwaul.syntax( "k" ) ,new caterwaul.syntax( "o" ) ) ) ) ,new caterwaul.syntax( "&&" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "." ,new caterwaul.syntax( "Object" ) ,new caterwaul.syntax( "prototype" ) ) ,new caterwaul.syntax( "hasOwnProperty" ) ) ,new caterwaul.syntax( "call" ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "o" ) ,new caterwaul.syntax( "k" ) ) ) ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "ps" ) ,new caterwaul.syntax( "push" ) ) ,new caterwaul.syntax( "[" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "k" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "o" ) ,new caterwaul.syntax( "k" ) ) ) ) ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "ps" ) ) )'),qs29:('new caterwaul.syntax( ";" ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "r" ) ,new caterwaul.syntax( "{" ,new caterwaul.syntax( "" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "i" ) ,new caterwaul.syntax( "0" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "l" ) ,new caterwaul.syntax( "." ,new caterwaul.syntax( "o" ) ,new caterwaul.syntax( "length" ) ) ) ) ,new caterwaul.syntax( "x" ) ) ) ,new caterwaul.syntax( "<" ,new caterwaul.syntax( "i" ) ,new caterwaul.syntax( "l" ) ) ) ,new caterwaul.syntax( "u++" ,new caterwaul.syntax( "i" ) ) ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "x" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "o" ) ,new caterwaul.syntax( "i" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "r" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "x" ) ,new caterwaul.syntax( "0" ) ) ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "x" ) ,new caterwaul.syntax( "1" ) ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "r" ) ) )'),qs2a:('new caterwaul.syntax( ";" ,new caterwaul.syntax( "for" ,new caterwaul.syntax( "(" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( ";" ,new caterwaul.syntax( "var" ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "r" ) ,new caterwaul.syntax( "{" ,new caterwaul.syntax( "" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "i" ) ,new caterwaul.syntax( "0" ) ) ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "l" ) ,new caterwaul.syntax( "." ,new caterwaul.syntax( "o" ) ,new caterwaul.syntax( "length" ) ) ) ) ,new caterwaul.syntax( "x" ) ) ) ,new caterwaul.syntax( "<" ,new caterwaul.syntax( "i" ) ,new caterwaul.syntax( "l" ) ) ) ,new caterwaul.syntax( "u++" ,new caterwaul.syntax( "i" ) ) ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "x" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "o" ) ,new caterwaul.syntax( "i" ) ) ) ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "||" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "r" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "x" ) ,new caterwaul.syntax( "0" ) ) ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "r" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "x" ) ,new caterwaul.syntax( "0" ) ) ) ,new caterwaul.syntax( "[" ,new caterwaul.syntax( "" ) ) ) ) ) ) ,new caterwaul.syntax( "push" ) ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "x" ) ,new caterwaul.syntax( "1" ) ) ) ) ) ,new caterwaul.syntax( "return" ,new caterwaul.syntax( "r" ) ) )'),qs2b:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "n" ) ,new caterwaul.syntax( "_u" ) ) )'),qs2c:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "ni" ) ,new caterwaul.syntax( "_u" ) ) )'),qs2d:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "n" ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "_l" ) ,new caterwaul.syntax( "_u" ) ) ) )'),qs2e:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "ni" ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "_l" ) ,new caterwaul.syntax( "_u" ) ) ) )'),qs2f:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "n" ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "_l" ) ,new caterwaul.syntax( "_u" ) ) ,new caterwaul.syntax( "_step" ) ) ) )'),qs2g:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "ni" ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "," ,new caterwaul.syntax( "_l" ) ,new caterwaul.syntax( "_u" ) ) ,new caterwaul.syntax( "_step" ) ) ) )'),qs2h:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "/" ,new caterwaul.syntax( "_o" ) ,new caterwaul.syntax( "keys" ) ) )'),qs2i:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "|" ,new caterwaul.syntax( "_o" ) ,new caterwaul.syntax( "object" ) ) )'),qs2j:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "/" ,new caterwaul.syntax( "_o" ) ,new caterwaul.syntax( "mobject" ) ) )'),qs2k:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "/" ,new caterwaul.syntax( "_o" ) ,new caterwaul.syntax( "values" ) ) )'),qs2l:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "-" ,new caterwaul.syntax( "_o" ) ,new caterwaul.syntax( "object" ) ) )'),qs2m:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "-" ,new caterwaul.syntax( "_o" ) ,new caterwaul.syntax( "mobject" ) ) )'),qs2n:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "/" ,new caterwaul.syntax( "_o" ) ,new caterwaul.syntax( "pairs" ) ) )'),qs2o:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "/" ,new caterwaul.syntax( "_o" ) ,new caterwaul.syntax( "object" ) ) )'),qs2p:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "|" ,new caterwaul.syntax( "_o" ) ,new caterwaul.syntax( "mobject" ) ) )')};
return(result)}).call(this,new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("_expression")),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("(",new caterwaul.syntax("function",new caterwaul.syntax("(",new caterwaul.syntax("_xs")),new caterwaul.syntax("{",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax("_x"),new caterwaul.syntax("_x0")),new caterwaul.syntax("_xi")),new caterwaul.syntax("_xl")),new caterwaul.syntax("_xr"))),new caterwaul.syntax("_body"))))),new caterwaul.syntax("call")),new caterwaul.syntax(",",new caterwaul.syntax("this"),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("_s")))),new caterwaul.syntax(";",new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_xr"),new caterwaul.syntax("new",new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("constructor")),new caterwaul.syntax("")))),new caterwaul.syntax("=",new caterwaul.syntax("_xi"),new caterwaul.syntax("0"))),new caterwaul.syntax("=",new caterwaul.syntax("_xl"),new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("length"))))),new caterwaul.syntax("<",new caterwaul.syntax("_xi"),new caterwaul.syntax("_xl"))),new caterwaul.syntax("u++",new caterwaul.syntax("_xi")))),new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("_xi"))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("_xr"),new caterwaul.syntax("push")),new caterwaul.syntax("(",new caterwaul.syntax("_f"))))),new caterwaul.syntax("return",new caterwaul.syntax("_xr"))),new caterwaul.syntax(";",new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_xi"),new caterwaul.syntax("0")),new caterwaul.syntax("=",new caterwaul.syntax("_xl"),new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("length"))))),new caterwaul.syntax("<",new caterwaul.syntax("_xi"),new caterwaul.syntax("_xl"))),new caterwaul.syntax("u++",new caterwaul.syntax("_xi")))),new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("_xi"))),new caterwaul.syntax("(",new caterwaul.syntax("_f")))),new caterwaul.syntax("return",new caterwaul.syntax("_xs"))),new caterwaul.syntax(";",new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_xr"),new caterwaul.syntax("new",new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("constructor")),new caterwaul.syntax("")))),new caterwaul.syntax("=",new caterwaul.syntax("_xi"),new caterwaul.syntax("0"))),new caterwaul.syntax("=",new caterwaul.syntax("_xl"),new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("length"))))),new caterwaul.syntax("<",new caterwaul.syntax("_xi"),new caterwaul.syntax("_xl"))),new caterwaul.syntax("u++",new caterwaul.syntax("_xi")))),new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("_xi"))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax("_xr"),new caterwaul.syntax("push")),new caterwaul.syntax("apply")),new caterwaul.syntax(",",new caterwaul.syntax("_xr"),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax("Array"),new caterwaul.syntax("prototype")),new caterwaul.syntax("slice")),new caterwaul.syntax("call")),new caterwaul.syntax("(",new caterwaul.syntax("_f"))))))),new caterwaul.syntax("return",new caterwaul.syntax("_xr"))),new caterwaul.syntax(";",new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("_xs")),new caterwaul.syntax("=",new caterwaul.syntax("_xi"),new caterwaul.syntax("0"))),new caterwaul.syntax("_x0")),new caterwaul.syntax("_xl"))),new caterwaul.syntax("=",new caterwaul.syntax("_x0"),new caterwaul.syntax("(",new caterwaul.syntax("_init")))),new caterwaul.syntax("u++",new caterwaul.syntax("_xi")))),new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("(",new caterwaul.syntax("_f")))),new caterwaul.syntax("return",new caterwaul.syntax("_x"))),new caterwaul.syntax(";",new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_xr"),new caterwaul.syntax("new",new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("constructor")),new caterwaul.syntax("")))),new caterwaul.syntax("=",new caterwaul.syntax("_xi"),new caterwaul.syntax("0"))),new caterwaul.syntax("=",new caterwaul.syntax("_xl"),new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("length"))))),new caterwaul.syntax("<",new caterwaul.syntax("_xi"),new caterwaul.syntax("_xl"))),new caterwaul.syntax("u++",new caterwaul.syntax("_xi")))),new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("_xi"))),new caterwaul.syntax("&&",new caterwaul.syntax("(",new caterwaul.syntax("_f")),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("_xr"),new caterwaul.syntax("push")),new caterwaul.syntax("_x"))))),new caterwaul.syntax("return",new caterwaul.syntax("_xr"))),new caterwaul.syntax(";",new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_xr"),new caterwaul.syntax("new",new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("constructor")),new caterwaul.syntax("")))),new caterwaul.syntax("=",new caterwaul.syntax("_xi"),new caterwaul.syntax("0"))),new caterwaul.syntax("=",new caterwaul.syntax("_xl"),new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("length"))))),new caterwaul.syntax("<",new caterwaul.syntax("_xi"),new caterwaul.syntax("_xl"))),new caterwaul.syntax("u++",new caterwaul.syntax("_xi")))),new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("_xi"))),new caterwaul.syntax("||",new caterwaul.syntax("(",new caterwaul.syntax("_f")),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("_xr"),new caterwaul.syntax("push")),new caterwaul.syntax("_x"))))),new caterwaul.syntax("return",new caterwaul.syntax("_xr"))),new caterwaul.syntax(";",new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_xr"),new caterwaul.syntax("new",new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("constructor")),new caterwaul.syntax("")))),new caterwaul.syntax("=",new caterwaul.syntax("_xi"),new caterwaul.syntax("0"))),new caterwaul.syntax("=",new caterwaul.syntax("_xl"),new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("length")))),new caterwaul.syntax("y"))),new caterwaul.syntax("<",new caterwaul.syntax("_xi"),new caterwaul.syntax("_xl"))),new caterwaul.syntax("u++",new caterwaul.syntax("_xi")))),new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("_xi"))),new caterwaul.syntax("&&",new caterwaul.syntax("(",new caterwaul.syntax("=",new caterwaul.syntax("y"),new caterwaul.syntax("(",new caterwaul.syntax("_f")))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("_xr"),new caterwaul.syntax("push")),new caterwaul.syntax("y"))))),new caterwaul.syntax("return",new caterwaul.syntax("_xr"))),new caterwaul.syntax(";",new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_xr"),new caterwaul.syntax("new",new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("constructor")),new caterwaul.syntax("")))),new caterwaul.syntax("=",new caterwaul.syntax("_xi"),new caterwaul.syntax("0"))),new caterwaul.syntax("=",new caterwaul.syntax("_xl"),new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("length")))),new caterwaul.syntax("_x0"))),new caterwaul.syntax("<",new caterwaul.syntax("_xi"),new caterwaul.syntax("_xl"))),new caterwaul.syntax("u++",new caterwaul.syntax("_xi")))),new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("_xi"))),new caterwaul.syntax("&&",new caterwaul.syntax("(",new caterwaul.syntax("=",new caterwaul.syntax("_x0"),new caterwaul.syntax("(",new caterwaul.syntax("_init")))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("_xr"),new caterwaul.syntax("push")),new caterwaul.syntax("_f"))))),new caterwaul.syntax("return",new caterwaul.syntax("_xr"))),new caterwaul.syntax(";",new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_x0"),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("0"))),new caterwaul.syntax("=",new caterwaul.syntax("_xi"),new caterwaul.syntax("1"))),new caterwaul.syntax("=",new caterwaul.syntax("_xl"),new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("length"))))),new caterwaul.syntax("<",new caterwaul.syntax("_xi"),new caterwaul.syntax("_xl"))),new caterwaul.syntax("u++",new caterwaul.syntax("_xi")))),new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("_xi"))),new caterwaul.syntax("=",new caterwaul.syntax("_x0"),new caterwaul.syntax("(",new caterwaul.syntax("_f"))))),new caterwaul.syntax("return",new caterwaul.syntax("_x0"))),new caterwaul.syntax(";",new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_xl"),new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("length"))),new caterwaul.syntax("=",new caterwaul.syntax("_xi"),new caterwaul.syntax("-",new caterwaul.syntax("_xl"),new caterwaul.syntax("2")))),new caterwaul.syntax("=",new caterwaul.syntax("_x0"),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("-",new caterwaul.syntax("_xl"),new caterwaul.syntax("1")))))),new caterwaul.syntax(">=",new caterwaul.syntax("_xi"),new caterwaul.syntax("0"))),new caterwaul.syntax("u--",new caterwaul.syntax("_xi")))),new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("_xi"))),new caterwaul.syntax("=",new caterwaul.syntax("_x0"),new caterwaul.syntax("(",new caterwaul.syntax("_f"))))),new caterwaul.syntax("return",new caterwaul.syntax("_x0"))),new caterwaul.syntax(";",new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_xr"),new caterwaul.syntax("[",new caterwaul.syntax(""))),new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("_xs"))),new caterwaul.syntax("=",new caterwaul.syntax("_xi"),new caterwaul.syntax("0")))),new caterwaul.syntax("!==",new caterwaul.syntax("_x"),new caterwaul.syntax("null"))),new caterwaul.syntax("u++",new caterwaul.syntax("_xi")))),new caterwaul.syntax(",",new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("_xr"),new caterwaul.syntax("push")),new caterwaul.syntax("_x")),new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("(",new caterwaul.syntax("_f"))))),new caterwaul.syntax("return",new caterwaul.syntax("_xr"))),new caterwaul.syntax(";",new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_x0"),new caterwaul.syntax("(",new caterwaul.syntax("_init"))),new caterwaul.syntax("=",new caterwaul.syntax("_xi"),new caterwaul.syntax("0"))),new caterwaul.syntax("=",new caterwaul.syntax("_xl"),new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("length"))))),new caterwaul.syntax("<",new caterwaul.syntax("_xi"),new caterwaul.syntax("_xl"))),new caterwaul.syntax("u++",new caterwaul.syntax("_xi")))),new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("_xi"))),new caterwaul.syntax("=",new caterwaul.syntax("_x0"),new caterwaul.syntax("(",new caterwaul.syntax("_f"))))),new caterwaul.syntax("return",new caterwaul.syntax("_x0"))),new caterwaul.syntax(";",new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_xl"),new caterwaul.syntax("-",new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("length")),new caterwaul.syntax("1"))),new caterwaul.syntax("=",new caterwaul.syntax("_xi"),new caterwaul.syntax("_xl"))),new caterwaul.syntax("=",new caterwaul.syntax("_x0"),new caterwaul.syntax("(",new caterwaul.syntax("_init"))))),new caterwaul.syntax(">=",new caterwaul.syntax("_xi"),new caterwaul.syntax("0"))),new caterwaul.syntax("u--",new caterwaul.syntax("_xi")))),new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("_xi"))),new caterwaul.syntax("=",new caterwaul.syntax("_x0"),new caterwaul.syntax("(",new caterwaul.syntax("_f"))))),new caterwaul.syntax("return",new caterwaul.syntax("_x0"))),new caterwaul.syntax(";",new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_xr"),new caterwaul.syntax("[",new caterwaul.syntax(""))),new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("_xs"))),new caterwaul.syntax("=",new caterwaul.syntax("_xi"),new caterwaul.syntax("0"))),new caterwaul.syntax("_x0"))),new caterwaul.syntax("=",new caterwaul.syntax("_x0"),new caterwaul.syntax("(",new caterwaul.syntax("_init")))),new caterwaul.syntax("u++",new caterwaul.syntax("_xi")))),new caterwaul.syntax(",",new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("_xr"),new caterwaul.syntax("push")),new caterwaul.syntax("_x")),new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("(",new caterwaul.syntax("_f"))))),new caterwaul.syntax("return",new caterwaul.syntax("_xr"))),new caterwaul.syntax("i;",new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("0"))),new caterwaul.syntax("=",new caterwaul.syntax("_xi"),new caterwaul.syntax("0"))),new caterwaul.syntax("=",new caterwaul.syntax("_xl"),new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("length")))),new caterwaul.syntax("x"))),new caterwaul.syntax("<",new caterwaul.syntax("_xi"),new caterwaul.syntax("_xl"))),new caterwaul.syntax("u++",new caterwaul.syntax("_xi")))),new caterwaul.syntax("{",new caterwaul.syntax(";",new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("_xi"))),new caterwaul.syntax("if",new caterwaul.syntax("(",new caterwaul.syntax("=",new caterwaul.syntax("x"),new caterwaul.syntax("(",new caterwaul.syntax("_f")))),new caterwaul.syntax("return",new caterwaul.syntax("x")))))),new caterwaul.syntax("return",new caterwaul.syntax("false"))),new caterwaul.syntax("i;",new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("0"))),new caterwaul.syntax("=",new caterwaul.syntax("_xi"),new caterwaul.syntax("0"))),new caterwaul.syntax("=",new caterwaul.syntax("_xl"),new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("length")))),new caterwaul.syntax("x"))),new caterwaul.syntax("<",new caterwaul.syntax("_xi"),new caterwaul.syntax("_xl"))),new caterwaul.syntax("u++",new caterwaul.syntax("_xi")))),new caterwaul.syntax("{",new caterwaul.syntax(";",new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("_xi"))),new caterwaul.syntax("if",new caterwaul.syntax("(",new caterwaul.syntax("=",new caterwaul.syntax("x"),new caterwaul.syntax("(",new caterwaul.syntax("_f")))),new caterwaul.syntax("return",new caterwaul.syntax("false")))))),new caterwaul.syntax("return",new caterwaul.syntax("true"))),new caterwaul.syntax("i;",new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_xl"),new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("length"))),new caterwaul.syntax("=",new caterwaul.syntax("_xi"),new caterwaul.syntax("-",new caterwaul.syntax("_xl"),new caterwaul.syntax("1")))),new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("_xi")))),new caterwaul.syntax("x"))),new caterwaul.syntax(">=",new caterwaul.syntax("_xi"),new caterwaul.syntax("0"))),new caterwaul.syntax("u--",new caterwaul.syntax("_xi")))),new caterwaul.syntax("{",new caterwaul.syntax(";",new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("_xi"))),new caterwaul.syntax("if",new caterwaul.syntax("(",new caterwaul.syntax("=",new caterwaul.syntax("x"),new caterwaul.syntax("(",new caterwaul.syntax("_f")))),new caterwaul.syntax("return",new caterwaul.syntax("x")))))),new caterwaul.syntax("return",new caterwaul.syntax("false"))),new caterwaul.syntax("i;",new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("0"))),new caterwaul.syntax("=",new caterwaul.syntax("_xi"),new caterwaul.syntax("0"))),new caterwaul.syntax("=",new caterwaul.syntax("_xl"),new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("length")))),new caterwaul.syntax("x"))),new caterwaul.syntax("<",new caterwaul.syntax("_xi"),new caterwaul.syntax("_xl"))),new caterwaul.syntax("u++",new caterwaul.syntax("_xi")))),new caterwaul.syntax("{",new caterwaul.syntax(";",new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("_xi"))),new caterwaul.syntax("if",new caterwaul.syntax("(",new caterwaul.syntax("=",new caterwaul.syntax("_x0"),new caterwaul.syntax("(",new caterwaul.syntax("_init")))),new caterwaul.syntax("return",new caterwaul.syntax("_f")))))),new caterwaul.syntax("return",new caterwaul.syntax("false"))),new caterwaul.syntax("i;",new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_xl"),new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("length"))),new caterwaul.syntax("=",new caterwaul.syntax("_xi"),new caterwaul.syntax("-",new caterwaul.syntax("_xl"),new caterwaul.syntax("1")))),new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("_xi")))),new caterwaul.syntax("x"))),new caterwaul.syntax(">=",new caterwaul.syntax("_xi"),new caterwaul.syntax("0"))),new caterwaul.syntax("u--",new caterwaul.syntax("_xi")))),new caterwaul.syntax("{",new caterwaul.syntax(";",new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("_xi"))),new caterwaul.syntax("if",new caterwaul.syntax("(",new caterwaul.syntax("=",new caterwaul.syntax("_x0"),new caterwaul.syntax("(",new caterwaul.syntax("_init")))),new caterwaul.syntax("return",new caterwaul.syntax("_f")))))),new caterwaul.syntax("return",new caterwaul.syntax("false"))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("(",new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("_xs"))),new caterwaul.syntax("concat")),new caterwaul.syntax("(",new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("_ys")))),new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax("=",new caterwaul.syntax("_xr"),new caterwaul.syntax("new",new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("constructor")),new caterwaul.syntax(""))))),new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax("var",new caterwaul.syntax("in",new caterwaul.syntax("_x"),new caterwaul.syntax("_xs")))),new caterwaul.syntax("if",new caterwaul.syntax("(",new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax("Object"),new caterwaul.syntax("prototype")),new caterwaul.syntax("hasOwnProperty")),new caterwaul.syntax("call")),new caterwaul.syntax(",",new caterwaul.syntax("_xs"),new caterwaul.syntax("_x")))),new caterwaul.syntax("=",new caterwaul.syntax("[]",new caterwaul.syntax("_xr"),new caterwaul.syntax("_f")),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("_x")))))),new caterwaul.syntax("return",new caterwaul.syntax("_xr"))),new caterwaul.syntax(";",new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax("var",new caterwaul.syntax("in",new caterwaul.syntax("_x"),new caterwaul.syntax("_xs")))),new caterwaul.syntax("if",new caterwaul.syntax("(",new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax("Object"),new caterwaul.syntax("prototype")),new caterwaul.syntax("hasOwnProperty")),new caterwaul.syntax("call")),new caterwaul.syntax(",",new caterwaul.syntax("_xs"),new caterwaul.syntax("_x")))),new caterwaul.syntax("_f"))),new caterwaul.syntax("return",new caterwaul.syntax("_xs"))),new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax("=",new caterwaul.syntax("_xr"),new caterwaul.syntax("new",new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("constructor")),new caterwaul.syntax(""))))),new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax("var",new caterwaul.syntax("in",new caterwaul.syntax("_x"),new caterwaul.syntax("_xs")))),new caterwaul.syntax("if",new caterwaul.syntax("(",new caterwaul.syntax("&&",new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax("Object"),new caterwaul.syntax("prototype")),new caterwaul.syntax("hasOwnProperty")),new caterwaul.syntax("call")),new caterwaul.syntax(",",new caterwaul.syntax("_xs"),new caterwaul.syntax("_x"))),new caterwaul.syntax("(",new caterwaul.syntax("_f")))),new caterwaul.syntax("=",new caterwaul.syntax("[]",new caterwaul.syntax("_xr"),new caterwaul.syntax("_x")),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("_x")))))),new caterwaul.syntax("return",new caterwaul.syntax("_xr"))),new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax("=",new caterwaul.syntax("_xr"),new caterwaul.syntax("new",new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("constructor")),new caterwaul.syntax(""))))),new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax("var",new caterwaul.syntax("in",new caterwaul.syntax("_x"),new caterwaul.syntax("_xs")))),new caterwaul.syntax("if",new caterwaul.syntax("(",new caterwaul.syntax("&&",new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax("Object"),new caterwaul.syntax("prototype")),new caterwaul.syntax("hasOwnProperty")),new caterwaul.syntax("call")),new caterwaul.syntax(",",new caterwaul.syntax("_xs"),new caterwaul.syntax("_x"))),new caterwaul.syntax("u!",new caterwaul.syntax("(",new caterwaul.syntax("_f"))))),new caterwaul.syntax("=",new caterwaul.syntax("[]",new caterwaul.syntax("_xr"),new caterwaul.syntax("_x")),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("_x")))))),new caterwaul.syntax("return",new caterwaul.syntax("_xr"))),new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_xr"),new caterwaul.syntax("new",new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("constructor")),new caterwaul.syntax("")))),new caterwaul.syntax("x"))),new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax("var",new caterwaul.syntax("in",new caterwaul.syntax("_x"),new caterwaul.syntax("_xs")))),new caterwaul.syntax("if",new caterwaul.syntax("(",new caterwaul.syntax("&&",new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax("Object"),new caterwaul.syntax("prototype")),new caterwaul.syntax("hasOwnProperty")),new caterwaul.syntax("call")),new caterwaul.syntax(",",new caterwaul.syntax("_xs"),new caterwaul.syntax("_x"))),new caterwaul.syntax("(",new caterwaul.syntax("=",new caterwaul.syntax("x"),new caterwaul.syntax("(",new caterwaul.syntax("_f")))))),new caterwaul.syntax("=",new caterwaul.syntax("[]",new caterwaul.syntax("_xr"),new caterwaul.syntax("x")),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("_x")))))),new caterwaul.syntax("return",new caterwaul.syntax("_xr"))),new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax("=",new caterwaul.syntax("_xr"),new caterwaul.syntax("new",new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("constructor")),new caterwaul.syntax(""))))),new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax("var",new caterwaul.syntax("in",new caterwaul.syntax("k"),new caterwaul.syntax("_xs")))),new caterwaul.syntax("if",new caterwaul.syntax("(",new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax("Object"),new caterwaul.syntax("prototype")),new caterwaul.syntax("hasOwnProperty")),new caterwaul.syntax("call")),new caterwaul.syntax(",",new caterwaul.syntax("_xs"),new caterwaul.syntax("k")))),new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("k"))),new caterwaul.syntax("=",new caterwaul.syntax("[]",new caterwaul.syntax("_xr"),new caterwaul.syntax("k")),new caterwaul.syntax("(",new caterwaul.syntax("_f"))))))),new caterwaul.syntax("return",new caterwaul.syntax("_xr"))),new caterwaul.syntax(";",new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax("var",new caterwaul.syntax("in",new caterwaul.syntax("k"),new caterwaul.syntax("_xs")))),new caterwaul.syntax("if",new caterwaul.syntax("(",new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax("Object"),new caterwaul.syntax("prototype")),new caterwaul.syntax("hasOwnProperty")),new caterwaul.syntax("call")),new caterwaul.syntax(",",new caterwaul.syntax("_xs"),new caterwaul.syntax("k")))),new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("k"))),new caterwaul.syntax("_f")))),new caterwaul.syntax("return",new caterwaul.syntax("_xs"))),new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax("=",new caterwaul.syntax("_xr"),new caterwaul.syntax("new",new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("constructor")),new caterwaul.syntax(""))))),new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax("var",new caterwaul.syntax("in",new caterwaul.syntax("k"),new caterwaul.syntax("_xs")))),new caterwaul.syntax("if",new caterwaul.syntax("(",new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax("Object"),new caterwaul.syntax("prototype")),new caterwaul.syntax("hasOwnProperty")),new caterwaul.syntax("call")),new caterwaul.syntax(",",new caterwaul.syntax("_xs"),new caterwaul.syntax("k")))),new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("k"))),new caterwaul.syntax("&&",new caterwaul.syntax("(",new caterwaul.syntax("_f")),new caterwaul.syntax("(",new caterwaul.syntax("=",new caterwaul.syntax("[]",new caterwaul.syntax("_xr"),new caterwaul.syntax("k")),new caterwaul.syntax("_x")))))))),new caterwaul.syntax("return",new caterwaul.syntax("_xr"))),new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax("=",new caterwaul.syntax("_xr"),new caterwaul.syntax("new",new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("constructor")),new caterwaul.syntax(""))))),new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax("var",new caterwaul.syntax("in",new caterwaul.syntax("k"),new caterwaul.syntax("_xs")))),new caterwaul.syntax("if",new caterwaul.syntax("(",new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax("Object"),new caterwaul.syntax("prototype")),new caterwaul.syntax("hasOwnProperty")),new caterwaul.syntax("call")),new caterwaul.syntax(",",new caterwaul.syntax("_xs"),new caterwaul.syntax("k")))),new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("k"))),new caterwaul.syntax("||",new caterwaul.syntax("(",new caterwaul.syntax("_f")),new caterwaul.syntax("(",new caterwaul.syntax("=",new caterwaul.syntax("[]",new caterwaul.syntax("_xr"),new caterwaul.syntax("k")),new caterwaul.syntax("_x")))))))),new caterwaul.syntax("return",new caterwaul.syntax("_xr"))),new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_xr"),new caterwaul.syntax("new",new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("constructor")),new caterwaul.syntax("")))),new caterwaul.syntax("x"))),new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax("var",new caterwaul.syntax("in",new caterwaul.syntax("k"),new caterwaul.syntax("_xs")))),new caterwaul.syntax("if",new caterwaul.syntax("(",new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax("Object"),new caterwaul.syntax("prototype")),new caterwaul.syntax("hasOwnProperty")),new caterwaul.syntax("call")),new caterwaul.syntax(",",new caterwaul.syntax("_xs"),new caterwaul.syntax("k")))),new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("_x"),new caterwaul.syntax("[]",new caterwaul.syntax("_xs"),new caterwaul.syntax("k"))),new caterwaul.syntax("=",new caterwaul.syntax("x"),new caterwaul.syntax("(",new caterwaul.syntax("_f")))),new caterwaul.syntax("&&",new caterwaul.syntax("x"),new caterwaul.syntax("(",new caterwaul.syntax("=",new caterwaul.syntax("[]",new caterwaul.syntax("_xr"),new caterwaul.syntax("k")),new caterwaul.syntax("x")))))))),new caterwaul.syntax("return",new caterwaul.syntax("_xr"))),new caterwaul.syntax("u~",new caterwaul.syntax("u!",new caterwaul.syntax("_x"))),new caterwaul.syntax("u!",new caterwaul.syntax("_x")),new caterwaul.syntax("()",new caterwaul.syntax("_f"),new caterwaul.syntax(",",new caterwaul.syntax("_x"),new caterwaul.syntax("_x0"))),new caterwaul.syntax("()",new caterwaul.syntax("_f"),new caterwaul.syntax("_x")),new caterwaul.syntax("[]",new caterwaul.syntax("[]",new caterwaul.syntax("_var@0"),new caterwaul.syntax("_init")),new caterwaul.syntax("_x")),new caterwaul.syntax("[]",new caterwaul.syntax("[",new caterwaul.syntax("_init")),new caterwaul.syntax("_x")),new caterwaul.syntax("[]",new caterwaul.syntax("_var@0"),new caterwaul.syntax("_x")),new caterwaul.syntax("[",new caterwaul.syntax("_x")),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("_x")),new caterwaul.syntax("_x"),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("+",new caterwaul.syntax("_xs"),new caterwaul.syntax("_ys"))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("(",new caterwaul.syntax("_x"))),new caterwaul.syntax("(",new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("_x"))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("[]",new caterwaul.syntax("_x"),new caterwaul.syntax("_y"))),new caterwaul.syntax("[]",new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("_x")),new caterwaul.syntax("_y")),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("()",new caterwaul.syntax("_xs"),new caterwaul.syntax("_ys"))),new caterwaul.syntax("()",new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("_xs")),new caterwaul.syntax("_ys")),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("[",new caterwaul.syntax("_x"))),new caterwaul.syntax("[",new caterwaul.syntax("_x")),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax(",",new caterwaul.syntax("_x"),new caterwaul.syntax("_y"))),new caterwaul.syntax(",",new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("_x")),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("_y"))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax(".",new caterwaul.syntax("_xs"),new caterwaul.syntax("_p"))),new caterwaul.syntax(".",new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("_xs")),new caterwaul.syntax("_p")),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("u~",new caterwaul.syntax("[",new caterwaul.syntax("_x")))),new caterwaul.syntax("[",new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("_x"))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("u~",new caterwaul.syntax("()",new caterwaul.syntax("_xs"),new caterwaul.syntax("_ys")))),new caterwaul.syntax("()",new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("_xs")),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("_ys"))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("?",new caterwaul.syntax("_x"),new caterwaul.syntax("_y"),new caterwaul.syntax("_z"))),new caterwaul.syntax("?",new caterwaul.syntax("(",new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("_x"))),new caterwaul.syntax("(",new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("_y"))),new caterwaul.syntax("(",new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("_z")))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("&&",new caterwaul.syntax("_x"),new caterwaul.syntax("_y"))),new caterwaul.syntax("&&",new caterwaul.syntax("(",new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("_x"))),new caterwaul.syntax("(",new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("_y")))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("||",new caterwaul.syntax("_x"),new caterwaul.syntax("_y"))),new caterwaul.syntax("||",new caterwaul.syntax("(",new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("_x"))),new caterwaul.syntax("(",new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("_y")))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("u+",new caterwaul.syntax("_xs"))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax("Array"),new caterwaul.syntax("prototype")),new caterwaul.syntax("slice")),new caterwaul.syntax("call")),new caterwaul.syntax("(",new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("_xs")))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("%",new caterwaul.syntax("_xs"),new caterwaul.syntax("_thing"))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("*",new caterwaul.syntax("_xs"),new caterwaul.syntax("_thing"))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("/",new caterwaul.syntax("_xs"),new caterwaul.syntax("_thing"))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("|",new caterwaul.syntax("_xs"),new caterwaul.syntax("_thing"))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("*",new caterwaul.syntax("%",new caterwaul.syntax("_xs"),new caterwaul.syntax("k")),new caterwaul.syntax("_thing"))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("*",new caterwaul.syntax("%",new caterwaul.syntax("_xs"),new caterwaul.syntax("v")),new caterwaul.syntax("_thing"))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("%",new caterwaul.syntax("%",new caterwaul.syntax("_xs"),new caterwaul.syntax("k")),new caterwaul.syntax("_thing"))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("%",new caterwaul.syntax("%",new caterwaul.syntax("_xs"),new caterwaul.syntax("v")),new caterwaul.syntax("_thing"))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("(",new caterwaul.syntax("function",new caterwaul.syntax("(",new caterwaul.syntax("o")),new caterwaul.syntax("{",new caterwaul.syntax("_body")))),new caterwaul.syntax("call")),new caterwaul.syntax(",",new caterwaul.syntax("this"),new caterwaul.syntax("(",new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("_o"))))),new caterwaul.syntax("()",new caterwaul.syntax("(",new caterwaul.syntax("function",new caterwaul.syntax("(",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax("i"),new caterwaul.syntax("u")),new caterwaul.syntax("s"))),new caterwaul.syntax("{",new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("if",new caterwaul.syntax("(",new caterwaul.syntax("<=",new caterwaul.syntax("*",new caterwaul.syntax("(",new caterwaul.syntax("-",new caterwaul.syntax("u"),new caterwaul.syntax("i"))),new caterwaul.syntax("s")),new caterwaul.syntax("0"))),new caterwaul.syntax("return",new caterwaul.syntax("[",new caterwaul.syntax("")))),new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("r"),new caterwaul.syntax("[",new caterwaul.syntax(""))),new caterwaul.syntax("=",new caterwaul.syntax("d"),new caterwaul.syntax("-",new caterwaul.syntax("u"),new caterwaul.syntax("i"))))),new caterwaul.syntax("?",new caterwaul.syntax(">",new caterwaul.syntax("d"),new caterwaul.syntax("0")),new caterwaul.syntax("<",new caterwaul.syntax("i"),new caterwaul.syntax("u")),new caterwaul.syntax(">",new caterwaul.syntax("i"),new caterwaul.syntax("u")))),new caterwaul.syntax("+=",new caterwaul.syntax("i"),new caterwaul.syntax("s")))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("r"),new caterwaul.syntax("push")),new caterwaul.syntax("i")))),new caterwaul.syntax("return",new caterwaul.syntax("r")))))),new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax("(",new caterwaul.syntax("_l")),new caterwaul.syntax("(",new caterwaul.syntax("_u"))),new caterwaul.syntax("(",new caterwaul.syntax("_step")))),new caterwaul.syntax("()",new caterwaul.syntax("(",new caterwaul.syntax("function",new caterwaul.syntax("(",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax("i"),new caterwaul.syntax("u")),new caterwaul.syntax("s"))),new caterwaul.syntax("{",new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("if",new caterwaul.syntax("(",new caterwaul.syntax("||",new caterwaul.syntax("<",new caterwaul.syntax("*",new caterwaul.syntax("(",new caterwaul.syntax("-",new caterwaul.syntax("u"),new caterwaul.syntax("i"))),new caterwaul.syntax("s")),new caterwaul.syntax("0")),new caterwaul.syntax("u!",new caterwaul.syntax("s")))),new caterwaul.syntax("return",new caterwaul.syntax("[",new caterwaul.syntax("")))),new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("r"),new caterwaul.syntax("[",new caterwaul.syntax(""))),new caterwaul.syntax("=",new caterwaul.syntax("d"),new caterwaul.syntax("-",new caterwaul.syntax("u"),new caterwaul.syntax("i"))))),new caterwaul.syntax("?",new caterwaul.syntax(">",new caterwaul.syntax("d"),new caterwaul.syntax("0")),new caterwaul.syntax("<=",new caterwaul.syntax("i"),new caterwaul.syntax("u")),new caterwaul.syntax(">=",new caterwaul.syntax("i"),new caterwaul.syntax("u")))),new caterwaul.syntax("+=",new caterwaul.syntax("i"),new caterwaul.syntax("s")))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("r"),new caterwaul.syntax("push")),new caterwaul.syntax("i")))),new caterwaul.syntax("return",new caterwaul.syntax("r")))))),new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax("(",new caterwaul.syntax("_l")),new caterwaul.syntax("(",new caterwaul.syntax("_u"))),new caterwaul.syntax("(",new caterwaul.syntax("_step")))),new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax("=",new caterwaul.syntax("ks"),new caterwaul.syntax("[",new caterwaul.syntax("")))),new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax("var",new caterwaul.syntax("in",new caterwaul.syntax("k"),new caterwaul.syntax("o")))),new caterwaul.syntax("&&",new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax("Object"),new caterwaul.syntax("prototype")),new caterwaul.syntax("hasOwnProperty")),new caterwaul.syntax("call")),new caterwaul.syntax(",",new caterwaul.syntax("o"),new caterwaul.syntax("k"))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("ks"),new caterwaul.syntax("push")),new caterwaul.syntax("k"))))),new caterwaul.syntax("return",new caterwaul.syntax("ks"))),new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax("=",new caterwaul.syntax("vs"),new caterwaul.syntax("[",new caterwaul.syntax("")))),new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax("var",new caterwaul.syntax("in",new caterwaul.syntax("k"),new caterwaul.syntax("o")))),new caterwaul.syntax("&&",new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax("Object"),new caterwaul.syntax("prototype")),new caterwaul.syntax("hasOwnProperty")),new caterwaul.syntax("call")),new caterwaul.syntax(",",new caterwaul.syntax("o"),new caterwaul.syntax("k"))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("vs"),new caterwaul.syntax("push")),new caterwaul.syntax("[]",new caterwaul.syntax("o"),new caterwaul.syntax("k")))))),new caterwaul.syntax("return",new caterwaul.syntax("vs"))),new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax("=",new caterwaul.syntax("ps"),new caterwaul.syntax("[",new caterwaul.syntax("")))),new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax("var",new caterwaul.syntax("in",new caterwaul.syntax("k"),new caterwaul.syntax("o")))),new caterwaul.syntax("&&",new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax(".",new caterwaul.syntax("Object"),new caterwaul.syntax("prototype")),new caterwaul.syntax("hasOwnProperty")),new caterwaul.syntax("call")),new caterwaul.syntax(",",new caterwaul.syntax("o"),new caterwaul.syntax("k"))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("ps"),new caterwaul.syntax("push")),new caterwaul.syntax("[",new caterwaul.syntax(",",new caterwaul.syntax("k"),new caterwaul.syntax("[]",new caterwaul.syntax("o"),new caterwaul.syntax("k")))))))),new caterwaul.syntax("return",new caterwaul.syntax("ps"))),new caterwaul.syntax(";",new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("r"),new caterwaul.syntax("{",new caterwaul.syntax(""))),new caterwaul.syntax("=",new caterwaul.syntax("i"),new caterwaul.syntax("0"))),new caterwaul.syntax("=",new caterwaul.syntax("l"),new caterwaul.syntax(".",new caterwaul.syntax("o"),new caterwaul.syntax("length")))),new caterwaul.syntax("x"))),new caterwaul.syntax("<",new caterwaul.syntax("i"),new caterwaul.syntax("l"))),new caterwaul.syntax("u++",new caterwaul.syntax("i")))),new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("x"),new caterwaul.syntax("[]",new caterwaul.syntax("o"),new caterwaul.syntax("i"))),new caterwaul.syntax("=",new caterwaul.syntax("[]",new caterwaul.syntax("r"),new caterwaul.syntax("[]",new caterwaul.syntax("x"),new caterwaul.syntax("0"))),new caterwaul.syntax("[]",new caterwaul.syntax("x"),new caterwaul.syntax("1"))))),new caterwaul.syntax("return",new caterwaul.syntax("r"))),new caterwaul.syntax(";",new caterwaul.syntax("for",new caterwaul.syntax("(",new caterwaul.syntax(";",new caterwaul.syntax(";",new caterwaul.syntax("var",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("r"),new caterwaul.syntax("{",new caterwaul.syntax(""))),new caterwaul.syntax("=",new caterwaul.syntax("i"),new caterwaul.syntax("0"))),new caterwaul.syntax("=",new caterwaul.syntax("l"),new caterwaul.syntax(".",new caterwaul.syntax("o"),new caterwaul.syntax("length")))),new caterwaul.syntax("x"))),new caterwaul.syntax("<",new caterwaul.syntax("i"),new caterwaul.syntax("l"))),new caterwaul.syntax("u++",new caterwaul.syntax("i")))),new caterwaul.syntax(",",new caterwaul.syntax("=",new caterwaul.syntax("x"),new caterwaul.syntax("[]",new caterwaul.syntax("o"),new caterwaul.syntax("i"))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("(",new caterwaul.syntax("||",new caterwaul.syntax("[]",new caterwaul.syntax("r"),new caterwaul.syntax("[]",new caterwaul.syntax("x"),new caterwaul.syntax("0"))),new caterwaul.syntax("(",new caterwaul.syntax("=",new caterwaul.syntax("[]",new caterwaul.syntax("r"),new caterwaul.syntax("[]",new caterwaul.syntax("x"),new caterwaul.syntax("0"))),new caterwaul.syntax("[",new caterwaul.syntax("")))))),new caterwaul.syntax("push")),new caterwaul.syntax("[]",new caterwaul.syntax("x"),new caterwaul.syntax("1"))))),new caterwaul.syntax("return",new caterwaul.syntax("r"))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("[]",new caterwaul.syntax("n"),new caterwaul.syntax("_u"))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("[]",new caterwaul.syntax("ni"),new caterwaul.syntax("_u"))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("[]",new caterwaul.syntax("n"),new caterwaul.syntax(",",new caterwaul.syntax("_l"),new caterwaul.syntax("_u")))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("[]",new caterwaul.syntax("ni"),new caterwaul.syntax(",",new caterwaul.syntax("_l"),new caterwaul.syntax("_u")))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("[]",new caterwaul.syntax("n"),new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax("_l"),new caterwaul.syntax("_u")),new caterwaul.syntax("_step")))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("[]",new caterwaul.syntax("ni"),new caterwaul.syntax(",",new caterwaul.syntax(",",new caterwaul.syntax("_l"),new caterwaul.syntax("_u")),new caterwaul.syntax("_step")))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("/",new caterwaul.syntax("_o"),new caterwaul.syntax("keys"))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("|",new caterwaul.syntax("_o"),new caterwaul.syntax("object"))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("/",new caterwaul.syntax("_o"),new caterwaul.syntax("mobject"))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("/",new caterwaul.syntax("_o"),new caterwaul.syntax("values"))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("-",new caterwaul.syntax("_o"),new caterwaul.syntax("object"))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("-",new caterwaul.syntax("_o"),new caterwaul.syntax("mobject"))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("/",new caterwaul.syntax("_o"),new caterwaul.syntax("pairs"))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("/",new caterwaul.syntax("_o"),new caterwaul.syntax("object"))),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("|",new caterwaul.syntax("_o"),new caterwaul.syntax("mobject")))));
caterwaul.module("std",function($){$.js_all=function(){return this("js js_literals words seq")};$.all.push("js_all")});
</script>
<script>
caterwaul.module("ui.jquery",(function(qs,qs1,qs2,qs3,qs4,qs5,qs6,qs7,qs8,qs9,qsa,qsb,qsc,qsd,qse,qsf,qsg,qsh,qsi,qsj,qsk,qsl,qsm,qsn,qso,qsp,qsq,qsr,qss,qst,qsu,qsv,qsw,qsx,qsy,qsz,qs10,qs11,qs12,qs13,qs14,qs15,qs16,qs17,qs18,qs19,qs1a,qs1b,qs1c,qs1d,qs1e,qs1f,qs1g,qs1h,qs1i,qs1j,qs1k,qs1l,qs1m,qs1n){var result=(function($){$.jquery=function(caterwaul_function){return(function(it){return it.modifiers.jquery=$.grammar("J",{initial:qs},(function(rule,anon){return(function(){var jq=qs1,hyphenate=function(s){return s.replace(/_/g,"-")
},p=(function(){var p_pattern=anon(qs2);return(function(node){return p_pattern.replace({_thing:node})})}).call(this),jquery_macros=(function(){var dom_node_template=anon((""+(jq)+"(TS[_element])")),jquery_template=anon((""+(jq)+'("<span>" + (_element) + "</span>")')),become_dom_node=function(match){return dom_node_template.replace(match)
},wrap_in_jquery=function(match){return jquery_template.replace(match)};return[rule(qs3,(function(match){return match._element.is_constant()||match._element.length?wrap_in_jquery(match):become_dom_node(match)
})),rule(qs4,qs5),rule(qs6,qs7),rule(qs8,qs9),rule(qsa,qsb),rule(qsc,qsd),rule(qse,qsf),rule(qsg,qsh),rule(qsi,qsj),rule(qsk,qsl),rule(qsm,qsn),rule(qso,qsp),rule(qsq,qsr),rule(qss,qst),rule(qsu,qsv),rule(qsw,qsx),rule(qsy,qsz),rule(qs10,qs11),rule(qs12,qs13),rule(qs14,qs15),rule(qs16,qs17)]
}).call(this),string_macros=(function(){var string=function(s){return new $.syntax('"'+s.replace(/\\/g,"\\\\").replace(/"/g,'\\"')+'"')};return[rule(qs18,(function(match){return string(("<"+(hyphenate(match._identifier.data))+">"))
})),rule(qs19,(function(match){return string(hyphenate(match._identifier.data))})),rule(qs1a,(function(match){return string(expand(p(match._identifier)).data)}))]
}).call(this),search_macros=(function(){var interpolated=function(node){return("("+(node.toString())+').replace(/(\\)/g, "$1$1").replace(/(")/g, "\\$1")')},binary=function(op){return function(match){return new $.syntax((""+(expand(p(match._element1)).data)+""+(op)+""+(expand(p(match._element2)).data)+""))
}};return[rule(qs1b,(function(match){return new $.syntax(hyphenate((function(it){return it==="_"?"*":it}).call(this,(match._element.data))))})),rule(qs1c,(function(match){return new $.syntax((""+(this(p(match._element)).data)+"."+(hyphenate(match._class.data))+""))
})),rule(qs1d,(function(match){return new $.syntax((""+(this(p(match._element)).data)+"["+(this(p(match._attributes)))+"]"))})),rule(qs1e,(function(match){return new $.syntax((""+(this(p(match._attribute)).data)+'="')+interpolated(match._value)+'}"')
})),rule(qs1f,"P[_element]"),rule(qs1g,binary(", ")),rule(qs1h,binary(", ")),rule(qs1i,binary(" ")),rule(qs1j,binary(" ")),rule(qs1k,binary(" > ")),rule(qs1l,binary(" > ")),rule(qs1m,(function(match){return new $.syntax((""+(expand(p(match._element)).data)+":"+(hyphenate(match._selector.data))+""))
})),rule(qs1n,(function(match){return new $.syntax((""+(expand(p(match._element)).data)+":"+(hyphenate(match._selector.data))+'("#')+"{"+interpolated(match._value)+'}")')
}))]}).call(this);return(jquery_macros).concat(string_macros)}).call(this)})),it}).call(this,(caterwaul_function))}});result.caterwaul_expression_ref_table={qs:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "_expression" ) )'),qs1:('new caterwaul.syntax( "jQuery" )'),qs2:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "P" ) ,new caterwaul.syntax( "_thing" ) )'),qs3:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "_element" ) )'),qs4:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_element" ) ,new caterwaul.syntax( "_class" ) ) )'),qs5:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "_element" ) ) ,new caterwaul.syntax( "addClass" ) ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "_class" ) ) )'),qs6:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "*" ,new caterwaul.syntax( "_element" ) ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "_attr" ) ,new caterwaul.syntax( "_val" ) ) ) )'),qs7:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "_element" ) ) ,new caterwaul.syntax( "attr" ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "_attr" ) ) ,new caterwaul.syntax( "_val" ) ) )'),qs8:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "*" ,new caterwaul.syntax( "_element" ) ,new caterwaul.syntax( "u!" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "_name" ) ,new caterwaul.syntax( "_val" ) ) ) ) )'),qs9:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "_element" ) ) ,new caterwaul.syntax( "data" ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "_name" ) ) ,new caterwaul.syntax( "_val" ) ) )'),qsa:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "/" ,new caterwaul.syntax( "_element" ) ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "_method" ) ,new caterwaul.syntax( "_args" ) ) ) )'),qsb:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "_element" ) ) ,new caterwaul.syntax( "_method" ) ) ,new caterwaul.syntax( "_args" ) )'),qsc:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "/" ,new caterwaul.syntax( "_element" ) ,new caterwaul.syntax( "u!" ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "_event" ) ,new caterwaul.syntax( "_args" ) ) ) ) )'),qsd:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "_element" ) ) ,new caterwaul.syntax( "bind" ) ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "_event" ) ) ,new caterwaul.syntax( "_args" ) ) )'),qse:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "%" ,new caterwaul.syntax( "_element" ) ,new caterwaul.syntax( "_function" ) ) )'),qsf:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "_function" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "_element" ) ) )'),qsg:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "_element" ) ,new caterwaul.syntax( "_children" ) ) )'),qsh:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "_element" ) ) ,new caterwaul.syntax( "append" ) ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "_children" ) ) )'),qsi:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_element" ) ,new caterwaul.syntax( "_children" ) ) )'),qsj:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "_element" ) ) ,new caterwaul.syntax( "append" ) ) ,new caterwaul.syntax( "_children" ) )'),qsk:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "<" ,new caterwaul.syntax( "_element" ) ,new caterwaul.syntax( "_tree" ) ) )'),qsl:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "_element" ) ) ,new caterwaul.syntax( "append" ) ) ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_tree" ) ) ,new caterwaul.syntax( "toString" ) ) ,new caterwaul.syntax( "" ) ) )'),qsm:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( ">" ,new caterwaul.syntax( "_element" ) ,new caterwaul.syntax( "_child" ) ) )'),qsn:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "_element" ) ) ,new caterwaul.syntax( "append" ) ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "_child" ) ) )'),qso:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( ">=" ,new caterwaul.syntax( "_element" ) ,new caterwaul.syntax( "_child" ) ) )'),qsp:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "_element" ) ) ,new caterwaul.syntax( "append" ) ) ,new caterwaul.syntax( "_child" ) )'),qsq:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "_element1" ) ,new caterwaul.syntax( "_element2" ) ) )'),qsr:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "_element1" ) ) ,new caterwaul.syntax( "add" ) ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "_element2" ) ) )'),qss:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "+" ,new caterwaul.syntax( "_element1" ) ,new caterwaul.syntax( "_element2" ) ) )'),qst:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "_element1" ) ) ,new caterwaul.syntax( "add" ) ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "_element2" ) ) )'),qsu:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "-" ,new caterwaul.syntax( "_element1" ) ,new caterwaul.syntax( "_element2" ) ) )'),qsv:('new caterwaul.syntax( "-" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "_element1" ) ) ,new caterwaul.syntax( "_element2" ) )'),qsw:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( ">>" ,new caterwaul.syntax( "_element" ) ,new caterwaul.syntax( "_pattern" ) ) )'),qsx:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "_element" ) ) ,new caterwaul.syntax( "filter" ) ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "PS" ) ,new caterwaul.syntax( "_pattern" ) ) )'),qsy:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( ">>>" ,new caterwaul.syntax( "_element" ) ,new caterwaul.syntax( "_pattern" ) ) )'),qsz:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "_element" ) ) ,new caterwaul.syntax( "find" ) ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "PS" ) ,new caterwaul.syntax( "_pattern" ) ) )'),qs10:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "<<" ,new caterwaul.syntax( "_element" ) ,new caterwaul.syntax( "_pattern" ) ) )'),qs11:('new caterwaul.syntax( "()" ,new caterwaul.syntax( "." ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "_element" ) ) ,new caterwaul.syntax( "parents" ) ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "PS" ) ,new caterwaul.syntax( "_pattern" ) ) )'),qs12:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_element" ) ) )'),qs13:('new caterwaul.syntax( "(" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "_element" ) ) )'),qs14:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "[" ,new caterwaul.syntax( "_element" ) ) )'),qs15:('new caterwaul.syntax( "[" ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "_element" ) ) )'),qs16:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "J" ) ,new caterwaul.syntax( "u+" ,new caterwaul.syntax( "_expression" ) ) )'),qs17:('new caterwaul.syntax( "_expression" )'),qs18:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "TS" ) ,new caterwaul.syntax( "_identifier" ) )'),qs19:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "S" ) ,new caterwaul.syntax( "_identifier" ) )'),qs1a:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "PS" ) ,new caterwaul.syntax( "_identifier" ) )'),qs1b:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "P" ) ,new caterwaul.syntax( "_element" ) )'),qs1c:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "P" ) ,new caterwaul.syntax( "." ,new caterwaul.syntax( "_element" ) ,new caterwaul.syntax( "_class" ) ) )'),qs1d:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "P" ) ,new caterwaul.syntax( "[]" ,new caterwaul.syntax( "_element" ) ,new caterwaul.syntax( "_attributes" ) ) )'),qs1e:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "P" ) ,new caterwaul.syntax( "=" ,new caterwaul.syntax( "_attribute" ) ,new caterwaul.syntax( "_value" ) ) )'),qs1f:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "P" ) ,new caterwaul.syntax( "(" ,new caterwaul.syntax( "_element" ) ) )'),qs1g:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "P" ) ,new caterwaul.syntax( "+" ,new caterwaul.syntax( "_element1" ) ,new caterwaul.syntax( "_element2" ) ) )'),qs1h:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "P" ) ,new caterwaul.syntax( "," ,new caterwaul.syntax( "_element1" ) ,new caterwaul.syntax( "_element2" ) ) )'),qs1i:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "P" ) ,new caterwaul.syntax( ">>" ,new caterwaul.syntax( "_element1" ) ,new caterwaul.syntax( "_element2" ) ) )'),qs1j:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "P" ) ,new caterwaul.syntax( ">>>" ,new caterwaul.syntax( "_element1" ) ,new caterwaul.syntax( "_element2" ) ) )'),qs1k:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "P" ) ,new caterwaul.syntax( ">" ,new caterwaul.syntax( "_element1" ) ,new caterwaul.syntax( "_element2" ) ) )'),qs1l:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "P" ) ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "_element1" ) ,new caterwaul.syntax( "_element2" ) ) )'),qs1m:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "P" ) ,new caterwaul.syntax( "/" ,new caterwaul.syntax( "_element" ) ,new caterwaul.syntax( "_selector" ) ) )'),qs1n:('new caterwaul.syntax( "[]" ,new caterwaul.syntax( "P" ) ,new caterwaul.syntax( "/" ,new caterwaul.syntax( "_element" ) ,new caterwaul.syntax( "()" ,new caterwaul.syntax( "_selector" ) ,new caterwaul.syntax( "_value" ) ) ) )')};
return(result)}).call(this,new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("_expression")),new caterwaul.syntax("jQuery"),new caterwaul.syntax("[]",new caterwaul.syntax("P"),new caterwaul.syntax("_thing")),new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("_element")),new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax(".",new caterwaul.syntax("_element"),new caterwaul.syntax("_class"))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("_element")),new caterwaul.syntax("addClass")),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("_class"))),new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("*",new caterwaul.syntax("_element"),new caterwaul.syntax("()",new caterwaul.syntax("_attr"),new caterwaul.syntax("_val")))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("_element")),new caterwaul.syntax("attr")),new caterwaul.syntax(",",new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("_attr")),new caterwaul.syntax("_val"))),new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("*",new caterwaul.syntax("_element"),new caterwaul.syntax("u!",new caterwaul.syntax("()",new caterwaul.syntax("_name"),new caterwaul.syntax("_val"))))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("_element")),new caterwaul.syntax("data")),new caterwaul.syntax(",",new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("_name")),new caterwaul.syntax("_val"))),new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("/",new caterwaul.syntax("_element"),new caterwaul.syntax("()",new caterwaul.syntax("_method"),new caterwaul.syntax("_args")))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("_element")),new caterwaul.syntax("_method")),new caterwaul.syntax("_args")),new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("/",new caterwaul.syntax("_element"),new caterwaul.syntax("u!",new caterwaul.syntax("()",new caterwaul.syntax("_event"),new caterwaul.syntax("_args"))))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("_element")),new caterwaul.syntax("bind")),new caterwaul.syntax(",",new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("_event")),new caterwaul.syntax("_args"))),new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("%",new caterwaul.syntax("_element"),new caterwaul.syntax("_function"))),new caterwaul.syntax("()",new caterwaul.syntax("_function"),new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("_element"))),new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("()",new caterwaul.syntax("_element"),new caterwaul.syntax("_children"))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("_element")),new caterwaul.syntax("append")),new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("_children"))),new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("[]",new caterwaul.syntax("_element"),new caterwaul.syntax("_children"))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("_element")),new caterwaul.syntax("append")),new caterwaul.syntax("_children")),new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("<",new caterwaul.syntax("_element"),new caterwaul.syntax("_tree"))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("_element")),new caterwaul.syntax("append")),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("(",new caterwaul.syntax("_tree")),new caterwaul.syntax("toString")),new caterwaul.syntax(""))),new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax(">",new caterwaul.syntax("_element"),new caterwaul.syntax("_child"))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("_element")),new caterwaul.syntax("append")),new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("_child"))),new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax(">=",new caterwaul.syntax("_element"),new caterwaul.syntax("_child"))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("_element")),new caterwaul.syntax("append")),new caterwaul.syntax("_child")),new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax(",",new caterwaul.syntax("_element1"),new caterwaul.syntax("_element2"))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("_element1")),new caterwaul.syntax("add")),new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("_element2"))),new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("+",new caterwaul.syntax("_element1"),new caterwaul.syntax("_element2"))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("_element1")),new caterwaul.syntax("add")),new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("_element2"))),new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("-",new caterwaul.syntax("_element1"),new caterwaul.syntax("_element2"))),new caterwaul.syntax("-",new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("_element1")),new caterwaul.syntax("_element2")),new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax(">>",new caterwaul.syntax("_element"),new caterwaul.syntax("_pattern"))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("_element")),new caterwaul.syntax("filter")),new caterwaul.syntax("[]",new caterwaul.syntax("PS"),new caterwaul.syntax("_pattern"))),new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax(">>>",new caterwaul.syntax("_element"),new caterwaul.syntax("_pattern"))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("_element")),new caterwaul.syntax("find")),new caterwaul.syntax("[]",new caterwaul.syntax("PS"),new caterwaul.syntax("_pattern"))),new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("<<",new caterwaul.syntax("_element"),new caterwaul.syntax("_pattern"))),new caterwaul.syntax("()",new caterwaul.syntax(".",new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("_element")),new caterwaul.syntax("parents")),new caterwaul.syntax("[]",new caterwaul.syntax("PS"),new caterwaul.syntax("_pattern"))),new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("(",new caterwaul.syntax("_element"))),new caterwaul.syntax("(",new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("_element"))),new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("[",new caterwaul.syntax("_element"))),new caterwaul.syntax("[",new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("_element"))),new caterwaul.syntax("[]",new caterwaul.syntax("J"),new caterwaul.syntax("u+",new caterwaul.syntax("_expression"))),new caterwaul.syntax("_expression"),new caterwaul.syntax("[]",new caterwaul.syntax("TS"),new caterwaul.syntax("_identifier")),new caterwaul.syntax("[]",new caterwaul.syntax("S"),new caterwaul.syntax("_identifier")),new caterwaul.syntax("[]",new caterwaul.syntax("PS"),new caterwaul.syntax("_identifier")),new caterwaul.syntax("[]",new caterwaul.syntax("P"),new caterwaul.syntax("_element")),new caterwaul.syntax("[]",new caterwaul.syntax("P"),new caterwaul.syntax(".",new caterwaul.syntax("_element"),new caterwaul.syntax("_class"))),new caterwaul.syntax("[]",new caterwaul.syntax("P"),new caterwaul.syntax("[]",new caterwaul.syntax("_element"),new caterwaul.syntax("_attributes"))),new caterwaul.syntax("[]",new caterwaul.syntax("P"),new caterwaul.syntax("=",new caterwaul.syntax("_attribute"),new caterwaul.syntax("_value"))),new caterwaul.syntax("[]",new caterwaul.syntax("P"),new caterwaul.syntax("(",new caterwaul.syntax("_element"))),new caterwaul.syntax("[]",new caterwaul.syntax("P"),new caterwaul.syntax("+",new caterwaul.syntax("_element1"),new caterwaul.syntax("_element2"))),new caterwaul.syntax("[]",new caterwaul.syntax("P"),new caterwaul.syntax(",",new caterwaul.syntax("_element1"),new caterwaul.syntax("_element2"))),new caterwaul.syntax("[]",new caterwaul.syntax("P"),new caterwaul.syntax(">>",new caterwaul.syntax("_element1"),new caterwaul.syntax("_element2"))),new caterwaul.syntax("[]",new caterwaul.syntax("P"),new caterwaul.syntax(">>>",new caterwaul.syntax("_element1"),new caterwaul.syntax("_element2"))),new caterwaul.syntax("[]",new caterwaul.syntax("P"),new caterwaul.syntax(">",new caterwaul.syntax("_element1"),new caterwaul.syntax("_element2"))),new caterwaul.syntax("[]",new caterwaul.syntax("P"),new caterwaul.syntax("()",new caterwaul.syntax("_element1"),new caterwaul.syntax("_element2"))),new caterwaul.syntax("[]",new caterwaul.syntax("P"),new caterwaul.syntax("/",new caterwaul.syntax("_element"),new caterwaul.syntax("_selector"))),new caterwaul.syntax("[]",new caterwaul.syntax("P"),new caterwaul.syntax("/",new caterwaul.syntax("_element"),new caterwaul.syntax("()",new caterwaul.syntax("_selector"),new caterwaul.syntax("_value"))))));
caterwaul.module("ui",function($){$.all.push("jquery")});
</script>
<script>
// Caterwaul JS web interface | Spencer Tipping
// Licensed under the terms of the MIT source code license

$('#cover .status').text('loading tutorial content');

$(caterwaul('js_all jquery')(function () {
 var original_body_html = $('body').html(),
 original_pages = $('#tutorial-page, #sdoc-page'),
 original_styles = $('style, link[rel="stylesheet"]');

 $('#cover .status').text('parsing state');

 var construct_page = function (original_html) {
 original_html = original_html.replace ? original_html : original_body_html;



// Page header.
// This is basically just a navigation container.

 var page_header = jquery in div.header(div.title(span.caterwaul('caterwaul'), span.js('the ', span.accent('edge'), ' of javascript')));

// Generated by SDoc





var shell = given.nothing in
 shell.append(history_container, shell_prompt)
 -se- setTimeout(given.nothing in shell.click(setTimeout(given.nothing in shell.find('.prompt .input').focus(), 10) -given.e), 0)

 -where [shell = jquery in div.shell,

 history_container = jquery in div.history,

 history_entry_for(s) = jquery in pre.entry(span.accent('&gt;'), span.command /text(s)),
 history_result_for(o) = jquery in pre.result[ui_for(o)],
 history_log_for(o) = jquery in pre.log /text('' + o),
 history_error_for(e) = jquery in pre.error /text('' + e),

 ui_for(x) = ! x ? jquery in span /text('' + x) :
 x.is_caterwaul_syntax ? jquery [span.syntax %syntax_for(x)] -where [syntax_for(node)(e) = e.text(x.toString()).hover("e.text(x.structure())".qf,
 "e.text(x.toString())".qf)] :

 x.constructor === jQuery ? x.parent().length ? jquery in div.sandbox('(A DOM node that is already in document)')
 /hover(given.e in x.addClass('identify'), given.e in x.removeClass('identify')) :
 jquery in span /text(jquery in span[x] /html()) + div.sandbox[x.clone(true)] :
 jquery in span /text('' + x),

 realign() = setTimeout(input.css({width: input.parent().width() - (input.prev().width() + 10)})
 -where [input = shell.find('.prompt .input')]
 -given.nothing, 10),

 log(xs = arguments) = xs *![shell.children('.history').append(x) -se- realign()] -seq -re- xs[0],

 history_n = 0,
 context = capture [expand() = shell.animate({left: 0, right: 0}, realign),
 collapse() = shell.animate({left: 600, right: 50}, realign),
 clear() = shell.children('.history').empty() -re- realign() -re- '',
 caterwaul = caterwaul.clone(),
 history = [],

 help() = 'available variables:\n' +
 (pairs %[x[1] && x[1].description] *['#{x[0]}: #{x[1].description}'] /seq
 -where [keys = context /keys -seq -re- it.sort(),
 pairs = keys *[[x, context[x]]] -seq]).join("\n"),

 log(xs = arguments) = xs *![log(history_log_for(x))] -seq -re- xs[0],
 it = null]

 -se [it.context = it]
 -se [it.compiler = it.caterwaul.jquery(it.caterwaul.js_all())]
 -se [it.context.description = 'variables available to the shell',
 it.expand.description = 'expands the shell',
 it.collapse.description = 'collapses the shell',
 it.clear.description = 'clears old output',
 it.caterwaul.description = 'a copy of the caterwaul global',
 it.compiler.description = 'the compiler for this shell',
 it.history.description = 'shell input history',
 it.log.description = 'logs a value to the shell'],

 run_command(c) = log(history_entry_for(c))
 -re- log(history_result_for(context.it = context.compiler(c, context))) /rescue [log(history_error_for(context.it = e))],

 shell_prompt = jquery [div.prompt[prompt, input, structure, shadow]]
 -se- setTimeout(realign, 10)
 -se- setInterval(update_shadow, 10)

 -se- it.find('span.prompt').click($(this).siblings('.input').focus() -given.e)

 -se- setTimeout(given.nothing in
 it.find('.input').keydown(realign() -re [history_prev() /se [e.preventDefault()] /when [e.which === 38] ||
 history_next() /se [e.preventDefault()] /when [e.which === 40] ||
 run_it() /se [e.preventDefault()] /when [e.which === 13] || true] -given.e), 0)

 -where [input = jquery in input.input,
 prompt = jquery in span.accent('&gt;'),
 structure = jquery in div.structure,
 shadow = jquery in div.shadow,

 last_input_text = null,
 rename_gensyms_in(t) = t.replace(context.caterwaul.gensym_rename_table(t)),
 update_shadow() = structure.text(context.caterwaul.parse(input.val()).structure() -rescue- 'invalid parse')
 -se- shadow.text(context.compiler(context.caterwaul.parse(last_input_text = input.val()))
 -re- rename_gensyms_in(it).toString()
 -rescue- e.toString())

 -unless [input.val() === last_input_text],

 h_index = 0,
 history_prev() = (h[h_index] = input.val()) -when [h_index < history_n] -re- input.val(h[--h_index]) -when [h_index > 0]
 -where [h = context.history],

 history_next() = (h[h_index] = input.val()) -when [h_index < history_n] -re- input.val(h[++h_index]) -when [h_index < history_n]
 -where [h = context.history],

 history_add(s) = history_n = h_index = context.history.push(s),

 scroll_to_end() = setTimeout(shell.scrollTop(shell.children(':last') -re [shell.scrollTop() + it.position().top + it.height()])
 -given.nothing, 0),

 run_it() = history_add(t) -re- run_command(t) -re- input.val('') -re- scroll_to_end() -when.t -where [t = input.val()]]];

// Generated by SDoc





// Code snippet initialization.
// This runs after the page is fully loaded. The idea is to setup clickability for each code snippet.

 setTimeout(linkify_code_snippets, 0),

 where [linkify_snippet(s) = s.click(send_code_to_prompt),
 send_code_to_prompt() = $('.shell .prompt .input').val($(this).text()) -se- $('.shell').click(),
 linkify_code_snippets() = $('#tutorial-page pre.code') *![linkify_snippet($(x))] /seq];

// Generated by SDoc






// Self-modifying Perl state parser.
// This is actually really easy. All of the attributes in self-modifying Perl come in one of two forms. One is the short form, written as meta::\w+('stuff', 'stuff');\n. The other is the long
// form, written meta::\w+('stuff', <<'eof');\n...\neof\n. We just need to find all occurrences of either one of these things.

 var perl_attributes = given.text in text.match(long_form) *parse_long + text.match(short_form) *parse_short -seq
 -where [long_form = /^meta::(\w+)\('([^']+)', (?:<|&lt;){2}'([^']+)'\);[\r\n]{1,2}([\s\S]*?)[\r\n]{1,2}\3$/mg,
 short_form = /^meta::(\w+)\('([^']+)', '([^']+)'\);$/mg,

 long_form_parser = new RegExp(long_form .toString().replace(/^\/(.*)\/[mg][mg]$/, '$1')),
 short_form_parser = new RegExp(short_form.toString().replace(/^\/(.*)\/[mg][mg]$/, '$1')),

 parse_long(match) = long_form_parser.exec(match) -re- {namespace: it[1], attribute: it[2], value: it[4]},
 parse_short(match) = short_form_parser.exec(match) -re- {namespace: it[1], attribute: it[2], value: it[3]}];

// Generated by SDoc





// SDoc-to-HTML converter.
// SDoc is a fairly simple format to parse. We just emit stuff based on indentation deltas (basically like the algorithm in the Perl). I'm doing this here rather than up-front to reduce the page
// size. If we converted every SDoc attribute into HTML up front it would easily double the download size.

// By the way, I'm using the same heuristic HTML-escaping algorithm that the Perl script uses. This basically tries to do the right thing with <> symbols in SDoc paragraphs by escaping anything
// that doesn't look like a well-formed tag. Of course, this precludes your saying things like &lt; and expecting that to render verbatim; instead it will be converted to an actual less-than sign
// in the markup.

 var sdoc_to_dom = given.text in paragraphs *~!convert -seq
 -where [known_tags = ('html head body meta script style link title div a span input button textarea option select form label iframe ' +
 'blockquote code caption table tbody tr td th thead tfoot img h1 h2 h3 h4 h5 h6 li ol ul noscript p pre samp sub sup ' +
 'var canvas audio video').replace(/\s+/g, '|'),

 paragraphs = text.split(/\n\n+/),
 indentation_of(p) = (/^(\s*(\|\s)?)/.exec(p)[1].length >> 1) + 1,

 convert(p) = /^\s*[A-Z]/.test(p) ? documentation(p) :
 /^\s*\|/.test(p) ? quoted(unindent(p)) :
 code(p),

 not_a_valid_tag = new RegExp('<(?!\/|(#{known_tags})[^>]*>(?:.|\n)*</\\1>)', 'g'),
 escape_html_in(s) = s.replace(/&(?!gt;|lt;|amp;)/g, '&amp;').replace(not_a_valid_tag, '&lt;'),
 escape_all_in(s) = s.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;'),

 quoted(p) = jquery in pre.quoted[escape_all_in(p)],
 code(p) = jquery in pre.code[p.replace(/^\s*c\n/, '')],

 starts_section(p) = /^\s*(.*\.)\n\s*(.*)/.exec(p) -re [it && it[1].length + 10 <= it[2].length],
 unindent(p) = p.replace(indentation, '') -where [spaces = n[indentation_of(p) - 1] *['( |\\|){2}'] -seq -re- it.join(''),
 indentation = new RegExp('^#{spaces}', 'gm')],

 documentation(p) = starts_section(p) ? documentation_section(p) : jquery in p[escape_html_in(p)],
 documentation_section(p) = jquery [div.section[header, paragraph]] -se- it.addClass('level#{indentation_of(p)}')
 -where [parts = /^\s*(.*)\.\n((?:.|\n)*)/.exec(p),
 header = $('<h#{indentation_of(p)}>').text(parts[1]),
 paragraph = jquery in p[escape_html_in(parts[2])]]];

// Generated by SDoc





// Building the documentation pages.
// This is just a matter of finding the right SDoc sources and tying them together.

 var attributes = perl_attributes(original_html.replace(/&gt;/g, '>').replace(/&lt;/g, '<').replace(/&amp;/g, '&'));

 $('#sdoc-page').append(sections) -where[sdocs = attributes %[x.namespace === 'sdoc' && /^js::/.test(x.attribute)] -seq,
 core = sdocs %[/^js::caterwaul/.test(x.attribute)] -seq,
 extension = sdocs %[/extensions\//.test(x.attribute)] -seq,
 web = sdocs %[/web\//.test(x.attribute)] -seq,

 back_link = jquery in a.back('Back to tutorial') *href('#tutorial'),

 title(a) = /\//.test(a) ? jquery [span.path[a.replace(/^js::(.*\/).*/, '$1')],
 span.name[a.replace(/.*\//, '')],
 span.extension('.js')] :

 jquery [span.name[a.replace(/^js::/, '')],
 span.extension('.js')],

 section(x) = jquery [div.file(h1[title(x.attribute)], div.contents)]
 -se- setTimeout(given.nothing in it.find('h1').click(given.e in $(this).next('.contents').toggle()), 0)
 -se- it.find('.contents').hide().append(sdoc_to_dom(x.value)),

 sections = jquery [div *id('annotated') >= back_link >= core_sections >= extension_sections >= web_sections]
 -where [core_sections = $([]) -se- core *~!section *![it.push(x)] /seq,
 extension_sections = $([]) -se- extension *~!section *![it.push(x)] /seq,
 web_sections = $([]) -se- web *~!section *![it.push(x)] /seq]];

 setInterval(check_for_destination, 50)
 -where [viewing_annotated_source = false,
 moving = false,

 check_for_destination() = show_annotated_source() -when [! moving && ! viewing_annotated_source && /^#annotated/.test(document.location.hash)] <re>
 hide_annotated_source() -when [! moving && viewing_annotated_source && ! /^#annotated/.test(document.location.hash)],

 show_annotated_source() = moving = $('#sdoc-page').css({display: 'block', top: $(window).scrollTop(), left: $(window).width()}).
 animate({left: 50}, 'slow')

 -se- $('#tutorial-page').animate({left: '-=#{distance}'}, 'slow', given.nothing [viewing_annotated_source = true, moving = false])
 -se- $('.shell').animate({left: '-=#{distance}', right: '+=#{distance}', opacity: 0}, 'slow')
 -se- $('.header, .popdown').hide('slow')

 -where [distance = $(window).width()],

 hide_annotated_source() = moving = $('#sdoc-page').animate({left: $(window).width()}, 'slow',
 given.nothing [viewing_annotated_source = moving = false, $(this).css({display: 'none'})])

 -se- $('.shell').animate({left: '+=#{distance}', right: '-=#{distance}', opacity: 1}, 'slow')
 -se- $('#tutorial-page').animate({left: '+=#{distance}'}, 'slow')
 -se- $('.header, .popdown').show('slow')

 -where [distance = -$('#tutorial-page').position().left]];

// Generated by SDoc






// Building the tutorial.
// All we have to do here is create a div to contain the tutorial and populate it with the SDoc obtained by parsing the object state. (Since this HTML file is actually a self-modifying Perl
// object -- long story.) We also build a table of contents.

 $('#tutorial-page').append(top_wrapper_for(toc, 'Contents'), tutorial, shell())

 -where [tutorial_attribute = attributes |[x.namespace === 'sdoc' && x.attribute === 'web/tutorial' && x] |seq,
 tutorial = jquery [div.tutorial[sdoc_to_dom(tutorial_attribute.value)]]
 -se- it.find('pre.code') *![$(x).text($(x).text().replace(/^\s*/, ''))] /seq,

 top_wrapper_for(e, name) = jquery [div.popdown(div.label /text(name), div.contents[e])]
 -se- setTimeout("it.click(given.e in it.toggleClass('open'))".qf, 10),

 toc = jquery [div.toc] -se- toc_links *~![x] *![it.append(x)] /seq
 -where [section_id_count = 0,
 assign_section_id() = $(this).attr('id', 'section-#{++section_id_count}'),

 title_of(section) = where [level = Number(/level(\d+)/.exec($(section).attr('class'))[1])] in
 $('<h#{level}>').text($(section).children('h#{level}').text()),

 sections = tutorial.find('.section').each(assign_section_id),

 toc_links = [jquery in a.toc_link(h1('source code')) *href('#annotated')] +
 sections *[jquery in a.toc_link[title_of(x)] *href('##{$(x).attr("id")}')] -seq]];

// Generated by SDoc














 $('head').append(jquery in title('caterwaul js'));
 $('body').empty().append(page_header, original_pages);

 original_styles.appendTo('head')};

 $.get(document.location.href, construct_page).error("construct_page(original_body_html)".qf)}));

// Generated by SDoc

</script>

<style>
/* Caterwaul JS page style | Spencer Tipping */
/* Licensed under the terms of the MIT source code license */

body {font-family: 'Neuton', 'Garamond', serif; background: #111; margin: 0; color: #eee}

a {text-decoration: none}

.header * {background: rgba(17, 17, 17, 0.5)}

.header .title {font-size: 20pt; text-transform: uppercase}
.header .title .caterwaul {color: #fff; border-right: solid 4px #444; padding: 120px 10px 0 50px; z-index: 10}
.header .title .js        {color: #aaa; padding: 120px 0 0 10px; text-transform: lowercase; font-size: 16pt; z-index: 5}

.header {padding-bottom: 40px; margin-top: 100px}

.accent {color: #fa4; z-index: 20}

.identify {background: #752 !important}

/* Word wrapping inside <pre> elements. */
/* A great article about this (and its cross-browser ramifications) at http://www.longren.org/2006/09/27/wrapping-text-inside-pre-tags/. */

#tutorial-page pre {white-space: pre-wrap; word-wrap: break-word}

/* SDoc page styling. */
/* This is optimized for long lines and lots of text. */

#sdoc-page {padding-bottom: 100px; color: white; position: absolute; display: none}

#sdoc-page a.back {font-size: 16pt; color: #999; display: block; text-transform: lowercase; text-decoration: none}
#sdoc-page a.back:before {content: '<< '; color: #444}

#sdoc-page a.back:hover {color: #ccc}
#sdoc-page a.back:hover:before {content: '<< '; color: #fa4}

#sdoc-page .file > h1                  {color: #999; cursor: pointer; font-weight: normal; font-size: 16pt; white-space: nowrap; word-wrap: none}
#sdoc-page .file > h1 .path            {color: #444}
#sdoc-page .file > h1 .extension       {display: none; color: #444}

#sdoc-page .file > h1:hover .path      {color: #ccc}
#sdoc-page .file > h1:hover .extension {display: none; color: #ccc}

#sdoc-page .file > h1:hover            {color: #ccc}
#sdoc-page .file > h1:after            {content: ' >>'; color: #444}
#sdoc-page .file > h1:hover:after      {content: ' >>'; color: #fa4}

#sdoc-page .section {margin-top: 50px}

#sdoc-page .section h1:before, #sdoc-page .section h2:before, #sdoc-page .section h3:before {content: '< '; color: #fa4}
#sdoc-page .section h1:after,  #sdoc-page .section h2:after,  #sdoc-page .section h3:after  {content: ' >'; color: #fa4}

#sdoc-page .section h4:before {content: '> '; color: #fa4}

#sdoc-page .section h1 {font-size: 16pt}
#sdoc-page .section h2 {font-size: 13pt}
#sdoc-page .section h3 {font-size: 11pt}
#sdoc-page .section h4 {font-size: 10pt}

#sdoc-page .section h1 {text-transform: lowercase; color: #999; font-weight: normal; border-bottom: solid 4px #222}
#sdoc-page .section h2 {text-transform: lowercase; color: #999; font-weight: normal; border-bottom: solid 4px #222}
#sdoc-page .section h3 {text-transform: lowercase; color: #999; font-weight: normal}
#sdoc-page .section h4 {text-transform: lowercase; color: #999; font-weight: normal}

#sdoc-page p {color: #eee; font-family: sans-serif; font-size: 10pt; line-height: 1.8em; max-width: 500px; text-align: justify}

#sdoc-page pre.code {border: solid 1px #333; color: white; font-size: 10pt; font-family: 'Droid Sans Mono', monospace; padding: 4px; background: black; white-space: pre; word-wrap: none}
#sdoc-page pre.code {line-height: 1.8em}

/* Tutorial page styling. */
/* These styles, while they should be more or less consistent across pages, are designed specifically for the tutorial. */

#tutorial-page {width: 500px; padding-bottom: 100px; padding-right: 200px; padding-left: 50px; position: relative}

#tutorial-page p {font-family: sans-serif; font-size: 11pt}
#tutorial-page blockquote .signature {float: right; color: #aaa; font-variant: italic}
#tutorial-page blockquote {clear: right; margin-top: 10px}

#tutorial-page p a              {color: #888; text-decoration: none}
#tutorial-page p a:before       {content: '['; color: #444}
#tutorial-page p a:after        {content: ']'; color: #444}
#tutorial-page p a:hover        {color: #eee}
#tutorial-page p a:hover:before {content: '['; color: #fa4}
#tutorial-page p a:hover:after  {content: ']'; color: #fa4}

#tutorial-page .toc h1, #tutorial-page .toc h2, #tutorial-page .toc h3, #tutorial-page .toc h4
{color: #999; cursor: pointer; font-weight: normal; white-space: nowrap; word-wrap: none; text-transform: lowercase}

#tutorial-page .popdown       {position: fixed; top: 0; left: 50px; border-bottom: solid 1px #444; padding-bottom: 2px}
#tutorial-page .popdown:hover {border-bottom: solid 1px #fa4; padding-bottom: 10px}

#tutorial-page .popdown.open  {background: rgba(0, 0, 0, 0.9); left: 40px; border-bottom: solid 4px #fa4; padding-bottom: 10px; padding-left: 10px; padding-right: 10px}

#tutorial-page .popdown       .label        {font-size: 14pt; color: #888; text-transform: lowercase; cursor: pointer}
#tutorial-page .popdown       .label:hover  {color: #eee}
#tutorial-page .popdown       .label:before {content: '< '; color: #444}
#tutorial-page .popdown       .label:after  {content: ' >'; color: #444}
#tutorial-page .popdown:hover .label:before {content: '< '; color: #fa4}
#tutorial-page .popdown:hover .label:after  {content: ' >'; color: #fa4}

#tutorial-page .popdown      .contents {display: none}
#tutorial-page .popdown.open .contents {display: block; overflow-y: auto; overflow-x: hidden; max-height: 400px}

#tutorial-page .toc h1:hover,       #tutorial-page .toc h2:hover,       #tutorial-page .toc h3:hover,       #tutorial-page .toc h4:hover       {color: #eee}
#tutorial-page .toc h1:after,       #tutorial-page .toc h2:after,       #tutorial-page .toc h3:after,       #tutorial-page .toc h4:after       {content: ' >>'; color: #888}
#tutorial-page .toc h1:hover:after, #tutorial-page .toc h2:hover:after, #tutorial-page .toc h3:hover:after, #tutorial-page .toc h4:hover:after {content: ' >>'; color: #fa4}

#tutorial-page .toc h1 {font-size: 16pt}
#tutorial-page .toc h2 {font-size: 13pt; padding-left: 20px}
#tutorial-page .toc h3 {font-size: 11pt; padding-left: 40px}
#tutorial-page .toc h4 {font-size: 10pt; padding-left: 60px}

#tutorial-page .section h1:before, #tutorial-page .section h2:before, #tutorial-page .section h3:before {content: '< '; color: #fa4}
#tutorial-page .section h1:after,  #tutorial-page .section h2:after,  #tutorial-page .section h3:after  {content: ' >'; color: #fa4}

#tutorial-page .shell {position: fixed; border-radius: 0px; right: 50px; top: 0; bottom: 0; left: 600px; border: solid 2px #222; border-width: 0 1px; overflow-y: auto; overflow-x: hidden}
#tutorial-page .shell {font-family: 'Droid Sans Mono', monospace; font-size: 10pt; color: white; background: rgba(0, 0, 0, 0.9)}

#tutorial-page .shell .prompt > span {margin: 4px}

#tutorial-page .shell .syntax {border-bottom: dotted 1px #468; cursor: default}

#tutorial-page .shell .structure              {color: #797; display: block; margin: 4px; padding: 4px 0}
#tutorial-page .shell .structure:hover:before {color: #888; content: 'parse tree: '; padding-right: 4px}

#tutorial-page .shell .shadow              {color: #888; display: block; margin: 4px; padding: 4px 0}
#tutorial-page .shell .shadow:before       {color: #752; content: '>'; padding-right: 4px}
#tutorial-page .shell .shadow:hover:before {color: #888; content: 'compiled: '; padding-right: 4px}

#tutorial-page .shell .input {font-family: 'Droid Sans Mono', monospace; padding: 0; margin: 0; border: none !important; outline: none !important}
#tutorial-page .shell .input {font-size: 10pt; background: transparent; color: white}

#tutorial-page .shell .input:focus {border: none !important; outline: none !important}

#tutorial-page .shell .history {position: relative}
#tutorial-page .shell .history pre {font-family: 'Droid Sans Mono', monospace; font-size: 10pt}
#tutorial-page .shell .history .entry, .shell .history .result, .shell .history .error, .shell .history .log {margin: 4px}
#tutorial-page .shell .history .entry  {color: white}
#tutorial-page .shell .history .entry .command {margin-left: 4px}
#tutorial-page .shell .history .result {color: #7bf}
#tutorial-page .shell .history .log    {color: #7fb}
#tutorial-page .shell .history .error  {color: #f87}

#tutorial-page .shell .history .log:hover:before {color: #888; content: 'log: '}

#tutorial-page .shell .sandbox {font-family: 'Neuton', 'Garamond', serif; background: #222; color: #eee; padding: 10px; margin-top: 4px}

#tutorial-page #seq-decipher                      {padding: 4px 0; margin: 20px 0}
#tutorial-page #seq-decipher input                {border: solid 1px #444; background: black; padding: 4px; font-family: 'Droid Sans Mono', monospace; color: white; outline: none !important}
#tutorial-page #seq-decipher table.result         {font-size: 9pt}
#tutorial-page #seq-decipher td.name              {text-transform: lowercase; color: #aaa}
#tutorial-page #seq-decipher td.fragment          {font-family: 'Droid Sans Mono', monospace; color: #fa4}
#tutorial-page #seq-decipher tr.variables td.desc {font-family: 'Droid Sans Mono', monospace}

#tutorial-page .section h1, #tutorial-page .section h2, #tutorial-page .section h3, #tutorial-page .section h4 {padding-top: 50px}

#tutorial-page .section h1 {font-size: 16pt}
#tutorial-page .section h2 {font-size: 13pt}
#tutorial-page .section h3 {font-size: 11pt}

#tutorial-page .section h1 {text-transform: lowercase; color: #999; font-weight: normal; border-bottom: solid 4px #222}
#tutorial-page .section h2 {text-transform: lowercase; color: #999; font-weight: normal; border-bottom: solid 4px #222}
#tutorial-page .section h3 {text-transform: lowercase; color: #999; font-weight: normal}
#tutorial-page .section h4 {text-transform: lowercase; color: #999; font-weight: normal}

#tutorial-page p {color: #eee; font-size: 10pt; line-height: 1.44em; text-align: justify}
#tutorial-page code {color: #fff; font-size: 10pt; font-family: 'Droid Sans Mono', monospace; background: black; padding: 4px; border: solid 1px #333}
#tutorial-page pre  {color: #fff; font-size: 10pt; font-family: 'Droid Sans Mono', monospace; background: black; padding: 4px; border: solid 1px #333}

#tutorial-page pre.code {cursor: pointer; padding: 10px 4px}
#tutorial-page pre.code:before {content: '> '; color: #fa4}
#tutorial-page pre.code:hover {background: #222; color: #fa4}

/* Generated by SDoc */

</style>
</head>

<body >
<div class='page' id='sdoc-page'>

</div>
<div class='page' id='tutorial-page'>

</div>
</body>
</html>

__
meta::bootstrap('initialization', <<'__');
#!/usr/bin/perl
# 99aeabc9ec7fe80b1b39f5e53dc7e49e      <- self-modifying Perl magic

# This is a self-modifying Perl file. I'm sorry you're viewing the source (it's
# really gnarly). If you're curious what it's made of, I recommend reading
# http://github.com/spencertipping/writing-self-modifying-perl.
#
# If you got one of these from someone and don't know what to do with it, send
# it to spencer@spencertipping.com and I'll see if I can figure out what it
# does.

# For the benefit of HTML viewers (this is hack):
# <div id='cover' style='position: absolute; z-index: 1; left: 0; top: 0; width: 10000px; height: 10000px; background: #111; font-family: sans-serif; color: #888; padding-left: 100px; padding-top: 100px'><span style='color: #fa4'>[</span> <span class='status'>loading</span> <span style='color: #fa4'>]</span></div><div style='display:none'><div>

$|++;

my %data;
my %transient;
my %externalized_functions;
my %datatypes;

my %locations;          # Maps eval-numbers to attribute names

my $global_data = join '', <DATA>;

sub meta::define_form {
  my ($namespace, $delegate) = @_;
  $datatypes{$namespace} = $delegate;
  *{"meta::${namespace}::implementation"} = $delegate;
  *{"meta::$namespace"} = sub {
    my ($name, $value, %options) = @_;
    chomp $value;
    $data{"${namespace}::$name"} = $value unless $options{no_binding};
    &$delegate($name, $value) unless $options{no_delegate}}}

sub meta::eval_in {
  my ($what, $where) = @_;

  # Obtain next eval-number and alias it to the designated location
  @locations{eval('__FILE__') =~ /\(eval (\d+)\)/} = ($where);

  my $result = eval $what;
  $@ =~ s/\(eval \d+\)/$where/ if $@;
  warn $@ if $@;
  $result}

meta::define_form 'meta', sub {
  my ($name, $value) = @_;
  meta::eval_in($value, "meta::$name")};

__
meta::bootstrap('perldoc', <<'__');
=head1 Self-modifying Perl script

=head2 Original implementation by Spencer Tipping L<http://spencertipping.com>

The prototype for this script is licensed under the terms of the MIT source code license.
However, this script in particular may be under different licensing terms. To find out how
this script is licensed, please contact whoever sent it to you. Alternatively, you may
run it with the 'license' argument if they have specified a license that way.

You should not edit this file directly. For information about how it was constructed, go
to L<http://spencertipping.com/writing-self-modifying-perl>. For quick usage guidelines,
run this script with the 'usage' argument.

=cut

__
meta::cache('parent-identification', <<'__');
../waul-object 4e04fdb8e560f4dd2ca4880b91a8e2ea
./sdoc 
/home/spencertipping/bin/configuration aa772900bb5b925cb84346bd72a4249d
/home/spencertipping/bin/node-base da62d84a9e81832f089520c172982c1a
/home/spencertipping/bin/object 99aeabc9ec7fe80b1b39f5e53dc7e49e
/home/spencertipping/bin/repository 05bc3036c343fdb8aec5b0be12a9b19e
/home/spencertipping/conjectures/perl-objects/js 246bc56c88e8e8daae3737dbb16a2a2c
/home/spencertipping/conjectures/perl-objects/preprocessor 70dae4b46eb4e06798ec6f38d17d4c7b
/home/spencertipping/conjectures/perl-objects/sdoc a1e8480e579614c01dabeecf0f963bcc
git-integration 9fabb9b6f2f374c35ddcc26549ac2b65
html 1df113f7cef70e75214a2f28ca266c5e
notes a9e5975593ed5d90d943ad98405c71e5
object 99aeabc9ec7fe80b1b39f5e53dc7e49e
preprocessor 70dae4b46eb4e06798ec6f38d17d4c7b
todo 62bc8a83ef5d4941cd2c1cdfb57a0320
vim-highlighters 902333a0bd6ed90ff919fe8477cb4e69
waul-object 4e04fdb8e560f4dd2ca4880b91a8e2ea
__
meta::configuration('dependencies', <<'__');
# Named dependencies:
#caterwaul.all.js:     http://spencertipping.com/caterwaul/caterwaul.all.min.js
#montenegro.server.js: http://spencertipping.com/montenegro/montenegro.server.js
__
meta::data('author', 'Spencer Tipping');
meta::data('bootstrap.html.sdoc', <<'__');
- html << end
  - head << end
    - link rel='stylesheet' href='http://fonts.googleapis.com/css?family=Droid+Sans+Mono&subset=latin'
    - link rel='stylesheet' href='http://fonts.googleapis.com/css?family=Neuton&subset=latin'

    - script-include deps/jquery-1.5.min.js
    - script << end
      $('#cover .status').text('loading precompiled caterwaul');
    - end

    - script-include build/caterwaul.min.js
    - script-include build/caterwaul.std.min.js
    - script-include build/caterwaul.ui.min.js
    - script-include crunch::pp::js::web/main

    - style-include pp::data::style.css
  - end

  - body << end
    - div class='page' id='sdoc-page'
    - div class='page' id='tutorial-page'
  - end
- end

__
meta::data('default-action', 'shell');
meta::data('libraries', <<'__');
# URLs of libraries to be downloaded into the lib/ directory.
http://spencertipping.com/caterwaul/caterwaul.all.js
http://spencertipping.com/montenegro/montenegro.server.js
__
meta::data('license', <<'__');
MIT License
Copyright (c) 2010 Spencer Tipping

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
__
meta::data('main', 'server.js');
meta::data('name', 'node-base');
meta::data('permanent-identity', '97d938428ee6c4d2a505f6f35bad0906');
meta::data('quiet', '1');
meta::data('watching', '1');
meta::function('ad', <<'__');
my ($options, @paths) = separate_options(@_);
@{$transient{path}} = () if $$options{-c};
return @{$transient{path}} = () unless @paths;
push @{$transient{path}}, @paths;

__
meta::function('alias', <<'__');
my ($name, @stuff) = @_;
@_ ? @stuff ? around_hook('alias', @_, sub {associate("alias::$name", join(' ', @stuff), execute => 1)})
            : retrieve("alias::$name") // "Undefined alias $name"
   : table_display([select_keys('--namespace' => 'alias')], [map retrieve($_), select_keys('--namespace' => 'alias')]);

__
meta::function('build-bootstrap-html', <<'__');
# This is called automatically prior to saving.
associate('bootstrap::html', retrieve('pp::data::bootstrap.html.sdoc'));

# Long story about why we're corrupting the HTML this way, but basically it has
# to do with giving the user a nicer experience as the page is loading.
my $initialization = retrieve('bootstrap::initialization');
my $new_div = <<EOF;
>>&lt;div id='cover' style='position: absolute; z-index: 1; left: 0; top: 0; width: 10000px; height: 10000px; background: #111; font-family: sans-serif; color: #888; padding-left: 100px; padding-top: 100px'>
  <span style='color: #fa4'>[</span> <span class='status'>loading</span> <span style='color: #fa4'>]</span>
</div>
<div style='display:none'><div>
EOF

$new_div =~ s/\n\s*//mg;
$new_div =~ s/&lt;/</g;
$new_div =~ s/^>>//g;

$initialization =~ s/^# <div.*?<\/div>$/# $new_div/smg;

associate('bootstrap::initialization', $initialization);

__
meta::function('cat', 'join "\\n", retrieve(@_);');
meta::function('cc', <<'__');
# Stashes a quick one-line continuation. (Used to remind me what I was doing.)
@_ ? associate('data::current-continuation', hook('set-cc', join(' ', @_))) : retrieve('data::current-continuation');
__
meta::function('ccc', 'rm(\'data::current-continuation\');');
meta::function('child', <<'__');
around_hook('child', @_, sub {
  my ($child_name) = @_;
  clone($child_name);
  enable();
  qx($child_name update-from $0 -n);
  disable()});
__
meta::function('cloc', 'loc(\'modules/caterwaul\\.(?!format)[^/]+$\', \'caterwaul$\')');
meta::function('clone', <<'__');
for (grep length, @_) {
  around_hook('clone', $_, sub {
    hypothetically(sub {
      rm('data::permanent-identity');
      file::write($_, serialize(), noclobber => 1);
      chmod(0700, $_)})})}
__
meta::function('cp', <<'__');
my $from = shift @_;
my $value = retrieve($from);
associate($_, $value) for @_;
__
meta::function('create', <<'__');
my ($name, $value) = @_;
around_hook('create', $name, $value, sub {
  return edit($name) if exists $data{$name};
  associate($name, defined $value ? $value : '');
  edit($name) unless defined $value});
__
meta::function('crunch-whitespace', <<'__');
my ($attr) = @_;
my $text = retrieve($attr) // $attr;
$text =~ s/\h+/ /g;
$text;
__
meta::function('ct', 'create("sdoc::js::test/$_[0]");');
meta::function('current-state', 'serialize(\'-pS\');');
meta::function('cwd', <<'__');
use Cwd qw/getcwd/;
getcwd();

__
meta::function('disable', 'hook(\'disable\', chmod_self(sub {$_[0] & 0666}));');
meta::function('dupdate', '# This function has been removed to eliminate dependency on LWP::Simple.');
meta::function('e', <<'__');
my @extensions = select_keys('--criteria' => "sdoc::js::extensions/(.*/)?$_[0]");
edit($extensions[0]);
__
meta::function('edit', <<'__');
my ($options, @names) = separate_options(@_);

@names = select_keys('--criteria' => "^$$options{'--prefix'}.*" . join('.*', @names), %$options) if $$options{'--prefix'};

my ($name, @others) = @names;
die "cannot edit multiple attributes simultaneously (others are @others)" if @others;

my $extension = extension_for($name);

die "$name is virtual or does not exist" unless exists $data{$name};
die "$name is inherited; use 'edit $name -f' to edit anyway" unless is($name, '-u') || is($name, '-d') || exists $$options{'-f'};

around_hook('edit', @_, sub {
  associate($name, invoke_editor_on($data{$name} // '', %options, attribute => $name, extension => $extension), execute => 1)});

save() unless $data{'data::edit::no-save'};
'';

__
meta::function('edit-self', <<'__');
$global_data = invoke_editor_on($global_data);
save();

__
meta::function('enable', 'hook(\'enable\', chmod_self(sub {$_[0] | $_[0] >> 2}));');
meta::function('export', <<'__');
# Exports data into a text file.
#   export attr1 attr2 attr3 ... file.txt
my $name = pop @_;
@_ or die 'Expected filename';
file::write($name, join "\n", retrieve(@_));
__
meta::function('extern', '&{$_[0]}(retrieve(@_[1 .. $#_]));');
meta::function('gjs', <<'__');
# Runs GJS on a collection of source files and arguments. The format is:
# gjs([@source_strings], @process_args);
my ($sources, @args) = @_;

with_exported(@$sources, sub {
  hook('before-gjs', $_[0], @args);
  sh('gjs', $_[0], @args);
  hook('after-gjs', $_[0], @args);
});
__
meta::function('grep', <<'__');
# Looks through attributes for a pattern. Usage is grep pattern [options], where
# [options] is the format as provided to select_keys.

my ($pattern, @args)     = @_;
my ($options, @criteria) = separate_options(@args);
my @attributes           = select_keys(%$options, '--criteria' => join('|', @criteria));

$pattern = qr/$pattern/;

my @m_attributes;
my @m_line_numbers;
my @m_lines;

for my $k (@attributes) {
  next unless length $k;
  my @lines = split /\n/, retrieve($k);
  for (0 .. $#lines) {
    next unless $lines[$_] =~ $pattern;
    push @m_attributes,   $k;
    push @m_line_numbers, $_ + 1;
    push @m_lines,        '' . ($lines[$_] // '')}}

unless ($$options{'-C'}) {
  s/($pattern)/\033[1;31m\1\033[0;0m/g for @m_lines;
  s/^/\033[1;34m/o for @m_attributes;
  s/^/\033[1;32m/o && s/$/\033[0;0m/o for @m_line_numbers}

table_display([@m_attributes], [@m_line_numbers], [@m_lines]);
__
meta::function('hash', 'fast_hash(@_);');
meta::function('hook', <<'__');
my ($hook, @args) = @_;
$transient{active_hooks}{$hook} = 1;
dangerous('', sub {&$_(@args)}) for grep /^hook::${hook}::/, sort keys %data;
@args;
__
meta::function('hooks', 'join "\\n", sort keys %{$transient{active_hooks}};');
meta::function('identity', 'retrieve(\'data::permanent-identity\') || associate(\'data::permanent-identity\', fast_hash(rand() . name() . serialize()));');
meta::function('import', <<'__');
my $name = pop @_;
associate($name, @_ ? join('', map(file::read($_), @_)) : join('', <STDIN>)); 
__
meta::function('import-bundle', <<'__');
eval join '', <STDIN>;
die $@ if $@;
__
meta::function('initial-state', '$transient{initial};');
meta::function('is', <<'__');
my ($attribute, @criteria) = @_;
my ($options, @stuff) = separate_options(@criteria);
exists $data{$attribute} and attribute_is($attribute, %$options);

__
meta::function('line', <<'__');
# Prints a line with some context. This is useful when a test fails.
my ($line, $part) = @_;
my @lines = split /\n/, $part eq '-a' ? retrieve('pp::js::caterwaul.all') : retrieve('pp::js::caterwaul');

for ($line - 5 .. $line + 5) {
  print "\033[1;32m" if $_ == $line;
  printf "%04d: %s\n", $_, $lines[$_ - 1];
  print "\033[0;0m" if $_ == $line;
}
__
meta::function('load-gjs', <<'__');
gjs(['id::start = +new Date();', 'pp::js::caterwaul.all', 'id::print("caterwaul self-compiled in " + (+new Date() - start) + "ms");']);

__
meta::function('load-state', <<'__');
around_hook('load-state', @_, sub {
  my ($state_name) = @_;
  my $state = retrieve("state::$state_name");

  terminal::state('saving current state into _...');
  save_state('_');

  delete $data{$_} for grep ! /^state::/, keys %data;
  %externalized_functions = ();

  terminal::state("restoring state $state_name...");
  meta::eval_in($state, "state::$state_name");
  terminal::error(hook('load-state-failed', $@)) if $@;
  reload();
  verify()});

__
meta::function('load-time', <<'__');
sub load {
  my ($runtime, @files) = @_;
  with_exported(@files, sub {
    my ($file) = @_;
    terminal::info("$runtime: loading @files");
      bench(sub {sh("$runtime $file > /dev/null 2>&1")}, 4)})}

load 'gjs', qw(build/caterwaul.js);
load 'gjs', qw(build/caterwaul.js build/caterwaul.std.js);
load 'gjs', qw(build/caterwaul.js build/caterwaul.std.js build/caterwaul.ui.js);

load 'node', qw(build/caterwaul.js);
load 'node', qw(build/caterwaul.js build/caterwaul.std.js);
load 'node', qw(build/caterwaul.js build/caterwaul.std.js build/caterwaul.ui.js);

__
meta::function('lock', 'hook(\'lock\', chmod_self(sub {$_[0] & 0555}));');
meta::function('ls', <<'__');
my ($options, @criteria) = separate_options(@_);
my ($external, $shadows, $sizes, $flags, $long, $hashes, $parent_hashes) = @$options{qw(-e -s -z -f -l -h -p)};
$sizes = $flags = $hashes = $parent_hashes = 1 if $long;

return table_display([grep ! exists $data{$externalized_functions{$_}}, sort keys %externalized_functions]) if $shadows;

my $criteria    = join('|', @criteria);
my @definitions = select_keys('--criteria' => $criteria, '--path' => $transient{path}, %$options);

my %inverses  = map {$externalized_functions{$_} => $_} keys %externalized_functions;
my @externals = map $inverses{$_}, grep length, @definitions;
my @internals = grep length $inverses{$_}, @definitions;
my @sizes     = map sprintf('%6d %6d', length(serialize_single($_)), length(retrieve($_))), @{$external ? \@internals : \@definitions} if $sizes;

my @flags     = map {my $k = $_; join '', map(is($k, "-$_") ? $_ : '-', qw(d i m u))} @definitions if $flags;
my @hashes    = map fast_hash(retrieve($_)), @definitions if $hashes;

my %inherited     = parent_attributes(grep /^parent::/o, keys %data) if $parent_hashes;
my @parent_hashes = map $inherited{$_} || '-', @definitions if $parent_hashes;

join "\n", map strip($_), split /\n/, table_display($external ? [grep length, @externals] : [@definitions],
                                                    $sizes ? ([@sizes]) : (), $flags ? ([@flags]) : (), $hashes ? ([@hashes]) : (), $parent_hashes ? ([@parent_hashes]) : ());

__
meta::function('ls-a', 'ls(\'-ad\', @_);');
meta::function('min-gzipped', <<'__');
# Prints minified and gzipped size
sub size_of {my @files = ('build/caterwaul.min.js', map "build/caterwaul.$_.min.js", @_);
             terminal::info("minified/gzipped(@_) is " . qx(cat @files | wc -c | tr -d '\n') . "/" . qx(cat @files | gzip --best -c | wc -c | tr -d '\n'))}
size_of;
size_of 'std';
size_of 'std', 'ui';

__
meta::function('minify', <<'__');
# Minify using YUI compressor
my ($filename) = @_;
my $minified = $filename;
$minified =~ s/\.js$/.min.js/;
terminal::info("minifying $filename");
file::write($minified, qx(yuicompressor "$filename"));
__
meta::function('minify-yui', <<'__');
# Minify using YUI compressor
my ($filename) = @_;
my $minified = $filename;
$minified =~ s/\.js$/.min.js/;

terminal::info("minifying $filename");
file::write($minified, join '', qx(yuicompressor --nomunge --line-break 160 "$filename"));

__
meta::function('mv', <<'__');
my ($from, $to) = @_;
die "'$from' does not exist" unless exists $data{$from};
associate($to, retrieve($from), execute => 1);
rm($from);

__
meta::function('name', <<'__');
my $name = $0;
$name =~ s/^.*\///;
$name;
__
meta::function('note', <<'__');
# Creates a note with a given name, useful for jotting things down.
create("note::$_[0]");
__
meta::function('notes', 'ls(\'-a\', \'^note::\');');
meta::function('parents', 'join "\\n", grep s/^parent:://o, sort keys %data;');
meta::function('parse-todo', <<'__');
# Takes a string of todo text and parses it. Multiple todo lists can be
# combined, resulting in a longer list.
my @todo_paragraphs = grep s/^\h*\|//, split /\n{2,}/, join "\n\n", retrieve(@_);
my @todo_lines      = grep /^\h*\[\W+\]\h*\w/, map split(/\n/), @todo_paragraphs;

sub progress_of {my ($s) = @_; ($s =~ /^(\S*)/ and length $1) / length $s}

map /^\s*\[(\W+)\]\h*(\H+)\h*(.*)$/ && {progress_meter => $1, progress => progress_of($1), category => $2, details => $3}, @todo_lines;

__
meta::function('perl', <<'__');
my @result = eval(join ' ', @_);
$@ ? terminal::error($@) : wantarray ? @result : $result[0];

__
meta::function('precompile', <<'__');
terminal::info("precompiling $_[0]");
node([qw|pp::js::tools/precompile|], @_);

__
meta::function('preprocess', <<'__');
# Implements a simple preprocessing language.
# Syntax follows two forms. One is the 'line form', which gives you a way to specify arguments inline
# but not spanning multiple lines. The other is 'block form', which gives you access to both one-line
# arguments and a block of lines. The line parameters are passed in verbatim, and the block is
# indentation-adjusted and then passed in as a second parameter. (Indentation is adjusted to align
# with the name of the command.)
#
# Here are the forms:
#
# - line arguments to function
#
# - block line arguments << eof
#   block contents
#   block contents
#   ...
# - eof

my ($string, %options) = @_;
my $expansions         = 0;
my $old_string         = '';
my $limit              = $options{expansion_limit} || 100;
my @pieces             = ();

sub adjust_spaces {
  my ($spaces, $string) = @_;
  $string =~ s/^$spaces  //mg;
  chomp $string;
  $string;
}

while ($old_string ne $string and $expansions++ < $limit) {
  $old_string = $string;

  while ((my @pieces = split  /(^(\h*)-\h \S+ \h* \V* <<\h*(\w+)$ \n .*?  ^\2-\h\3$)/xms, $string) > 1 and $expansions++ < $limit) {
    $pieces[1 + ($_ << 2)] =~ /^ (\h*)-\h(\S+)\h*(\V*)<<\h*(\w+)$ \n(.*?) ^\1-\h\4 $/xms && $externalized_functions{"template::$2"} and
      $pieces[1 + ($_ << 2)] = &{"template::$2"}($3, adjust_spaces($1, $5))
      for 0 .. $#pieces / 4;

    @pieces[2 + ($_ << 2), 3 + ($_ << 2)] = '' for 0 .. $#pieces / 4;
    $string = join '', @pieces;
  }

  if ((my @pieces = split     /^(\h*-\h \S+ \h* .*)$/xom, $string) > 1) {
    $pieces[1 + ($_ << 1)] =~ /^ \h*-\h(\S+)\h*(.*)$/xom && $externalized_functions{"template::$1"} and
      $pieces[1 + ($_ << 1)] = &{"template::$1"}($2)
      for 0 .. $#pieces >> 1;

    $string = join '', @pieces;
  }
}

$string;
__
meta::function('rd', <<'__');
if (@_) {my $pattern = join '|', @_;
         @{$transient{path}} = grep $_ !~ /^$pattern$/, @{$transient{path}}}
else    {pop @{$transient{path}}}

__
meta::function('reload', 'around_hook(\'reload\', sub {execute($_) for grep ! /^bootstrap::/, keys %data});');
meta::function('render', <<'__');
my ($options, @stuff) = separate_options(@_);

unless ($$options{-M}) {
  chdir 'src' or die 'no src/ directory exists; are you running this from the repository root?';
  terminal::info('rendering caterwaul core (use -M to skip core/module rendering)');
  sh('./caterwaul render');

  terminal::info('rendering std module');
  sh('./std render');

  terminal::info('rendering ui module');
  sh('./ui render');
  chdir '..';
} else {
  terminal::info('skipping core file render because -M was specified');
}

terminal::info('creating base files');
file::write('build/caterwaul.vim',     retrieve('vim_highlighter::caterwaul'), mkpath => 1);
file::write('build/caterwaul.node.js', retrieve('pp::js::caterwaul.node'),     mkpath => 1);

file::write('doc/caterwaul-tutorial.sdoc', retrieve('sdoc::web/tutorial'), mkpath => 1);
file::write('README.md', retrieve('markdown::readme'));

unless ($$options{-W}) {
  my $waul = $$options{'--waul'} || 'waul';
  terminal::info("regenerating waul-core using $waul as a bootstrap compiler");
  file::write('src/waul/waul.waul', retrieve('waul::waul'));
  file::write('src/waul/waul.md',   retrieve('markdown::waul::waul'));
  sh("$waul -e build/caterwaul.std.min.js src/waul/waul.waul");

  file::write('waul-core', retrieve('pp::js::waul-bootstrap'));
  chmod 0755, 'waul-core';

  terminal::info('regenerating waul-core using its replicator (identity transform)');
  file::write('waul-core.temporary', join '', qx|./waul-core --replicate|);
  die 'failed to regenerate waul-core' if $?;
  rename 'waul-core.temporary', 'waul-core';
  chmod 0755, 'waul-core';

  terminal::info('regenerating waul from waul-core');
  file::write('waul', join '', qx|./waul-core --replicate -e build/caterwaul.std.min.js -e build/caterwaul.ui.min.js|);
  die 'failed to construct waul from waul-core' if $?;
  chmod 0755, 'waul';
} else {
  terminal::info('skipping waul render because -W was specified');
}

save();

__
meta::function('repl', <<'__');
node(['id::start = +new Date();', 'pp::js::caterwaul.all', 'id::console.log("caterwaul self-compiled in " + (+new Date() - start) + "ms");',
      'id::require("repl").start("caterwaul> ").context.caterwaul = caterwaul']);

__
meta::function('replc', <<'__');
node(['pp::js::caterwaul', 'id::require("repl").start("caterwaul core> ").context.caterwaul = caterwaul']);

__
meta::function('repls', <<'__');
node(['id::start = +new Date();', 'pp::js::caterwaul', 'pp::js::extensions/std', 'id::console.log("caterwaul self-compiled in " + (+new Date() - start) + "ms");',
      'id::require("repl").start("caterwaul> ").context.caterwaul = caterwaul']);

__
meta::function('rm', <<'__');
around_hook('rm', @_, sub {
  exists $data{$_} or terminal::warning("$_ does not exist") for @_;
  delete @data{@_}});
__
meta::function('rmparent', <<'__');
# Removes one or more parents.
my ($options, @parents) = separate_options(@_);
my $clobber_divergent = $$options{'-D'} || $$options{'--clobber-divergent'};

my %parents = map {$_ => 1} @parents;
my @other_parents = grep !$parents{$_}, grep s/^parent:://, select_keys('--namespace' => 'parent');
my %kept_by_another_parent;

$kept_by_another_parent{$_} = 1 for grep s/^(\S+)\s.*$/\1/, split /\n/o, cat(@other_parents);

for my $parent (@parents) {
  my $keep_parent_around = 0;

  for my $line (split /\n/, retrieve("parent::$parent")) {
    my ($name, $hash) = split /\s+/, $line;
    next unless exists $data{$name};

    my $local_hash = fast_hash(retrieve($name));
    if ($clobber_divergent or $hash eq $local_hash or ! defined $hash) {rm($name) unless $kept_by_another_parent{$name}}
    else {terminal::info("local attribute $name exists and is divergent; use rmparent -D $parent to delete it");
          $keep_parent_around = 1}}

  $keep_parent_around ? terminal::info("not deleting parent::$parent so that you can run", "rmparent -D $parent if you want to nuke divergent attributes too")
                      : rm("parent::$parent")}

__
meta::function('save', <<'__');
around_hook('save', sub {dangerous('', sub {file::write($0, serialize('-V')); $transient{initial} = state()}) if verify()});

__
meta::function('save-state', <<'__');
# Creates a named copy of the current state and stores it.
my ($state_name) = @_;
around_hook('save-state', $state_name, sub {
  associate("state::$state_name", current_state(), execute => 1)});

__
meta::function('sdoc', <<'__');
# Applies SDoc processing to a file or attribute. Takes the file or attribute
# name as the first argument and returns the processed text.

my %comments_for_extension = 
  qw|c     /*,*/  cpp   //    cc   //    h    //    java //  py  #    rb   #    pl  #   pm   #         ml   (*,*)  js  //
     hs    --     sh    #     lisp ;;;   lsp  ;;;   s    #   scm ;;;  sc   ;;;  as  //  html <!--,-->  mli  (*,*)  cs  //
     vim   "      elisp ;     bas  '     ada  --    asm  ;   awk #    bc   #    boo #   tex  %         fss  (*,*)  erl %
     scala //     hx    //    io   //    j    NB.   lua  --  n   //   m    %    php //  sql  --        pov  //     pro %
     r     #      self  ","   tcl  #     texi @c    tk   #   csh #    vala //   vbs '   v    /*,*/     vhdl --     ss  ;;;
     haml  -#     sass  /*,*/ scss /*,*/ css  /*,*/ fig  /   waul #   canard nb[,]|;

# No extension suggests a shebang line, which generally requires # to denote a comment.
$comments_for_extension{''} = '#';

my $generated_string = 'Generated by SDoc';

sub is_code    {map /^\s*[^A-Z\|\s]/o, @_}
sub is_blank   {map /^\n/o, @_}
sub comment    {my ($text, $s, $e) = @_; join "\n", map("$s $_" . (length $e ? " $e" : ''), split /\n/, $text)}

sub paragraphs {map split(/((?:\n\h*){2,})/, $_), @_}

my ($filename, $specified_extension) = @_;

# Two possibilities here. One is that the filename is an attribute, in which case
# we want to look up the extension in the transients table. The other is that
# it's a real filename.
my ($extension)       = $specified_extension || ($filename =~ /\.sdoc$/io ? $filename =~ /\.(\w+)\.sdoc$/igo : $filename =~ /\.(\w+)$/igo);
my ($other_extension) = extension_for($filename);
$other_extension =~ s/\.sdoc$//io;
$other_extension =~ s/^\.//o;

my ($start, $end) = split /,/o, $comments_for_extension{lc($other_extension || $extension)} // $comments_for_extension{''} // '#';

join '', map(is_code($_) || is_blank($_) ? ($_ =~ /^\s*c\n(.*)$/so ? $1 : $_) : comment($_, $start, $end), paragraphs retrieve($filename)),
         "\n" . comment($generated_string, $start, $end) . "\n";

__
meta::function('sdoc-html', <<'__');
# Converts SDoc to logically-structured HTML. Sections end up being nested,
# and code sections and examples are marked as such. For instance, here is some
# sample output:

# <div class='section level1'>
#   <h1 class='title'>Foo</h1>
#   <p>This is a paragraph...</p>
#   <p>This is another paragraph...</p>
#   <pre class='code'>int main () {return 0;}</pre>
#   <pre class='quoted'>int main () {return 0} // Won't compile</pre>
#   <div class='section level2'>
#     <h2 class='title'>Bar</h2>
#     ...
#   </div>
# </div>

# It is generally good about escaping things that would interfere with HTML,
# but within text paragraphs it lets you write literal HTML. The heuristic is
# that known tags that are reasonably well-formed are allowed, but unknown ones
# are escaped.

my ($attribute)   = @_;
my @paragraphs    = split /\n(?:\s*\n)+/, retrieve($attribute);

my $known_tags    = join '|', qw[html head body meta script style link title div a span input button textarea option select form label iframe blockquote code caption
                                 table tbody tr td th thead tfoot img h1 h2 h3 h4 h5 h6 li ol ul noscript p pre samp sub sup var canvas audio video strong em];
my $section_level = 0;
my @markup;

my $indent        = sub {'  ' x ($_[0] || $section_level)};
my $unindent      = sub {my $spaces = '  ' x ($section_level - 1); s/^$spaces//gm};

my $escape_all    = sub {s/&/&amp;/g; s/</&lt;/g; s/>/&gt;/g};
my $escape_some   = sub {s/&/&amp;/g; s/<(?!\/|($known_tags)[^>]*>.*<\/\1>)/&lt;/gs};

my $code          = sub {&$escape_all(); &$unindent(); s/^c\n//;                   push @markup, &$indent() . "<pre class='code'>$_</pre>"};
my $quoted        = sub {&$escape_all(); &$unindent(); s/^\|(\s?)/ \1/; s/^  //mg; push @markup, &$indent() . "<pre class='quoted'>$_</pre>"};

my $paragraph     = sub {&$escape_some(); push @markup, &$indent() . "<p>$_</p>"};

my $section       = sub {my $h = $_[0] > 6 ? 6 : $_[0]; push @markup, &$indent($_[0] - 1) . "<div class='section level$_[0]'>", &$indent($_[0]) . "<h$h>$2</h$h>"};
my $close_section = sub {push @markup, &$indent($_[0]) . "</div>"};

my $title = sub {
  my $indentation = (length($1) >> 1) + 1;
  &$close_section($section_level) while $section_level-- >= $indentation;
  &$section($indentation);
  $section_level = $indentation;
};

for (@paragraphs) {
  &$code(),   next unless /^\h*[A-Z|]/;
  &$quoted(), next if     /^\h*\|/;

  &$title(), s/^.*\n// if /^(\s*)(\S.*)\.\n([^\n]+)/ and length("$1$2") < 60 and length("$1$2") - 10 < length($3);
  &$paragraph();
}

&$close_section($section_level) while $section_level--;

join "\n", @markup;

__
meta::function('sdoc-markdown', <<'__');
# Renders a chunk of SDoc as Markdown. This involves converting quoted and
# unquoted code and section headings, but not numbered lists.

my ($attribute)   = @_;
my @paragraphs    = split /\n(?:\s*\n)+/, retrieve($attribute);

my $section_level = 0;
my @markup;

my $indent        = sub {'  ' x ($_[0] || $section_level)};
my $unindent      = sub {my $spaces = '  ' x ($section_level - 1); s/^$spaces//gm; $_};

my $code          = sub {&$unindent(); s/^c\n//;                   push @markup, join("\n", map &$indent(2) . $_, split /\n/)};
my $quoted        = sub {&$unindent(); s/^\|(\s?)/ \1/; s/^  //mg; push @markup, join("\n", map &$indent(2) . $_, split /\n/)};

my $heading       = sub {'#' x $_[0]};
my $section       = sub {&$unindent(); push @markup, &$heading($_[0]) . ' ' . $2};

my $title = sub {
  my $indentation = (length($1) >> 1) + 1;
  &$section($indentation);
  $section_level = $indentation;
};

for (@paragraphs) {
  &$code(),   next unless /^\h*[A-Z|]/;
  &$quoted(), next if     /^\h*\|/;

  &$title(), s/^.*\n// if /^(\s*)(\S.*)\.\n([^\n]+)/ and length("$1$2") < 60 and length("$1$2") - 10 < length($3);
  push @markup, join "\n", map &$unindent(), split /\n/;
}

join "\n\n", @markup;

__
meta::function('sdoc-packed', <<'__');
# An SDoc preprocessor that removes all comment paragraphs. Paragraph breaks
# are preserved, and no "generated by SDoc" string is added.
join "\n", grep /^\s*[^A-Z| ]/, split /\n(?:\s*\n)+/, retrieve(@_);

__
meta::function('sdocp', <<'__');
# Renders an attribute as SDocP. This logic was taken directly from the sdoc script.
my $attribute = retrieve($_[0]);
sub escape {my @results = map {s/\\/\\\\/go; s/\n/\\n/go; s/'/\\'/go; $_} @_; wantarray ? @results : $results[0]}
"sdocp('" . escape($_[0]) . "', '" . escape($attribute) . "');";
__
meta::function('serialize', <<'__');
my ($options, @criteria) = separate_options(@_);
my $partial     = $$options{'-p'};
my $criteria    = join '|', @criteria;
my @attributes  = map serialize_single($_), select_keys(%$options, '-m' => 1, '--criteria' => $criteria), select_keys(%$options, '-M' => 1, '--criteria' => $criteria);
my @final_array = @{$partial ? \@attributes : [retrieve('bootstrap::initialization'), @attributes, 'internal::main();', '', '__DATA__', $global_data]};
join "\n", @final_array;

__
meta::function('serialize-single', <<'__');
# Serializes a single attribute and optimizes for content.

my $name          = $_[0] || $_;
my $contents      = $data{$name};
my $meta_function = 'meta::' . namespace($name);
my $invocation    = attribute($name);
my $escaped       = $contents;
$escaped =~ s/\\/\\\\/go;
$escaped =~ s/'/\\'/go;

return "$meta_function('$invocation', '$escaped');" unless $escaped =~ /\v/;

my $delimiter = '__' . fast_hash($contents);
my $chars     = 2;

++$chars until $chars >= length($delimiter) || index("\n$contents", "\n" . substr($delimiter, 0, $chars)) == -1;
$delimiter = substr($delimiter, 0, $chars);

"$meta_function('$invocation', <<'$delimiter');\n$contents\n$delimiter";

__
meta::function('sh', 'system(@_);');
meta::function('shb', <<'__');
# Backgrounded shell.
with_fork(@_, \&::sh);

__
meta::function('shell', <<'__');
my ($options, @arguments) = separate_options(@_);
$transient{repl_prefix} = $$options{'--repl-prefix'};

terminal::cc(retrieve('data::current-continuation')) if length $data{'data::current-continuation'};
around_hook('shell', sub {shell::repl(%$options)});

__
meta::function('size', <<'__');
my $size = 0;
$size += length $data{$_} for keys %data;
sprintf "   full logical  unique    self\n% 7d % 7d % 7d % 7d", length(serialize()), $size, length(serialize('-up')), length $global_data;

__
meta::function('snapshot', <<'__');
my ($name) = @_;
file::write(my $finalname = temporary_name($name), serialize(), noclobber => 1);
chmod 0700, $finalname;
hook('snapshot', $finalname);
__
meta::function('state', <<'__');
my @keys = grep !is($_, '-v'), sort keys %data;
my $hash = fast_hash(fast_hash(scalar @keys) . join '|', @keys);
$hash = fast_hash("$data{$_}|$hash") for @keys;
fast_hash("$global_data|$hash");

__
meta::function('t', <<'__');
my @tests = select_keys('--criteria' => "sdoc::js::test/(.*\/)?$_[0]");
edit($tests[0]);
__
meta::function('todo-summary', <<'__');
my @todo_items = &{'parse-todo'}(@_);
my %categories;
my %category_completion;

push @{$categories{$_->{category}} ||= []}, $_         for @todo_items;
$category_completion{$_->{category}} += $_->{progress} for @todo_items;

# Adjust to represent averages rather than totals
$category_completion{$_} /= @{$categories{$_}} for keys %categories;

join "\n\n", map sprintf("%s: %4.2f%%\n%s", $_, $category_completion{$_} * 100,
                         join "\n", map sprintf("%-8s %s", "[$_->{progress_meter}]", $_->{details}), @{$categories{$_}}), sort keys %categories;

__
meta::function('touch', 'associate($_, \'\') for @_;');
meta::function('unlock', 'hook(\'unlock\', chmod_self(sub {$_[0] | 0200}));');
meta::function('update', <<'__');
update_from(@_, grep s/^parent:://o, sort keys %data);

__
meta::function('update-from', <<'__');
# Upgrade all attributes that aren't customized. Customization is defined when the data type is created,
# and we determine it here by checking for $transient{inherit}{$type}.

# Note that this assumes you trust the remote script. If you don't, then you shouldn't update from it.

around_hook('update-from-invocation', separate_options(@_), sub {
  my ($options, @targets) = @_;
  my %parent_id_cache = cache('parent-identification');
  my %already_seen;

  @targets or return;

  my @known_targets     = grep s/^parent:://, parent_ordering(map "parent::$_", grep exists $data{"parent::$_"}, @targets);
  my @unknown_targets   = grep ! exists $data{"parent::$_"}, @targets;
  @targets = (@known_targets, @unknown_targets);

  my $save_state        = $$options{'-s'} || $$options{'--save'};
  my $no_parents        = $$options{'-P'} || $$options{'--no-parent'} || $$options{'--no-parents'};
  my $force             = $$options{'-f'} || $$options{'--force'};
  my $clobber_divergent = $$options{'-D'} || $$options{'--clobber-divergent'};

  save_state('before-update');

  for my $target (@targets) {
    dangerous("updating from $target", sub {
    around_hook('update-from', $target, sub {
      my $identity = $parent_id_cache{$target} ||= join '', qx($target identity);
      next if $already_seen{$identity};
      $already_seen{$identity} = 1;

      my $attributes = join '', qx($target ls -ahiu);
      my %divergent;
      die "skipping unreachable $target" unless $attributes;

      for my $to_rm (split /\n/, retrieve("parent::$target")) {
        my ($name, $hash) = split(/\s+/, $to_rm);
        next unless exists $data{$name};

        my $local_hash = fast_hash(retrieve($name));
        if ($clobber_divergent or $hash eq $local_hash or ! defined $hash) {rm($name)}
        else {terminal::info("preserving local version of divergent attribute $name (use update -D to clobber it)");
              $divergent{$name} = retrieve($name)}}

      associate("parent::$target", $attributes) unless $no_parents;

      dangerous('', sub {eval qx($target serialize -ipmu)});
      dangerous('', sub {eval qx($target serialize -ipMu)});

      map associate($_, $divergent{$_}), keys %divergent unless $clobber_divergent;

      reload()})})}

  cache('parent-identification', %parent_id_cache);

  if (verify()) {hook('update-from-succeeded', $options, @targets);
                 terminal::info("Successfully updated. Run 'load-state before-update' to undo this change.") if $save_state;
                 rm('state::before-update') unless $save_state}
  elsif ($force) {hook('update-from-failed', $options, @targets);
                  terminal::warning('Failed to verify: at this point your object will not save properly, though backup copies will be created.',
                                    'Run "load-state before-update" to undo the update and return to a working state.')}
  else {hook('update-from-failed', $options, @targets);
        terminal::error('Verification failed after the upgrade was complete.');
        terminal::info("$0 has been reverted to its pre-upgrade state.", "If you want to upgrade and keep the failure state, then run 'update-from $target --force'.");
        load_state('before-update');
        rm('state::before-update')}});

__
meta::function('usage', '"Usage: $0 action [arguments]\\nUnique actions (run \'$0 ls\' to see all actions):" . ls(\'-u\');');
meta::function('verify', <<'__');
file::write(my $other = $transient{temporary_filename} = temporary_name(), my $serialized_data = serialize());
chomp(my $observed = join '', qx|perl '$other' state|);

unlink $other if my $result = $observed eq (my $state = state());
terminal::error("Verification failed; expected $state but got $observed from $other") unless $result;
hook('after-verify', $result, observed => $observed, expected => $state);
$result;
__
meta::function('vim', <<'__');
# Installs VIM highlighters.
file::write("$ENV{'HOME'}/.vim/syntax/$_.vim", retrieve("vim_highlighter::$_")) for grep s/^vim_highlighter:://o, keys %data;

__
meta::function('w', <<'__');
my @web = select_keys('--criteria' => "::web/(.*/)?$_[0]");
edit($web[0]);
__
meta::function('waul', <<'__');
my ($name, %options) = @_;
$name =~ s/^waul:://;
my $output     = $options{output} || "$name.js";
my $extensions = $options{extensions} ? join(' ', map "--extension '$_'", split /\s+/, $options{extensions}) : '';
my $waul       = retrieve("waul::$name") =~ m-^#!/usr/bin/env (\S+)- ? $1 : 'waul';

terminal::info("compiling waul::$name using $waul ($extensions)");

with_exported("waul::$name", sub {
  my ($exported) = @_;
  sh("$waul --output '$output' $extensions $exported")});

__
meta::hook('before-save::bootstrap.html', <<'__');
build_bootstrap_html();

__
meta::hook('before-save::remove-lwp-dependency', <<'__');
associate($_, '# This function has been removed to eliminate dependency on LWP::Simple.') for qw/function::dupdate retriever::http/;

__
meta::hook('before-shell::ad', <<'__');
ad('sdoc::');

__
meta::indicator('cc', 'length ::retrieve(\'data::current-continuation\') ? "\\033[1;36mcc\\033[0;0m" : \'\';');
meta::indicator('locked', 'is_locked() ? "\\033[1;31mlocked\\033[0;0m" : \'\';');
meta::indicator('path', <<'__');
my @highlighted = map join("\033[1;30m|\033[0;0m", split /\|/, $_), @{$transient{path}};
join "\033[1;30m/\033[0;0m", @highlighted;

__
meta::internal_function('around_hook', <<'__');
# around_hook('hookname', @args, sub {
#   stuff;
# });

# Invokes 'before-hookname' on @args before the sub runs, invokes the
# sub on @args, then invokes 'after-hookname' on @args afterwards.
# The after-hook is not invoked if the sub calls 'die' or otherwise
# unwinds the stack.

my $hook = shift @_;
my $f    = pop @_;

hook("before-$hook", @_);
my $result = &$f(@_);
hook("after-$hook", @_);
$result;
__
meta::internal_function('associate', <<'__');
my ($name, $value, %options) = @_;
die "Namespace does not exist" unless exists $datatypes{namespace($name)};
$data{$name} = $value;
execute($name) if $options{execute};
$value;

__
meta::internal_function('attribute', <<'__');
my ($name) = @_;
$name =~ s/^[^:]*:://;
$name;
__
meta::internal_function('attribute_is', <<'__');
my ($a, %options) = @_;
my %inherited     = parent_attributes(grep /^parent::/o, sort keys %data) if grep exists $options{$_}, qw/-u -U -d -D/;
my $criteria      = $options{'--criteria'} || $options{'--namespace'} && "^$options{'--namespace'}::" || '.';

my %tests = ('-u' => sub {! $inherited{$a}},
             '-d' => sub {$inherited{$a} && fast_hash(retrieve($a)) ne $inherited{$a}},
             '-i' => sub {$transient{inherit}{namespace($a)}},
             '-v' => sub {$transient{virtual}{namespace($a)}},
             '-s' => sub {$a =~ /^state::/o},
             '-m' => sub {$a =~ /^meta::/o});

return 0 unless scalar keys %tests == scalar grep ! exists $options{$_}    ||   &{$tests{$_}}(), keys %tests;
return 0 unless scalar keys %tests == scalar grep ! exists $options{uc $_} || ! &{$tests{$_}}(), keys %tests;

$a =~ /$_/ || return 0 for @{$options{'--path'}};
$a =~ /$criteria/;

__
meta::internal_function('bench', <<'__');
use Time::HiRes qw/gettimeofday tv_interval/;

my ($f, $times) = @_;
$times ||= 1;
my $start_time = [gettimeofday];
&$f() for 1 .. $times;
my $duration = tv_interval($start_time) / $times;
terminal::info("$duration seconds elapsed");

__
meta::internal_function('cache', <<'__');
my ($name, %pairs) = @_;
if (%pairs) {associate("cache::$name", join "\n", map {$pairs{$_} =~ s/\n//g; "$_ $pairs{$_}"} sort keys %pairs)}
else        {map split(/\s/, $_, 2), split /\n/, retrieve("cache::$name")}
__
meta::internal_function('chmod_self', <<'__');
my ($mode_function)      = @_;
my (undef, undef, $mode) = stat $0;
chmod &$mode_function($mode), $0;
__
meta::internal_function('dangerous', <<'__');
# Wraps a computation that may produce an error.
my ($message, $computation) = @_;
terminal::info($message) if $message;
my @result = eval {&$computation()};
terminal::warning(translate_backtrace($@)), return undef if $@;
wantarray ? @result : $result[0];
__
meta::internal_function('debug_trace', <<'__');
terminal::debug(join ', ', @_);
wantarray ? @_ : $_[0];
__
meta::internal_function('execute', <<'__');
my ($name, %options) = @_;
my $namespace = namespace($name);
eval {&{$datatypes{$namespace}}(attribute($name), retrieve($name))};
warn $@ if $@ && $options{'carp'};

__
meta::internal_function('exported', <<'__');
# Allocates a temporary file containing the concatenation of attributes you specify,
# and returns the filename. The filename will be safe for deletion anytime.
my $filename = temporary_name();
file::write($filename, cat(@_));
$filename;

__
meta::internal_function('extension_for', <<'__');
my $extension = $transient{extension}{namespace($_[0])};
$extension = &$extension($_[0]) if ref $extension eq 'CODE';
$extension || '';
__
meta::internal_function('fast_hash', <<'__');
my ($data)     = @_;
my $piece_size = length($data) >> 3;

my @pieces     = (substr($data, $piece_size * 8) . length($data), map(substr($data, $piece_size * $_, $piece_size), 0 .. 7));
my @hashes     = (fnv_hash($pieces[0]));

push @hashes, fnv_hash($pieces[$_ + 1] . $hashes[$_]) for 0 .. 7;

$hashes[$_] ^= $hashes[$_ + 4] >> 16 | ($hashes[$_ + 4] & 0xffff) << 16 for 0 .. 3;
$hashes[0]  ^= $hashes[8];

sprintf '%08x' x 4, @hashes[0 .. 3];
__
meta::internal_function('file::read', <<'__');
my $name = shift;
open my($handle), "<", $name;
my $result = join "", <$handle>;
close $handle;
$result;
__
meta::internal_function('file::write', <<'__');
use File::Path     'mkpath';
use File::Basename 'dirname';

my ($name, $contents, %options) = @_;
die "Choosing not to overwrite file $name" if $options{noclobber} and -f $name;
mkpath(dirname($name)) if $options{mkpath};

my $open_name = $name =~ /^[>|]/ ? $name : $options{append} ? ">> $name" : "> $name";
open my($handle), $open_name or die "Can't open $name for writing";
print $handle $contents;
close $handle;

__
meta::internal_function('fnv_hash', <<'__');
# A rough approximation to the Fowler-No Voll hash. It's been 32-bit vectorized
# for efficiency, which may compromise its effectiveness for short strings.

my ($data) = @_;

my ($fnv_prime, $fnv_offset) = (16777619, 2166136261);
my $hash                     = $fnv_offset;
my $modulus                  = 2 ** 32;

$hash = ($hash ^ ($_ & 0xffff) ^ ($_ >> 16)) * $fnv_prime % $modulus for unpack 'L*', $data . substr($data, -4) x 8;
$hash;
__
meta::internal_function('hypothetically', <<'__');
# Applies a temporary state and returns a serialized representation.
# The original state is restored after this, regardless of whether the
# temporary state was successful.

my %data_backup   = %data;
my ($side_effect) = @_;
my $return_value  = eval {&$side_effect()};
%data = %data_backup;

die $@ if $@;
$return_value;
__
meta::internal_function('internal::main', <<'__');
disable();

$SIG{'INT'} = sub {snapshot(); exit 1};

$transient{initial}      = state();
chomp(my $default_action = retrieve('data::default-action'));

my $function_name = shift(@ARGV) || $default_action;
my @effective_argv = @ARGV;

unshift @effective_argv, $function_name and $function_name = 'method_missing' unless exists $externalized_functions{$function_name};

around_hook('main-function', $function_name, @effective_argv, sub {
  dangerous('', sub {
    chomp(my $result = &$function_name(@effective_argv));
    print "$result\n" if $result})});

save() unless state() eq $transient{initial};

END {enable()}

__
meta::internal_function('invoke_editor_on', <<'__');
my ($data, %options) = @_;
my $editor    = $options{editor} || $ENV{VISUAL} || $ENV{EDITOR} || die 'Either the $VISUAL or $EDITOR environment variable should be set to a valid editor';
my $options   = $options{options} || $ENV{VISUAL_OPTS} || $ENV{EDITOR_OPTS} || '';
my $attribute = $options{attribute};
$attribute =~ s/\//-/g;
my $filename  = temporary_name() . "-$attribute$options{extension}";

file::write($filename, $data);
system("$editor $options '$filename'");

my $result = file::read($filename);
unlink $filename;
$result;
__
meta::internal_function('is_locked', '!((stat($0))[2] & 0222);');
meta::internal_function('namespace', <<'__');
my ($name) = @_;
$name =~ s/::.*$//;
$name;
__
meta::internal_function('parent_attributes', <<'__');
my $attributes = sub {my ($name, $value) = split /\s+/o, $_; $name => ($value || 1)};
map &$attributes(), split /\n/o, join("\n", retrieve(@_));
__
meta::internal_function('parent_ordering', <<'__');
# Topsorts the parents by dependency chain. The simplest way to do this is to
# transitively compute the number of parents referred to by each parent.

my @parents = @_;
my %all_parents = map {$_ => 1} @parents;

my %parents_of = map {
  my $t = $_;
  my %attributes = parent_attributes($_);
  $t => [grep /^parent::/, keys %attributes]} @parents;

my %parent_count;
my $parent_count;
$parent_count = sub {
  my ($key) = @_;
  return $parent_count{$key} if exists $parent_count{$key};
  my $count = 0;
  $count += $parent_count->($_) + exists $data{$_} for @{$parents_of{$key}};
  $parent_count{$key} = $count};

my %inverses;
push @{$inverses{$parent_count->($_)} ||= []}, $_ for @parents;
grep exists $all_parents{$_}, map @{$inverses{$_}}, sort keys %inverses;
__
meta::internal_function('retrieve', <<'__');
my @results = map defined $data{$_} ? $data{$_} : retrieve_with_hooks($_), @_;
wantarray ? @results : $results[0];

__
meta::internal_function('retrieve_with_hooks', <<'__');
# Uses the hooks defined in $transient{retrievers}, and returns undef if none work.
my ($attribute) = @_;
my $result      = undef;

defined($result = &$_($attribute)) and return $result for map $transient{retrievers}{$_}, sort keys %{$transient{retrievers}};
return undef;
__
meta::internal_function('select_keys', <<'__');
my %options = @_;
grep attribute_is($_, %options), sort keys %data;
__
meta::internal_function('separate_options', <<'__');
# Things with one dash are short-form options, two dashes are long-form.
# Characters after short-form are combined; so -auv4 becomes -a -u -v -4.
# Also finds equivalences; so --foo=bar separates into $$options{'--foo'} eq 'bar'.
# Stops processing at the -- option, and removes it. Everything after that
# is considered to be an 'other' argument.

# The only form not supported by this function is the short-form with argument.
# To pass keyed arguments, you need to use long-form options.

my @parseable;
push @parseable, shift @_ until ! @_ or $_[0] eq '--';

my @singles = grep /^-[^-]/, @parseable;
my @longs   = grep /^--/,    @parseable;
my @others  = grep ! /^-/,   @parseable;

my @singles = map /-(.{2,})/ ? map("-$_", split(//, $1)) : $_, @singles;

my %options;
/^([^=]+)=(.*)$/ and $options{$1} = $2 for @longs;
++$options{$_} for grep ! /=/, @singles, @longs;

({%options}, @others, @_);

__
meta::internal_function('strip', 'wantarray ? map {s/^\\s*|\\s*$//g; $_} @_ : $_[0] =~ /^\\s*(.*?)\\s*$/ && $1;');
meta::internal_function('table_display', <<'__');
# Displays an array of arrays as a table; that is, with alignment. Arrays are
# expected to be in column-major order.

sub maximum_length_in {
  my $maximum = 0;
  length > $maximum and $maximum = length for @_;
  $maximum;
}

my @arrays    = @_;
my @lengths   = map maximum_length_in(@$_), @arrays;
my @row_major = map {my $i = $_; [map $$_[$i], @arrays]} 0 .. $#{$arrays[0]};
my $format    = join '  ', map "%-${_}s", @lengths;

join "\n", map strip(sprintf($format, @$_)), @row_major;
__
meta::internal_function('temporary_name', <<'__');
use File::Temp 'tempfile';
my (undef, $temporary_filename) = tempfile("$0." . 'X' x 4, OPEN => 0);
$temporary_filename;
__
meta::internal_function('translate_backtrace', <<'__');
my ($trace) = @_;
$trace =~ s/\(eval (\d+)\)/$locations{$1 - 1}/g;
$trace;
__
meta::internal_function('with_cwd', <<'__');
my ($dir, $f) = @_;
my $cwd = cwd();

my @result = eval {chdir $dir && &$f()};
chdir $cwd;
die $@ if $@;
wantarray ? @result : $result[0];

__
meta::internal_function('with_exported', <<'__');
# Like exported(), but removes the file after running some function.
# Usage is with_exported(@files, sub {...});
my $f      = pop @_;
my $name   = exported(@_);
my $result = eval {&$f($name)};
terminal::warning("$@ when running with_exported()") if $@;
unlink $name;
$result;
__
meta::internal_function('with_fork', <<'__');
my (@args) = @_;
my $f = pop @args;

return process->new($child_pid) if my $child_pid = fork;

# This is the child process. Disable saving to prevent contention, and then
# exit with the given status code.
*::save = sub {};
exit &$f(@args);

__
meta::library('process', <<'__');
package process;

sub new  {my ($class, $pid) = @_; bless \$pid, $class}
sub kill {my ($self, $signal) = @_; ::kill $signal // 'KILL', $$self; $self->wait()}
sub term {my ($self) = @_; $self->kill('TERM')}
sub int  {my ($self) = @_; $self->kill('INT')}
sub stop {my ($self) = @_; $self->kill('STOP')}
sub cont {my ($self) = @_; $self->kill('CONT')}

sub wait {my ($self) = @_; ::wait($$self)}

__
meta::library('shell', <<'__');
# Functions for shell parsing and execution.
package shell;
use Term::ReadLine;

sub tokenize {grep length, split /\s+|("[^"\\]*(?:\\.)?")/o, join ' ', @_};

sub parse {
  my ($fn, @args) = @_;
  s/^"(.*)"$/\1/o, s/\\\\"/"/go for @args;
  {function => $fn, args => [@args]}}

sub execute {
  my %command = %{$_[0]};
  die "undefined command: $command{function}" unless exists $externalized_functions{$command{function}};
  &{"::$command{function}"}(@{$command{args}})}

sub run {execute(parse(tokenize(@_)))}

sub prompt {
  my %options = @_;
  my $name    = $options{name} // ::name();

  my $indicators = join '', map &{"::$_"}(), ::select_keys('--namespace' => 'indicator');
  my $prefix     = $transient{repl_prefix} // '';

  "$prefix\033[1;32m$name\033[0;0m$indicators "}

sub repl {
  my %options = @_;

  my $term = new Term::ReadLine "$0 shell";
  $term->ornaments(0);
  my $attribs = $term->Attribs;
  $attribs->{completion_entry_function} = $attribs->{list_completion_function};

  my $autocomplete = $options{autocomplete} || sub {[sort(keys %data), grep !/-/, sort keys %externalized_functions]};
  my $prompt       = $options{prompt}       || \&prompt;
  my $parse        = $options{parse}        || sub {parse(tokenize(@_))};
  my $output       = $options{output}       || sub {print join("\n", @_), "\n"};
  my $command      = $options{command}      || sub {my ($command) = @_; ::around_hook('shell-command', $command, sub {&$output(::dangerous('', sub {execute($command)}))})};

  length $_ && &$command(&$parse($_)) while ($attribs->{completion_word} = &$autocomplete(), defined($_ = $term->readline(&$prompt())))}

__
meta::library('terminal', <<'__');
# Functions for nice-looking terminal output.
package terminal;

my $process = ::name();

sub message {print STDERR "[$_[0]] $_[1]\n"}
sub color {
  my ($name, $color) = @_;
  *{"terminal::$name"} = sub {chomp($_), print STDERR "\033[1;30m$process(\033[1;${color}m$name\033[1;30m)\033[0;0m $_\n" for map join('', $_), @_}}

my %preloaded = (info => 32, progress => 32, state => 34, debug => 34, warning => 33, error => 31);
color $_, $preloaded{$_} for keys %preloaded;
__
meta::message_color('cc', '36');
meta::message_color('state', 'purple');
meta::message_color('states', 'yellow');
meta::message_color('watch', 'blue');
meta::parent('../waul-object', <<'__');
function::minify-yui                                        68564f46e60e2c77881e62cbb3a150fa
function::rmparent                                          49051d669554867f87c08656380a8aba
function::waul                                              e1162e71693317dd52b5a30cac0a881a
meta::type::waul                                            869b5820cd79178b94c3ccdd47dff9df
parent::/home/spencertipping/conjectures/perl-objects/sdoc  8088a29685f29420fd00607006958087
parent::preprocessor                                        7172206e753310217b5f67ac8366c8bf

__
meta::parent('./sdoc', <<'__');
function::sdoc                           2dcf55f3e50721bda37c206b17544c54
function::sdoc-html                      b23152b3f5be696e5bae842ec43fc5a4
function::sdoc-markdown                  a35a6441dd750466f2d0e636bee2b382
function::sdoc-packed                    8ec4975fca7228708baae6ccd241bdbf
function::sdocp                          c3d738d982ba87418a298ff58478a85b
meta::type::sdoc                         22cd7315641d38c9d536344e83c36bed
meta::type::slibrary                     95474943c4a5f8ff17d3cf66ddb7c386
parent::/home/spencertipping/bin/object  208e4b12afe64a14bfd8cacf04181e14
retriever::code-sdoc                     03b87ff8d1ecf7594db9ca0669fc69a1
retriever::html-sdoc                     8ab7705d03276945b23a71677153233c
retriever::markdown-sdoc                 67c34ba8223ec36a3ae018e411354db2
retriever::sdoc                          662061e9e41491e2a1debd6862ccf1e7
retriever::sdoc-packed                   f7116f96adf2c748ac1991f4d7c1792b
retriever::sdocp                         fcfcf3a7de79d7d863402b9ccfcac3c4

__
meta::parent('/home/spencertipping/bin/configuration', <<'__');
meta::type::configuration                7f5ba514d47ac29a3c226d0e331d9da4
parent::/home/spencertipping/bin/object  208e4b12afe64a14bfd8cacf04181e14

__
meta::parent('/home/spencertipping/bin/object', <<'__');
bootstrap::html                         f44dd03cb0c904b3a5f69fbda5f018d0
bootstrap::initialization               d22fafa2938ecb0d4728e2958b54ed3d
bootstrap::perldoc                      5793df44bdd2526bb461272924abfd4b
function::ad                            9220b9dc131f8f79878a6209adfe8ef2
function::alias                         8eeeeb4e064ef3aba7edf8f254427bc2
function::cat                           f684de6c8776617a437b76009114f52e
function::cc                            12ea9176e388400704d823433c209b7a
function::ccc                           d151a9793edd83f80fb880b7f0ab9b34
function::child                         f5764adf0b4e892f147a9b6b68d4816f
function::clone                         bb42e04e10a8e54e88786b6fbc4fb213
function::cp                            3fe69d1b58d90045ad520048977538c4
function::create                        3010d55f4dfa59a998742e07823ed54d
function::current-state                 6f03f86f1901e9ef07fdb5d4079a914c
function::cwd                           fd9b58e76c474a8fe93dc3abdccb8857
function::disable                       53b449708cc2ffdefa352e53bb7d847d
function::edit                          5778be977436f7245cf990bf95b6da34
function::edit-self                     71790df00f941ed9b56e17f789b93871
function::enable                        7de1cedc36841f5de8f9fdfbc3b65097
function::export                        2374cd1dbf7616cb38cafba4e171075d
function::extern                        1290a5223e2824763eecfb3a54961eff
function::grep                          55c3cea8ff4ec2403be2a9d948e59f14
function::hash                          6ee131d093e95b80039b4df9c7c84a02
function::hook                          675cdb98b5dd8567bdd5a02ead6184b5
function::hooks                         3d989899c616f7440429a2d9bf1cc44b
function::identity                      6523885762fcc2f354fc25cf6ed126ce
function::import                        5d0f0634cbd01274f2237717507198a2
function::initial-state                 03d8ed608855a723124e79ca184d8e73
function::is                            41564c8f21b12ab80824ac825266d805
function::load-state                    b6cf278a1f351f316fa6e070359b6081
function::lock                          5d8db258704e6a8623fac796f62fac02
function::ls                            01a23d51d5b529e03943bd57e33f92df
function::mv                            ccd000960db4cf627d9246c43d87ba4c
function::name                          955ba2d1fe1d67cd78651a4042283b00
function::parents                       3da9e63b5aae9e2f5dcc946a86d166aa
function::perl                          9f9fd744f0ed225ad8fb3b79fa53dd9a
function::rd                            2adb16d7e819d2e87a27201744a581e7
function::reload                        1589f4cf8374e0011991cb8907afca3e
function::rm                            6f6fd7a6c25558eb469d78ea888f8551
function::rmparent                      fc2884910a6939a47898a778f277332c
function::save                          3cbe5c3735ee4ff99cb60ccf68bc8b91
function::save-state                    5af59ebc4ad8965767e4dc106d3b557e
function::serialize                     a97c7391c635a93b0a710d10eb8cb3cd
function::serialize-single              8bac97e94a1162947d274421053387b0
function::sh                            1b2f542ca9dd63ad437058b7f6f61aac
function::shb                           21139548efb79500d9c999dba024ab32
function::shell                         a87f389b94713e5855e62241d649d01d
function::size                          69f6ab4a100c6ef05d4d41510004d645
function::snapshot                      56939a47f2758421669641e15ebd66eb
function::state                         88bc24e732c55aac68a103eab96b9e48
function::touch                         3991b1b7c7187566f50e5e58ce01fa06
function::unlock                        b4aac02f7f3fb700acf4acfd9b180ceb
function::update                        ac391dc90e507e7586c81850e7c2ecdd
function::update-from                   06fef658374d482adb2e62fbeed9efb4
function::usage                         5bdd370f5a56cfbf199e08d398091444
function::verify                        0c0cc1dfeab7d705919df122f7850a4f
indicator::cc                           3db7509c521ee6abfedd33d5f0148ed3
indicator::locked                       fc2b4f4ca0d6a334b9ac423d06c8f18c
indicator::path                         b5e2cb524caa0283f713a0ddf9f4c162
internal_function::around_hook          7cc876e7c5f78c34654337fc95255587
internal_function::associate            55f202ffdbc6b9005e53d3e82f5f9bfe
internal_function::attribute            dd6f010f9688977464783f60f5b6d3dd
internal_function::attribute_is         d28ac825b3937029386372c560a65775
internal_function::cache                eb9da45580a9ac0882baf98acd2ecd60
internal_function::chmod_self           2035e861eedab55ba0a9f6f5a068ca70
internal_function::dangerous            46c4baaa214ab3d05af43e28083d5141
internal_function::debug_trace          0faf9d9f4159d72dfe4481f6f3607ce1
internal_function::execute              f0924e087d978ff2ab1e117124db3042
internal_function::exported             ae35afef7d4762f2818aee5872c75be0
internal_function::extension_for        9de8261d69cc93e9b92072b89c89befd
internal_function::fast_hash            ee5eba48f837fda0fe472645fdd8899a
internal_function::file::read           e647752332c8e05e81646a3ff98f9a8e
internal_function::file::write          460e2343283eb9fd0e1815389f4e07e6
internal_function::fnv_hash             c36d56f1e13a60ae427afc43ba025afc
internal_function::hypothetically       b83e3f894a6df8623ccd370515dfd976
internal_function::internal::main       12c18f86d766ffb67b8dc0572985bf98
internal_function::invoke_editor_on     5eb976796f0ec172d6ec036116a2f41e
internal_function::is_locked            da12ced6aa38295251f7e748ffd22925
internal_function::namespace            784d2e96003550681a4ae02b8d6d0a27
internal_function::parent_attributes    f6ccfaa982ab1a4d066043981aaca277
internal_function::parent_ordering      57b6da88f76b59f3fed9abfa61280e5e
internal_function::retrieve             721a6800f328da05047fd7392758f55d
internal_function::retrieve_with_hooks  0f1b0220ccd973d57a2e96ff00458cf2
internal_function::select_keys          a5e3532ec6d58151d0ee24416ea1e2b5
internal_function::separate_options     34ec41a6edaa15adde607a0db3ccfa36
internal_function::strip                14f490b10ebd519e829d8ae20ea4d536
internal_function::table_display        d575f4dc873b2e0be5bd7352047fd904
internal_function::temporary_name       6f548d101fc68356515ffd0fc9ae0c93
internal_function::translate_backtrace  d77a56d608473b3cd8a3c6cb84185e10
internal_function::with_cwd             928bae9caa3cb212f0c5c977ba55166c
internal_function::with_exported        df345d5095d5ed13328ddd07ea922b36
internal_function::with_fork            b252464d1efd12dc4a5ee6890076b6a9
library::process                        9fe4e2320eae9f6661a6eb6e777fb6ca
library::shell                          f561500cf223df1bf6daf43af93577a5
library::terminal                       7e2d045782405934a9614fe04bcfe559
message_color::cc                       2218ef0f7425de5c717762ffb100eb43
message_color::state                    03621cd6ac0b1a40d703f41e26c5807f
message_color::states                   ac66eeeff487b5f43f88a78ea18b3d56
meta::configure                         69c2e727c124521d074fde21f8bbc4db
meta::externalize                       aa44e27e0bbee6f0ca4de25d603a1fc7
meta::functor::editable                 48246c608f363de66511400e00b26164
meta::type::alias                       889d26d2df385e9ff8e2da7de4e48374
meta::type::bootstrap                   51108ab2ddb8d966e927c8f62d9ef3e5
meta::type::cache                       9267171f2eace476f64a1a670eaaf2c7
meta::type::data                        120e1649a468d3b3fd3fb783b4168499
meta::type::function                    8ea626198861dc59dd7f303eecb5ff88
meta::type::hook                        ff92aef328b6bdc6f87ddd0821f3e42f
meta::type::inc                         78e0375b6725487cb1f0deca41e96bbe
meta::type::indicator                   feb54a2624e6983617685047c717427f
meta::type::internal_function           eff3cf31e2635f51c83836f116c99d2f
meta::type::library                     7622e8d65e03066668bade74715d65ad
meta::type::message_color               557a1b44979cbf77a7251fbdc4c5b82c
meta::type::meta                        c6250056816b58a9608dd1b2614246f8
meta::type::parent                      09d1d03379e4e0b262e06939f4e00464
meta::type::retriever                   71a29050bf9f20f6c71afddff83addc9
meta::type::state                       84da7d5220471307f1f990c5057d3319
retriever::file                         3bbc9d8a887a536044bafff1d54def7e
retriever::global                       4fe8df0cca548075169968772843a156
retriever::id                           4da6080168d32445150cc4200af7af6e
retriever::object                       c7633990b4e01bdc783da7e545799f4f
retriever::perl                         f41938e6dbad317f62abffc1e4d28cca

__
meta::parent('/home/spencertipping/conjectures/perl-objects/js', <<'__');
meta::type::js                           0377fcc438f3af85ec87d4770b8cd307
parent::/home/spencertipping/bin/object  208e4b12afe64a14bfd8cacf04181e14

__
meta::parent('/home/spencertipping/conjectures/perl-objects/preprocessor', <<'__');
function::preprocess           ab5526a02ff417d4c162357dc327e7c4
meta::type::template           bc4b0c80b5efc716b19e99b832c22bf3
parent::object                 208e4b12afe64a14bfd8cacf04181e14
retriever::pp                  3b5f5c5d30c5a04f72056dedaacfe7b7
template::comment              dfe273d2dad3d8159b847545e4e5c309
template::eval                 1a0e2124a05056be4abc11803883c294
template::failing_conditional  e3a4523110dd859e828f342185de7c62
template::include              47b5552d609d97fe7f2522d5c1027014
template::pinclude             c07ff79bf8d642cceaa9ef844bfcb189

__
meta::parent('/home/spencertipping/conjectures/perl-objects/sdoc', <<'__');
function::sdoc                           9d019a0b391ccb5fb849a2bd354385b5
function::sdoc-html                      b23152b3f5be696e5bae842ec43fc5a4
function::sdoc-markdown                  a35a6441dd750466f2d0e636bee2b382
function::sdoc-packed                    8ec4975fca7228708baae6ccd241bdbf
function::sdocp                          c3d738d982ba87418a298ff58478a85b
meta::type::sdoc                         22cd7315641d38c9d536344e83c36bed
meta::type::slibrary                     95474943c4a5f8ff17d3cf66ddb7c386
parent::/home/spencertipping/bin/object  208e4b12afe64a14bfd8cacf04181e14
retriever::code-sdoc                     03b87ff8d1ecf7594db9ca0669fc69a1
retriever::html-sdoc                     8ab7705d03276945b23a71677153233c
retriever::markdown-sdoc                 67c34ba8223ec36a3ae018e411354db2
retriever::sdoc                          662061e9e41491e2a1debd6862ccf1e7
retriever::sdoc-packed                   f7116f96adf2c748ac1991f4d7c1792b
retriever::sdocp                         fcfcf3a7de79d7d863402b9ccfcac3c4

__
meta::parent('html', <<'__');
meta::functor::html-templates            2771200f87e9cbfeecfb5f8a0f796f18
parent::/home/spencertipping/bin/object  208e4b12afe64a14bfd8cacf04181e14
parent::preprocessor                     88f8be6f851d5f9159d7996dd67ab875
template::script-include                 76be051ad116449ddebd10e7c3729afd
template::style-include                  8e5a06b70e1b00379765f319bf6c8066

__
meta::parent('object', <<'__');
bootstrap::html                         f44dd03cb0c904b3a5f69fbda5f018d0
bootstrap::initialization               d22fafa2938ecb0d4728e2958b54ed3d
bootstrap::perldoc                      5793df44bdd2526bb461272924abfd4b
function::ad                            9220b9dc131f8f79878a6209adfe8ef2
function::alias                         8eeeeb4e064ef3aba7edf8f254427bc2
function::cat                           f684de6c8776617a437b76009114f52e
function::cc                            12ea9176e388400704d823433c209b7a
function::ccc                           d151a9793edd83f80fb880b7f0ab9b34
function::child                         f5764adf0b4e892f147a9b6b68d4816f
function::clone                         bb42e04e10a8e54e88786b6fbc4fb213
function::cp                            3fe69d1b58d90045ad520048977538c4
function::create                        3010d55f4dfa59a998742e07823ed54d
function::current-state                 6f03f86f1901e9ef07fdb5d4079a914c
function::cwd                           fd9b58e76c474a8fe93dc3abdccb8857
function::disable                       53b449708cc2ffdefa352e53bb7d847d
function::edit                          5778be977436f7245cf990bf95b6da34
function::edit-self                     71790df00f941ed9b56e17f789b93871
function::enable                        7de1cedc36841f5de8f9fdfbc3b65097
function::export                        2374cd1dbf7616cb38cafba4e171075d
function::extern                        1290a5223e2824763eecfb3a54961eff
function::grep                          55c3cea8ff4ec2403be2a9d948e59f14
function::hash                          6ee131d093e95b80039b4df9c7c84a02
function::hook                          675cdb98b5dd8567bdd5a02ead6184b5
function::hooks                         3d989899c616f7440429a2d9bf1cc44b
function::identity                      6523885762fcc2f354fc25cf6ed126ce
function::import                        5d0f0634cbd01274f2237717507198a2
function::initial-state                 03d8ed608855a723124e79ca184d8e73
function::is                            41564c8f21b12ab80824ac825266d805
function::load-state                    b6cf278a1f351f316fa6e070359b6081
function::lock                          5d8db258704e6a8623fac796f62fac02
function::ls                            01a23d51d5b529e03943bd57e33f92df
function::mv                            ccd000960db4cf627d9246c43d87ba4c
function::name                          955ba2d1fe1d67cd78651a4042283b00
function::parents                       3da9e63b5aae9e2f5dcc946a86d166aa
function::perl                          9f9fd744f0ed225ad8fb3b79fa53dd9a
function::rd                            2adb16d7e819d2e87a27201744a581e7
function::reload                        1589f4cf8374e0011991cb8907afca3e
function::rm                            6f6fd7a6c25558eb469d78ea888f8551
function::rmparent                      fc2884910a6939a47898a778f277332c
function::save                          3cbe5c3735ee4ff99cb60ccf68bc8b91
function::save-state                    5af59ebc4ad8965767e4dc106d3b557e
function::serialize                     a97c7391c635a93b0a710d10eb8cb3cd
function::serialize-single              8bac97e94a1162947d274421053387b0
function::sh                            1b2f542ca9dd63ad437058b7f6f61aac
function::shb                           21139548efb79500d9c999dba024ab32
function::shell                         a87f389b94713e5855e62241d649d01d
function::size                          69f6ab4a100c6ef05d4d41510004d645
function::snapshot                      56939a47f2758421669641e15ebd66eb
function::state                         88bc24e732c55aac68a103eab96b9e48
function::touch                         3991b1b7c7187566f50e5e58ce01fa06
function::unlock                        b4aac02f7f3fb700acf4acfd9b180ceb
function::update                        ac391dc90e507e7586c81850e7c2ecdd
function::update-from                   06fef658374d482adb2e62fbeed9efb4
function::usage                         5bdd370f5a56cfbf199e08d398091444
function::verify                        0c0cc1dfeab7d705919df122f7850a4f
indicator::cc                           3db7509c521ee6abfedd33d5f0148ed3
indicator::locked                       fc2b4f4ca0d6a334b9ac423d06c8f18c
indicator::path                         b5e2cb524caa0283f713a0ddf9f4c162
internal_function::around_hook          7cc876e7c5f78c34654337fc95255587
internal_function::associate            55f202ffdbc6b9005e53d3e82f5f9bfe
internal_function::attribute            dd6f010f9688977464783f60f5b6d3dd
internal_function::attribute_is         d28ac825b3937029386372c560a65775
internal_function::cache                eb9da45580a9ac0882baf98acd2ecd60
internal_function::chmod_self           2035e861eedab55ba0a9f6f5a068ca70
internal_function::dangerous            46c4baaa214ab3d05af43e28083d5141
internal_function::debug_trace          0faf9d9f4159d72dfe4481f6f3607ce1
internal_function::execute              f0924e087d978ff2ab1e117124db3042
internal_function::exported             ae35afef7d4762f2818aee5872c75be0
internal_function::extension_for        9de8261d69cc93e9b92072b89c89befd
internal_function::fast_hash            ee5eba48f837fda0fe472645fdd8899a
internal_function::file::read           e647752332c8e05e81646a3ff98f9a8e
internal_function::file::write          460e2343283eb9fd0e1815389f4e07e6
internal_function::fnv_hash             c36d56f1e13a60ae427afc43ba025afc
internal_function::hypothetically       b83e3f894a6df8623ccd370515dfd976
internal_function::internal::main       12c18f86d766ffb67b8dc0572985bf98
internal_function::invoke_editor_on     5eb976796f0ec172d6ec036116a2f41e
internal_function::is_locked            da12ced6aa38295251f7e748ffd22925
internal_function::namespace            784d2e96003550681a4ae02b8d6d0a27
internal_function::parent_attributes    f6ccfaa982ab1a4d066043981aaca277
internal_function::parent_ordering      57b6da88f76b59f3fed9abfa61280e5e
internal_function::retrieve             721a6800f328da05047fd7392758f55d
internal_function::retrieve_with_hooks  0f1b0220ccd973d57a2e96ff00458cf2
internal_function::select_keys          a5e3532ec6d58151d0ee24416ea1e2b5
internal_function::separate_options     34ec41a6edaa15adde607a0db3ccfa36
internal_function::strip                14f490b10ebd519e829d8ae20ea4d536
internal_function::table_display        d575f4dc873b2e0be5bd7352047fd904
internal_function::temporary_name       6f548d101fc68356515ffd0fc9ae0c93
internal_function::translate_backtrace  d77a56d608473b3cd8a3c6cb84185e10
internal_function::with_cwd             928bae9caa3cb212f0c5c977ba55166c
internal_function::with_exported        df345d5095d5ed13328ddd07ea922b36
internal_function::with_fork            b252464d1efd12dc4a5ee6890076b6a9
library::process                        9fe4e2320eae9f6661a6eb6e777fb6ca
library::shell                          f561500cf223df1bf6daf43af93577a5
library::terminal                       7e2d045782405934a9614fe04bcfe559
message_color::cc                       2218ef0f7425de5c717762ffb100eb43
message_color::state                    03621cd6ac0b1a40d703f41e26c5807f
message_color::states                   ac66eeeff487b5f43f88a78ea18b3d56
meta::configure                         69c2e727c124521d074fde21f8bbc4db
meta::externalize                       aa44e27e0bbee6f0ca4de25d603a1fc7
meta::functor::editable                 48246c608f363de66511400e00b26164
meta::type::alias                       889d26d2df385e9ff8e2da7de4e48374
meta::type::bootstrap                   51108ab2ddb8d966e927c8f62d9ef3e5
meta::type::cache                       9267171f2eace476f64a1a670eaaf2c7
meta::type::data                        120e1649a468d3b3fd3fb783b4168499
meta::type::function                    8ea626198861dc59dd7f303eecb5ff88
meta::type::hook                        ff92aef328b6bdc6f87ddd0821f3e42f
meta::type::inc                         78e0375b6725487cb1f0deca41e96bbe
meta::type::indicator                   feb54a2624e6983617685047c717427f
meta::type::internal_function           eff3cf31e2635f51c83836f116c99d2f
meta::type::library                     7622e8d65e03066668bade74715d65ad
meta::type::message_color               557a1b44979cbf77a7251fbdc4c5b82c
meta::type::meta                        c6250056816b58a9608dd1b2614246f8
meta::type::parent                      09d1d03379e4e0b262e06939f4e00464
meta::type::retriever                   71a29050bf9f20f6c71afddff83addc9
meta::type::state                       84da7d5220471307f1f990c5057d3319
retriever::file                         3bbc9d8a887a536044bafff1d54def7e
retriever::global                       4fe8df0cca548075169968772843a156
retriever::id                           4da6080168d32445150cc4200af7af6e
retriever::object                       c7633990b4e01bdc783da7e545799f4f
retriever::perl                         f41938e6dbad317f62abffc1e4d28cca

__
meta::parent('preprocessor', <<'__');
function::preprocess           ab5526a02ff417d4c162357dc327e7c4
meta::type::template           bc4b0c80b5efc716b19e99b832c22bf3
parent::object                 208e4b12afe64a14bfd8cacf04181e14
retriever::pp                  3b5f5c5d30c5a04f72056dedaacfe7b7
template::comment              dfe273d2dad3d8159b847545e4e5c309
template::eval                 1a0e2124a05056be4abc11803883c294
template::failing_conditional  e3a4523110dd859e828f342185de7c62
template::include              47b5552d609d97fe7f2522d5c1027014
template::pinclude             c07ff79bf8d642cceaa9ef844bfcb189

__
meta::parent('todo', <<'__');
function::parse-todo      c8247ece4f8ea189cd6523b0f94c7247
function::todo-summary    1c986ec8c6efd4dfae2d3ba5e7ca64f2
meta::type::todo          143fa39e155c81f4186aa53a947296ec
parent::./sdoc            4049d6a1b51e739f038d4624dcb394b4
parent::vim-highlighters  f3bda418899ffc5cdeb6774b6b1477c7

__
meta::parent('vim-highlighters', <<'__');
function::vim                cf9e37026f6cd1499a6dd258fbbcd060
meta::type::vim_highlighter  27990fddb6d7bd383b55dbdfee0d148d
parent::object               208e4b12afe64a14bfd8cacf04181e14

__
meta::parent('waul-object', <<'__');
function::minify-yui                                        dd0d6afd6be3108180637436f058a181
function::waul                                              66b92f55d5db498934b487188a04b16d
meta::type::waul                                            869b5820cd79178b94c3ccdd47dff9df
parent::/home/spencertipping/conjectures/perl-objects/js    08631314298573e77850afe27d7d3003
parent::/home/spencertipping/conjectures/perl-objects/sdoc  0cef7258a2449765557387e954ab76d0
parent::preprocessor                                        4450ebbe2c9d3a70ada4050fcd567907

__
meta::retriever('code-sdoc', <<'__');
# Lets you specify the SDoc extension manually. For instance:
# code.js::sdoc::foo causes sdoc::foo to be SDoc-rendered using Javascript comments.
my ($name) = @_;
return undef unless $name =~ s/^code\.(\w+)::// and defined retrieve($name);
sdoc($name, $1);

__
meta::retriever('crunch', <<'__');
# Crunches the whitespace out of stuff.
return undef unless namespace($_[0]) eq 'crunch';
my $attr = retrieve(attribute($_[0]));
defined $attr ? &{'crunch-whitespace'}($attr) : undef;
__
meta::retriever('file', '-f $_[0] ? file::read($_[0]) : undef;');
meta::retriever('global', <<'__');
# Returns the global data stashed at the end of this perl object
$_[0] eq 'self' ? $global_data : undef;

__
meta::retriever('html-sdoc', <<'__');
my ($attribute) = @_;
return undef unless $attribute =~ s/^html::/sdoc::/ and defined retrieve($attribute) || $attribute =~ s/^sdoc::// && defined retrieve($attribute);
sdoc_html($attribute);

__
meta::retriever('http', '# This function has been removed to eliminate dependency on LWP::Simple.');
meta::retriever('id', '$_[0] =~ /^id::/ ? substr($_[0], 4) : undef;');
meta::retriever('markdown-sdoc', <<'__');
my ($attribute) = @_;
return undef unless $attribute =~ s/^markdown::/sdoc::/ and defined retrieve($attribute) || $attribute =~ s/^sdoc::// && defined retrieve($attribute);
sdoc_markdown($attribute);

__
meta::retriever('object', <<'__');
# Fetch a property from another Perl object. This uses the 'cat' function.
return undef unless $_[0] =~ /^object::(.*?)::(.*)$/ && -x $1 && qx|$1 is '$2'|;
join '', qx|$1 cat '$2'|;

__
meta::retriever('perl', <<'__');
# Lets you use the result of evaluating some Perl expression
return undef unless $_[0] =~ /^perl::(.*)$/;
eval $1;

__
meta::retriever('pp', <<'__');
return undef unless namespace($_[0]) eq 'pp';
my $attr = retrieve(attribute($_[0]));
defined $attr ? preprocess($attr) : undef;
__
meta::retriever('sdoc', 'exists $data{"sdoc::$_[0]"} ? sdoc("sdoc::$_[0]") : undef;');
meta::retriever('sdoc-packed', <<'__');
return undef unless $_[0] =~ /^sdoc-packed::(.*)$/;
exists $data{"sdoc::$1"} ? sdoc_packed("sdoc::$1") : undef;

__
meta::retriever('sdocp', <<'__');
return undef unless $_[0] =~ /^sdocp::(.*)$/;
exists $data{"sdoc::$1"} ? sdocp("sdoc::$1") : undef;

__
meta::sdoc('data::style.css', <<'__');
Caterwaul JS page style | Spencer Tipping
Licensed under the terms of the MIT source code license

body {font-family: 'Neuton', 'Garamond', serif; background: #111; margin: 0; color: #eee}

a {text-decoration: none}

.header * {background: rgba(17, 17, 17, 0.5)}

.header .title {font-size: 20pt; text-transform: uppercase}
.header .title .caterwaul {color: #fff; border-right: solid 4px #444; padding: 120px 10px 0 50px; z-index: 10}
.header .title .js        {color: #aaa; padding: 120px 0 0 10px; text-transform: lowercase; font-size: 16pt; z-index: 5}

.header {padding-bottom: 40px; margin-top: 100px}

.accent {color: #fa4; z-index: 20}

.identify {background: #752 !important}

Word wrapping inside <pre> elements.
A great article about this (and its cross-browser ramifications) at http://www.longren.org/2006/09/27/wrapping-text-inside-pre-tags/.

#tutorial-page pre {white-space: pre-wrap; word-wrap: break-word}

SDoc page styling.
This is optimized for long lines and lots of text.

#sdoc-page {padding-bottom: 100px; color: white; position: absolute; display: none}

#sdoc-page a.back {font-size: 16pt; color: #999; display: block; text-transform: lowercase; text-decoration: none}
#sdoc-page a.back:before {content: '<< '; color: #444}

#sdoc-page a.back:hover {color: #ccc}
#sdoc-page a.back:hover:before {content: '<< '; color: #fa4}

#sdoc-page .file > h1                  {color: #999; cursor: pointer; font-weight: normal; font-size: 16pt; white-space: nowrap; word-wrap: none}
#sdoc-page .file > h1 .path            {color: #444}
#sdoc-page .file > h1 .extension       {display: none; color: #444}

#sdoc-page .file > h1:hover .path      {color: #ccc}
#sdoc-page .file > h1:hover .extension {display: none; color: #ccc}

#sdoc-page .file > h1:hover            {color: #ccc}
#sdoc-page .file > h1:after            {content: ' >>'; color: #444}
#sdoc-page .file > h1:hover:after      {content: ' >>'; color: #fa4}

#sdoc-page .section {margin-top: 50px}

#sdoc-page .section h1:before, #sdoc-page .section h2:before, #sdoc-page .section h3:before {content: '< '; color: #fa4}
#sdoc-page .section h1:after,  #sdoc-page .section h2:after,  #sdoc-page .section h3:after  {content: ' >'; color: #fa4}

#sdoc-page .section h4:before {content: '> '; color: #fa4}

#sdoc-page .section h1 {font-size: 16pt}
#sdoc-page .section h2 {font-size: 13pt}
#sdoc-page .section h3 {font-size: 11pt}
#sdoc-page .section h4 {font-size: 10pt}

#sdoc-page .section h1 {text-transform: lowercase; color: #999; font-weight: normal; border-bottom: solid 4px #222}
#sdoc-page .section h2 {text-transform: lowercase; color: #999; font-weight: normal; border-bottom: solid 4px #222}
#sdoc-page .section h3 {text-transform: lowercase; color: #999; font-weight: normal}
#sdoc-page .section h4 {text-transform: lowercase; color: #999; font-weight: normal}

#sdoc-page p {color: #eee; font-family: sans-serif; font-size: 10pt; line-height: 1.8em; max-width: 500px; text-align: justify}

#sdoc-page pre.code {border: solid 1px #333; color: white; font-size: 10pt; font-family: 'Droid Sans Mono', monospace; padding: 4px; background: black; white-space: pre; word-wrap: none}
#sdoc-page pre.code {line-height: 1.8em}

Tutorial page styling.
These styles, while they should be more or less consistent across pages, are designed specifically for the tutorial.

#tutorial-page {width: 500px; padding-bottom: 100px; padding-right: 200px; padding-left: 50px; position: relative}

#tutorial-page p {font-family: sans-serif; font-size: 11pt}
#tutorial-page blockquote .signature {float: right; color: #aaa; font-variant: italic}
#tutorial-page blockquote {clear: right; margin-top: 10px}

#tutorial-page p a              {color: #888; text-decoration: none}
#tutorial-page p a:before       {content: '['; color: #444}
#tutorial-page p a:after        {content: ']'; color: #444}
#tutorial-page p a:hover        {color: #eee}
#tutorial-page p a:hover:before {content: '['; color: #fa4}
#tutorial-page p a:hover:after  {content: ']'; color: #fa4}

#tutorial-page .toc h1, #tutorial-page .toc h2, #tutorial-page .toc h3, #tutorial-page .toc h4
{color: #999; cursor: pointer; font-weight: normal; white-space: nowrap; word-wrap: none; text-transform: lowercase}

#tutorial-page .popdown       {position: fixed; top: 0; left: 50px; border-bottom: solid 1px #444; padding-bottom: 2px}
#tutorial-page .popdown:hover {border-bottom: solid 1px #fa4; padding-bottom: 10px}

#tutorial-page .popdown.open  {background: rgba(0, 0, 0, 0.9); left: 40px; border-bottom: solid 4px #fa4; padding-bottom: 10px; padding-left: 10px; padding-right: 10px}

#tutorial-page .popdown       .label        {font-size: 14pt; color: #888; text-transform: lowercase; cursor: pointer}
#tutorial-page .popdown       .label:hover  {color: #eee}
#tutorial-page .popdown       .label:before {content: '< '; color: #444}
#tutorial-page .popdown       .label:after  {content: ' >'; color: #444}
#tutorial-page .popdown:hover .label:before {content: '< '; color: #fa4}
#tutorial-page .popdown:hover .label:after  {content: ' >'; color: #fa4}

#tutorial-page .popdown      .contents {display: none}
#tutorial-page .popdown.open .contents {display: block; overflow-y: auto; overflow-x: hidden; max-height: 400px}

#tutorial-page .toc h1:hover,       #tutorial-page .toc h2:hover,       #tutorial-page .toc h3:hover,       #tutorial-page .toc h4:hover       {color: #eee}
#tutorial-page .toc h1:after,       #tutorial-page .toc h2:after,       #tutorial-page .toc h3:after,       #tutorial-page .toc h4:after       {content: ' >>'; color: #888}
#tutorial-page .toc h1:hover:after, #tutorial-page .toc h2:hover:after, #tutorial-page .toc h3:hover:after, #tutorial-page .toc h4:hover:after {content: ' >>'; color: #fa4}

#tutorial-page .toc h1 {font-size: 16pt}
#tutorial-page .toc h2 {font-size: 13pt; padding-left: 20px}
#tutorial-page .toc h3 {font-size: 11pt; padding-left: 40px}
#tutorial-page .toc h4 {font-size: 10pt; padding-left: 60px}

#tutorial-page .section h1:before, #tutorial-page .section h2:before, #tutorial-page .section h3:before {content: '< '; color: #fa4}
#tutorial-page .section h1:after,  #tutorial-page .section h2:after,  #tutorial-page .section h3:after  {content: ' >'; color: #fa4}

#tutorial-page .shell {position: fixed; border-radius: 0px; right: 50px; top: 0; bottom: 0; left: 600px; border: solid 2px #222; border-width: 0 1px; overflow-y: auto; overflow-x: hidden}
#tutorial-page .shell {font-family: 'Droid Sans Mono', monospace; font-size: 10pt; color: white; background: rgba(0, 0, 0, 0.9)}

#tutorial-page .shell .prompt > span {margin: 4px}

#tutorial-page .shell .syntax {border-bottom: dotted 1px #468; cursor: default}

#tutorial-page .shell .structure              {color: #797; display: block; margin: 4px; padding: 4px 0}
#tutorial-page .shell .structure:hover:before {color: #888; content: 'parse tree: '; padding-right: 4px}

#tutorial-page .shell .shadow              {color: #888; display: block; margin: 4px; padding: 4px 0}
#tutorial-page .shell .shadow:before       {color: #752; content: '>'; padding-right: 4px}
#tutorial-page .shell .shadow:hover:before {color: #888; content: 'compiled: '; padding-right: 4px}

#tutorial-page .shell .input {font-family: 'Droid Sans Mono', monospace; padding: 0; margin: 0; border: none !important; outline: none !important}
#tutorial-page .shell .input {font-size: 10pt; background: transparent; color: white}

#tutorial-page .shell .input:focus {border: none !important; outline: none !important}

#tutorial-page .shell .history {position: relative}
#tutorial-page .shell .history pre {font-family: 'Droid Sans Mono', monospace; font-size: 10pt}
#tutorial-page .shell .history .entry, .shell .history .result, .shell .history .error, .shell .history .log {margin: 4px}
#tutorial-page .shell .history .entry  {color: white}
#tutorial-page .shell .history .entry .command {margin-left: 4px}
#tutorial-page .shell .history .result {color: #7bf}
#tutorial-page .shell .history .log    {color: #7fb}
#tutorial-page .shell .history .error  {color: #f87}

#tutorial-page .shell .history .log:hover:before {color: #888; content: 'log: '}

#tutorial-page .shell .sandbox {font-family: 'Neuton', 'Garamond', serif; background: #222; color: #eee; padding: 10px; margin-top: 4px}

#tutorial-page #seq-decipher                      {padding: 4px 0; margin: 20px 0}
#tutorial-page #seq-decipher input                {border: solid 1px #444; background: black; padding: 4px; font-family: 'Droid Sans Mono', monospace; color: white; outline: none !important}
#tutorial-page #seq-decipher table.result         {font-size: 9pt}
#tutorial-page #seq-decipher td.name              {text-transform: lowercase; color: #aaa}
#tutorial-page #seq-decipher td.fragment          {font-family: 'Droid Sans Mono', monospace; color: #fa4}
#tutorial-page #seq-decipher tr.variables td.desc {font-family: 'Droid Sans Mono', monospace}

#tutorial-page .section h1, #tutorial-page .section h2, #tutorial-page .section h3, #tutorial-page .section h4 {padding-top: 50px}

#tutorial-page .section h1 {font-size: 16pt}
#tutorial-page .section h2 {font-size: 13pt}
#tutorial-page .section h3 {font-size: 11pt}

#tutorial-page .section h1 {text-transform: lowercase; color: #999; font-weight: normal; border-bottom: solid 4px #222}
#tutorial-page .section h2 {text-transform: lowercase; color: #999; font-weight: normal; border-bottom: solid 4px #222}
#tutorial-page .section h3 {text-transform: lowercase; color: #999; font-weight: normal}
#tutorial-page .section h4 {text-transform: lowercase; color: #999; font-weight: normal}

#tutorial-page p {color: #eee; font-size: 10pt; line-height: 1.44em; text-align: justify}
#tutorial-page code {color: #fff; font-size: 10pt; font-family: 'Droid Sans Mono', monospace; background: black; padding: 4px; border: solid 1px #333}
#tutorial-page pre  {color: #fff; font-size: 10pt; font-family: 'Droid Sans Mono', monospace; background: black; padding: 4px; border: solid 1px #333}

#tutorial-page pre.code {cursor: pointer; padding: 10px 4px}
#tutorial-page pre.code:before {content: '> '; color: #fa4}
#tutorial-page pre.code:hover {background: #222; color: #fa4}

__
meta::sdoc('js::caterwaul.all', <<'__');
This file isn't rendered -- it's just used internally for node testing.

- pinclude build/caterwaul.js
- pinclude build/caterwaul.std.js
- pinclude build/caterwaul.ui.js

__
meta::sdoc('js::caterwaul.node', <<'__');
CommonJS-compatible Caterwaul build | Spencer Tipping
Licensed under the terms of the MIT source code license

- pinclude build/caterwaul.js

exports.caterwaul = caterwaul;

__
meta::sdoc('js::waul-bootstrap', <<'__');
#!/usr/bin/env node

Waul: the offline precompiler for Caterwaul | Spencer Tipping
Licensed under the terms of the MIT source code license

- include build/caterwaul.min.js
- include src/waul/waul.js

__
meta::sdoc('js::web/code-snippets', <<'__');
Code snippet initialization.
This runs after the page is fully loaded. The idea is to setup clickability for each code snippet.

  setTimeout(linkify_code_snippets, 0),

  where [linkify_snippet(s)      = s.click(send_code_to_prompt),
         send_code_to_prompt()   = $('.shell .prompt .input').val($(this).text()) -se- $('.shell').click(),
         linkify_code_snippets() = $('#tutorial-page pre.code') *![linkify_snippet($(x))] /seq];

__
meta::sdoc('js::web/header', <<'__');
Page header.
This is basically just a navigation container.

  var page_header = jquery in div.header(div.title(span.caterwaul('caterwaul'), span.js('the ', span.accent('edge'), ' of javascript')));

__
meta::sdoc('js::web/main', <<'__');
Caterwaul JS web interface | Spencer Tipping
Licensed under the terms of the MIT source code license

$('#cover .status').text('loading tutorial content');

$(caterwaul('js_all jquery')(function () {
  var original_body_html = $('body').html(),
      original_pages     = $('#tutorial-page, #sdoc-page'),
      original_styles    = $('style, link[rel="stylesheet"]');

  $('#cover .status').text('parsing state');

  var construct_page = function (original_html) {
    original_html = original_html.replace ? original_html : original_body_html;

    - pinclude pp::js::web/header
    - pinclude pp::js::web/shell
    - pinclude pp::js::web/code-snippets

    - pinclude pp::js::web/state
    - pinclude pp::js::web/sdoc
    - pinclude pp::js::web/source

    - pinclude pp::js::web/render-tutorial
    - pinclude pp::js::web/benchmark
    - pinclude pp::js::web/seq-decipher

    $('head').append(jquery in title('caterwaul js'));
    $('body').empty().append(page_header, original_pages);

    original_styles.appendTo('head')};

  $.get(document.location.href, construct_page).error("construct_page(original_body_html)".qf)}));

__
meta::sdoc('js::web/render-tutorial', <<'__');
Building the tutorial.
All we have to do here is create a div to contain the tutorial and populate it with the SDoc obtained by parsing the object state. (Since this HTML file is actually a self-modifying Perl
object -- long story.) We also build a table of contents.

  $('#tutorial-page').append(top_wrapper_for(toc, 'Contents'), tutorial, shell())

  -where [tutorial_attribute       = attributes |[x.namespace === 'sdoc' && x.attribute === 'web/tutorial' && x] |seq,
          tutorial                 = jquery [div.tutorial[sdoc_to_dom(tutorial_attribute.value)]]
                                     -se- it.find('pre.code') *![$(x).text($(x).text().replace(/^\s*/, ''))] /seq,

          top_wrapper_for(e, name) = jquery [div.popdown(div.label /text(name), div.contents[e])]
                                     -se- setTimeout("it.click(given.e in it.toggleClass('open'))".qf, 10),

          toc                      = jquery [div.toc] -se- toc_links *~![x] *![it.append(x)] /seq
                                     -where [section_id_count    = 0,
                                             assign_section_id() = $(this).attr('id', 'section-#{++section_id_count}'),

                                             title_of(section)   = where [level = Number(/level(\d+)/.exec($(section).attr('class'))[1])] in
                                                                   $('<h#{level}>').text($(section).children('h#{level}').text()),

                                             sections            = tutorial.find('.section').each(assign_section_id),

                                             toc_links           = [jquery in a.toc_link(h1('source code')) *href('#annotated')] +
                                                                   sections *[jquery in a.toc_link[title_of(x)] *href('##{$(x).attr("id")}')] -seq]];

__
meta::sdoc('js::web/sdoc', <<'__');
SDoc-to-HTML converter.
SDoc is a fairly simple format to parse. We just emit stuff based on indentation deltas (basically like the algorithm in the Perl). I'm doing this here rather than up-front to reduce the page
size. If we converted every SDoc attribute into HTML up front it would easily double the download size.

By the way, I'm using the same heuristic HTML-escaping algorithm that the Perl script uses. This basically tries to do the right thing with <> symbols in SDoc paragraphs by escaping anything
that doesn't look like a well-formed tag. Of course, this precludes your saying things like &lt; and expecting that to render verbatim; instead it will be converted to an actual less-than sign
in the markup.

  var sdoc_to_dom = given.text in paragraphs *~!convert -seq
                                  -where [known_tags               = ('html head body meta script style link title div a span input button textarea option select form label iframe ' +
                                                                      'blockquote code caption table tbody tr td th thead tfoot img h1 h2 h3 h4 h5 h6 li ol ul noscript p pre samp sub sup ' +
                                                                      'var canvas audio video').replace(/\s+/g, '|'),

                                          paragraphs               = text.split(/\n\n+/),
                                          indentation_of(p)        = (/^(\s*(\|\s)?)/.exec(p)[1].length >> 1) + 1,

                                          convert(p)               = /^\s*[A-Z]/.test(p) ? documentation(p) :
                                                                        /^\s*\|/.test(p) ? quoted(unindent(p)) :
                                                                                           code(p),

                                          not_a_valid_tag          = new RegExp('<(?!\/|(#{known_tags})[^>]*>(?:.|\n)*</\\1>)', 'g'),
                                          escape_html_in(s)        = s.replace(/&(?!gt;|lt;|amp;)/g, '&amp;').replace(not_a_valid_tag, '&lt;'),
                                          escape_all_in(s)         = s.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;'),

                                          quoted(p)                = jquery in pre.quoted[escape_all_in(p)],
                                          code(p)                  = jquery in pre.code[p.replace(/^\s*c\n/, '')],

                                          starts_section(p)        = /^\s*(.*\.)\n\s*(.*)/.exec(p) -re [it && it[1].length + 10 <= it[2].length],
                                          unindent(p)              = p.replace(indentation, '') -where [spaces      = n[indentation_of(p) - 1] *['( |\\|){2}'] -seq -re- it.join(''),
                                                                                                        indentation = new RegExp('^#{spaces}', 'gm')],

                                          documentation(p)         = starts_section(p) ? documentation_section(p) : jquery in p[escape_html_in(p)],
                                          documentation_section(p) = jquery [div.section[header, paragraph]] -se- it.addClass('level#{indentation_of(p)}')
                                                                     -where [parts     = /^\s*(.*)\.\n((?:.|\n)*)/.exec(p),
                                                                             header    = $('<h#{indentation_of(p)}>').text(parts[1]),
                                                                             paragraph = jquery in p[escape_html_in(parts[2])]]];

__
meta::sdoc('js::web/shell', <<'__');
var shell = given.nothing in
            shell.append(history_container, shell_prompt)
            -se- setTimeout(given.nothing in shell.click(setTimeout(given.nothing in shell.find('.prompt .input').focus(), 10) -given.e), 0)

            -where [shell                 = jquery in div.shell,

                    history_container     = jquery in div.history,

                    history_entry_for(s)  = jquery in pre.entry(span.accent('&gt;'), span.command /text(s)),
                    history_result_for(o) = jquery in pre.result[ui_for(o)],
                    history_log_for(o)    = jquery in pre.log   /text('' + o),
                    history_error_for(e)  = jquery in pre.error /text('' + e),

                    ui_for(x)             = ! x                      ? jquery in span /text('' + x) :
                                            x.is_caterwaul_syntax    ? jquery [span.syntax %syntax_for(x)] -where [syntax_for(node)(e) = e.text(x.toString()).hover("e.text(x.structure())".qf,
                                                                                                                                                                    "e.text(x.toString())".qf)] :

                                            x.constructor === jQuery ? x.parent().length ? jquery in div.sandbox('(A DOM node that is already in document)')
                                                                                                     /hover(given.e in x.addClass('identify'), given.e in x.removeClass('identify')) :
                                                                                           jquery in span /text(jquery in span[x] /html()) + div.sandbox[x.clone(true)] :
                                                                       jquery in span /text('' + x),

                    realign()             = setTimeout(input.css({width: input.parent().width() - (input.prev().width() + 10)})
                                                       -where [input = shell.find('.prompt .input')]
                                                       -given.nothing, 10),

                    log(xs = arguments)   = xs *![shell.children('.history').append(x) -se- realign()] -seq -re- xs[0],

                    history_n             = 0,
                    context               = capture [expand()            = shell.animate({left: 0,   right: 0},  realign),
                                                     collapse()          = shell.animate({left: 600, right: 50}, realign),
                                                     clear()             = shell.children('.history').empty() -re- realign() -re- '',
                                                     caterwaul           = caterwaul.clone(),
                                                     history             = [],

                                                     help()              = 'available variables:\n' +
                                                                           (pairs %[x[1] && x[1].description] *['#{x[0]}: #{x[1].description}'] /seq
                                                                            -where [keys  = context /keys -seq -re- it.sort(),
                                                                                    pairs = keys *[[x, context[x]]] -seq]).join("\n"),

                                                     log(xs = arguments) = xs *![log(history_log_for(x))] -seq -re- xs[0],
                                                     it                  = null]

                                            -se [it.context = it]
                                            -se [it.compiler = it.caterwaul.jquery(it.caterwaul.js_all())]
                                            -se [it.context.description   = 'variables available to the shell',
                                                 it.expand.description    = 'expands the shell',
                                                 it.collapse.description  = 'collapses the shell',
                                                 it.clear.description     = 'clears old output',
                                                 it.caterwaul.description = 'a copy of the caterwaul global',
                                                 it.compiler.description  = 'the compiler for this shell',
                                                 it.history.description   = 'shell input history',
                                                 it.log.description       = 'logs a value to the shell'],

                    run_command(c)        = log(history_entry_for(c))
                                            -re- log(history_result_for(context.it = context.compiler(c, context))) /rescue [log(history_error_for(context.it = e))],

                    shell_prompt          = jquery [div.prompt[prompt, input, structure, shadow]]
                                            -se- setTimeout(realign, 10)
                                            -se- setInterval(update_shadow, 10)

                                            -se- it.find('span.prompt').click($(this).siblings('.input').focus() -given.e)

                                            -se- setTimeout(given.nothing in
                                                   it.find('.input').keydown(realign() -re [history_prev() /se [e.preventDefault()] /when [e.which === 38] ||
                                                                                            history_next() /se [e.preventDefault()] /when [e.which === 40] ||
                                                                                            run_it()       /se [e.preventDefault()] /when [e.which === 13] || true] -given.e), 0)

                                            -where [input                = jquery in input.input,
                                                    prompt               = jquery in span.accent('&gt;'),
                                                    structure            = jquery in div.structure,
                                                    shadow               = jquery in div.shadow,

                                                    last_input_text      = null,
                                                    rename_gensyms_in(t) = t.replace(context.caterwaul.gensym_rename_table(t)),
                                                    update_shadow()      = structure.text(context.caterwaul.parse(input.val()).structure() -rescue- 'invalid parse')
                                                                           -se- shadow.text(context.compiler(context.caterwaul.parse(last_input_text = input.val()))
                                                                                            -re- rename_gensyms_in(it).toString()
                                                                                            -rescue- e.toString())

                                                                           -unless [input.val() === last_input_text],

                                                    h_index              = 0,
                                                    history_prev()       = (h[h_index] = input.val()) -when [h_index < history_n] -re- input.val(h[--h_index]) -when [h_index > 0]
                                                                           -where [h = context.history],

                                                    history_next()       = (h[h_index] = input.val()) -when [h_index < history_n] -re- input.val(h[++h_index]) -when [h_index < history_n]
                                                                           -where [h = context.history],

                                                    history_add(s)       = history_n = h_index = context.history.push(s),

                                                    scroll_to_end()      = setTimeout(shell.scrollTop(shell.children(':last') -re [shell.scrollTop() + it.position().top + it.height()])
                                                                                      -given.nothing, 0),

                                                    run_it()             = history_add(t) -re- run_command(t) -re- input.val('') -re- scroll_to_end() -when.t -where [t = input.val()]]];

__
meta::sdoc('js::web/source', <<'__');
Building the documentation pages.
This is just a matter of finding the right SDoc sources and tying them together.

  var attributes = perl_attributes(original_html.replace(/&gt;/g, '>').replace(/&lt;/g, '<').replace(/&amp;/g, '&'));

  $('#sdoc-page').append(sections) -where[sdocs      = attributes %[x.namespace === 'sdoc' && /^js::/.test(x.attribute)] -seq,
                                          core       = sdocs %[/^js::caterwaul/.test(x.attribute)] -seq,
                                          extension  = sdocs %[/extensions\//.test(x.attribute)] -seq,
                                          web        = sdocs %[/web\//.test(x.attribute)] -seq,

                                          back_link  = jquery in a.back('Back to tutorial') *href('#tutorial'),

                                          title(a)   = /\//.test(a) ? jquery [span.path[a.replace(/^js::(.*\/).*/, '$1')],
                                                                              span.name[a.replace(/.*\//, '')],
                                                                              span.extension('.js')] :

                                                                      jquery [span.name[a.replace(/^js::/, '')],
                                                                              span.extension('.js')],

                                          section(x) = jquery [div.file(h1[title(x.attribute)], div.contents)]
                                                       -se- setTimeout(given.nothing in it.find('h1').click(given.e in $(this).next('.contents').toggle()), 0)
                                                       -se- it.find('.contents').hide().append(sdoc_to_dom(x.value)),

                                          sections   = jquery [div *id('annotated') >= back_link >= core_sections >= extension_sections >= web_sections]
                                                       -where [core_sections      = $([]) -se- core      *~!section *![it.push(x)] /seq,
                                                               extension_sections = $([]) -se- extension *~!section *![it.push(x)] /seq,
                                                               web_sections       = $([]) -se- web       *~!section *![it.push(x)] /seq]];

  setInterval(check_for_destination, 50)
  -where [viewing_annotated_source = false,
          moving                   = false,

          check_for_destination()  = show_annotated_source() -when [! moving && ! viewing_annotated_source &&   /^#annotated/.test(document.location.hash)] <re>
                                     hide_annotated_source() -when [! moving &&   viewing_annotated_source && ! /^#annotated/.test(document.location.hash)],

          show_annotated_source()  = moving = $('#sdoc-page').css({display: 'block', top: $(window).scrollTop(), left: $(window).width()}).
                                                          animate({left: 50}, 'slow')

                                             -se- $('#tutorial-page').animate({left: '-=#{distance}'}, 'slow', given.nothing [viewing_annotated_source = true, moving = false])
                                             -se- $('.shell').animate({left: '-=#{distance}', right: '+=#{distance}', opacity: 0}, 'slow')
                                             -se- $('.header, .popdown').hide('slow')

                                             -where [distance = $(window).width()],

          hide_annotated_source()  = moving = $('#sdoc-page').animate({left: $(window).width()}, 'slow',
                                                                      given.nothing [viewing_annotated_source = moving = false, $(this).css({display: 'none'})])

                                             -se- $('.shell').animate({left: '+=#{distance}', right: '-=#{distance}', opacity: 1}, 'slow')
                                             -se- $('#tutorial-page').animate({left: '+=#{distance}'}, 'slow')
                                             -se- $('.header, .popdown').show('slow')

                                             -where [distance = -$('#tutorial-page').position().left]];

__
meta::sdoc('js::web/state', <<'__');
Self-modifying Perl state parser.
This is actually really easy. All of the attributes in self-modifying Perl come in one of two forms. One is the short form, written as meta::\w+('stuff', 'stuff');\n. The other is the long
form, written meta::\w+('stuff', <<'eof');\n...\neof\n. We just need to find all occurrences of either one of these things.

  var perl_attributes = given.text in text.match(long_form) *parse_long + text.match(short_form) *parse_short -seq
                                      -where [long_form          = /^meta::(\w+)\('([^']+)', (?:<|&lt;){2}'([^']+)'\);[\r\n]{1,2}([\s\S]*?)[\r\n]{1,2}\3$/mg,
                                              short_form         = /^meta::(\w+)\('([^']+)', '([^']+)'\);$/mg,

                                              long_form_parser   = new RegExp(long_form .toString().replace(/^\/(.*)\/[mg][mg]$/, '$1')),
                                              short_form_parser  = new RegExp(short_form.toString().replace(/^\/(.*)\/[mg][mg]$/, '$1')),

                                              parse_long(match)  = long_form_parser.exec(match)  -re- {namespace: it[1], attribute: it[2], value: it[4]},
                                              parse_short(match) = short_form_parser.exec(match) -re- {namespace: it[1], attribute: it[2], value: it[3]}];

__
meta::sdoc('readme', <<'__');
Caterwaul.
Caterwaul is two different things. First, and most importantly, it is a powerful low-level Javascript code manipulation library with a Javascript parser, AST, in-process compiler, and
replication. Second, it is a programming language implementation that uses this library to transform your code in various arcane ways that I happen to find useful.

The whole project is MIT-licensed, and in the unlikely event that you want to use it you are free to [email me](mailto:spencer@spencertipping.com) with any questions/issues.

What follows is a ten-minute introduction to caterwaul's core concepts. It covers about 5% of what caterwaul does.

  Caterwaul as a library.
  Caterwaul is implemented in pure Javascript, so you can use it to live-compile your code in a browser, or you can use the `waul` precompiler to compile your code up-front. You can see the
  live compiler in action by going to [the caterwaul website](http://caterwauljs.org). This site embeds a caterwaul compiler configured to use the standard macro library; this causes it to
  compile what I refer to as the caterwaul programming language. The website documents this language in some detail, as does [Caterwaul by
  Example](http://caterwauljs.org/doc/caterwaul-by-example.pdf) - though some of the examples will fail since Caterwaul 1.2.3, which introduces [a breaking
  change](https://github.com/spencertipping/caterwaul/commit/05a5e317336e751cbf90a7f574070d3eca4f69a4) to the `seq` library.

  If you're interested in using caterwaul as a compiler library, I recommend reading the [caterwaul reference manual](http://caterwauljs.org/doc/caterwaul-reference-manual.pdf), which covers
  its core API in significantly more detail than this readme. You can also read through the caterwaul source code, which contains copious documentation, some of which is up to date.

    Parsing things.
    Caterwaul's Javascript parser takes anything with a valid `toString()` method as input, including Javascript functions.

    | var tree = caterwaul.parse('3 + 4');
      tree.toString()           // '3 + 4'
      tree.data                 // '+'
      tree.length               // 2
      tree[0].data              // '3'
      tree[1].data              // '4'

    Detecting patterns.
    If you're serious about this stuff, I recommend writing this code in the caterwaul programming language. It supports a lot of advanced features that make syntax trees much easier to work
    with; in particular, preparsed quoted constructs (similar to the ' operator in Lisp). These will give you a significant performance advantage and better notation.

    | var pattern = caterwaul.parse('_x + _y');
      var match   = pattern.match(tree);
      match._x.data             // '3'
      match._y.data             // '4'
      var template = caterwaul.parse('f(_x, _y)');
      var new_tree = template.replace(match);
      new_tree.toString()       // 'f(3, 4)'

    Compiling things.
    Caterwaul's compiler does a lot, but the basic case works like `eval`:

    | var f = function (x, y) {return x * y};
      caterwaul.compile(new_tree)       // 12

    You can also bind variables from the compiling environment:

    | var new_f = function (x, y) {return x + y};
      caterwaul.compile(new_tree, {f: new_f})   // 7

    You can only compile things that return values (technically, things which are expressions; the litmus test is whether you could legally wrap it in parentheses), so stuff like `var x = 10`
    won't work. This is different from Javascript's `eval` function. If you want to execute imperative code, you should wrap it in a function:

    | var function_wrapper = caterwaul.parse('(function() {_body})');
      var code = caterwaul.parse('if (x) {console.log(x)}');
      var new_function = caterwaul.compile(function_wrapper.replace({_body: code}));
      new_function();

  Caterwaul as a programming language.
  I wrote a set of macros that use the above API to modify Javascript code; this macro set has been refined over the past year to become a programming language that I find useful. You can
  learn this language on the caterwaul website, which goes through it by example and provides an interactive shell so you can see what the compilation process looks like.

    Using caterwaul this way.
    There are two ways to use caterwaul as a programming language. You can compile code from inside another Javascript process, which works because all caterwaul code is syntactically valid
    Javascript code as well (note that the following example will work only if you've loaded `caterwaul.std.js` from the `build/` directory):

    | var compiler = caterwaul(':all');         // :all means 'every macro you know about'
      var compiled = compiler(function () {
        console.log(x) -where [x = 10];
      });
      compiled();               // logs 10

    The other way to use the programming language is by using the `waul` precompiler. This compiles your code to straight Javascript, eliminating the runtime overhead imposed by caterwaul's
    parser, macroexpander, and compiler. Waul files typically end in `.waul` or `.waul.sdoc` (if you're using [SDoc](http://github.com/spencertipping/sdoc), which waul will transparently
    parse) and contain code like this:

    | caterwaul(':all')(function () {
        n[10] *console.log -seq;
        console.log('done #{message}')
          -where [message = 'iterating through numbers'];
      })();

    You can compile this by running `waul file.waul`, which will generate `file.js`. `file.js` may contain references to the `caterwaul` global if you use certain macros, but there will be no
    compilation overhead.

  Caterwaul as a self-replicating monstrosity.
  This is the coolest part of caterwaul in my opinion. Both `caterwaul` as a Javascript object and `waul` can give you string expressions that reproduce them. This is very useful for library
  bundling; for example:

  | var r = caterwaul.replicator();
    var code = r.toString();

  If you do this, someone else can `eval` 'code' and they will end up with a global called `caterwaul` that is configured exactly as your `caterwaul` is configured. The only requirement is
  that configurations be declared as modules, which is done like this:

  | // caterwaul.module(name, [compiler_configuration], function)
    caterwaul.module('my-configuration', ':all', function ($) {
      // $ is the global caterwaul object
      $.foo = 'bar';
    });

  The output of `replicator` is a function that recreates all modules by re-running their initializers. Note that `replicator` rewrites the module functions into their post-compilation
  equivalents; in other words, the body of each function has already been compiled into normal Javascript. This reduces total compilation overhead.

    Waul replication.
    Suppose you write a custom caterwaul module and want a new version of `waul` that contains it. You can ask `waul` to replicate itself with an extension like this:

    | $ ./waul -r -e extension.waul > new-waul
      $ chmod u+x new-waul
      $ ./new-waul my-file.waul

    This is especially useful for setting up shebang lines for scripts that require custom waul extensions:

    | #!./new-waul
      caterwaul(':all')(function () {
        // custom code
      })();

    The `waul` in caterwaul's root directory is preloaded with `build/caterwaul.std.js` and `build/caterwaul.ui.js`. As you might guess, `waul` wasn't written specially to contain these;
    rather, it was generated by `waul-core` (which doesn't have any libraries built-in) by this process:

    | $ ./waul-core --replicate -e build/caterwaul.std.min.js -e build/caterwaul.ui.min.js > waul
      $ chmod 0700 waul

__
meta::sdoc('waul::waul', <<'__');
Waul precompiler implementation | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
Caterwaul is useful as a library and an online compiler, but when performance is important you probably want to deliver precompiled code. Waul is a program that does exactly that. You write a
regular file that invokes Caterwaul on a function, and Waul emits a Javascript file that contains the Caterwaul-compiled results. For example:

| $ cat > test.waul <<EOF
  caterwaul('js_all')(function ($) {
    console.log('#{message} from caterwaul!')
    -where [message = 'hello']})(caterwaul);
  EOF
  $ waul test.waul
  $ node test.js
  hello from caterwaul!
  $

Waul has some limitations:

| 1. It cannot precompile any macros that generate refs (this includes the -eval- modifier, unfortunately, though as of 1.1.6 -using- works just fine).
  2. You need to inform it about any Caterwaul extensions up-front (I'll explain how to do this).

Extensions.
Caterwaul can be extended with custom macros, and in order to precompile something that uses these extensions you'll have to inform Waul about them. You can do this with the --extension flag,
like this:

| $ waul --extension caterwaul.custom.js foo.waul

You can compile multiple files at once using multiple arguments. If you do this, each will be compiled to its own .js file.

Self-replication.
Waul can preload itself with Caterwaul extensions and emit a copy of itself on stdout. To do this, use the '-r' or '--replicate' options along with one or more extensions. These extensions
will be implicitly enabled in the resulting waul script.

caterwaul.module('waul', 'js_all', function ($) {
  process /~nextTick/ main,

  where [main()                     = options.extensions *extension_tree *!evaluate_extension /seq -then- main_action(),
         main_action()              = options.replicate ? replicate() : options.input_files.length ? options.input_files *!waul -seq : waul_repl(),

         fs                         = require('fs'),
         options                    = {extensions: [], input_files: [], output_pattern: '$1$2.js', configuration: '', use_std: true, expression_ref_table: true, simple_repl: false}
                                      -se [it.input_files = []]
                                      -se- process.argv.slice(2) *![x === '--extension' || x === '-e' ? it.extensions /~push/ xs[++xi]  :
                                                                    x === '--output'    || x === '-o' ? it.output_pattern = xs[++xi]    :
                                                                    x === '--no-table'  || x === '-T' ? it.expression_ref_table = false :
                                                                    x === '--replicate' || x === '-r' ? it.replicate = true             :
                                                                    x === '--stdin'                   ? it.simple_repl = true           :
                                                                    x === '--configure' || x === '-c' ? it.configuration = xs[++xi]     : it.input_files /~push/ x] /seq,

         waul_input(filename)       = fs.readFileSync(filename, 'utf8') -re [/\.sdoc$/i.test(filename) ? it.split(/(?:\n\s*)+\n/) %![/^\s*[A-Z|]/.test(x)] -seq -re- it.join('\n') : it],
         extension_tree(filename)   = new $.opaque_tree(filename /!waul_input),
         evaluate_extension(e)      = '(function(){_e})()'.qs /~replace/ {_e: e} /-$.compile/ {caterwaul: $, require: require},

         replicate()                = process.stdout.write('#!/usr/bin/env node\n' +
                                                           '// Waul precompiler (or derivative), copyright 2012 Spencer Tipping\n' +
                                                           '// Licensed under the terms of the MIT source code license\n' +
                                                           '// http://github.com/spencertipping/caterwaul\n\n' +
                                                           $.replicator()),

         immediate_pattern          = 'caterwaul(_transform)(_function)();'.qs,

         module_pattern             = 'caterwaul.module(_name, _transform, _function);'.qs,
         module_pattern_explicit    = 'caterwaul.module(_name, caterwaul(_transform)(_function));'.qs,
         module_pattern_identity    = 'caterwaul.module(_name, function (_formal) {_body});'.qs,
         module_template            = 'caterwaul.module(_name, _compiled);'.qs,

         offline_pattern            = 'caterwaul.offline(_transform, _function);'.qs,
         offline_template           = '(_compiled)();'.qs,

         output_for(filename)       = filename.replace(/^((?:.*\/)?)((?:(?!\.waul(?:\.sdoc)?)[^\/])+)(\.waul(?:\.sdoc)?)?/, options.output_pattern),
         waul_output(input_file, t) = fs.writeFileSync(input_file /!output_for, t.toString(), 'utf8'),

         waul(input_file)           = input_file /-waul_process/ $.parse(input_file /!waul_input).as(';'),
         waul_process(file, tree)   = immediate_pattern       /~match/ tree                                            -re [it ? waul_run(it)                               :
                                      module_pattern          /~match/ tree -or- module_pattern_explicit /~match/ tree -re [it ? waul_transform(file, it, module_template)  :
                                      module_pattern_identity /~match/ tree                                            -re [it ? waul_identity(file, it)                    :
                                      offline_pattern         /~match/ tree                                            -re [it ? waul_transform(file, it, offline_template) :
                                        raise [new Error('waul: unrecognized toplevel construct in #{file}')]]]]],

         introduce()                = process.stderr.write('Waul precompiler or derivative (repl mode), copyright 2012 Spencer Tipping\n' +
                                                           'Licensed under the terms of the MIT source code license\n' +
                                                           'http://github.com/spencertipping/caterwaul\n'),

         waul_node_repl()           = introduce() -then- require('repl').start('waul> ', undefined, evaluator)
                              -where [evaluator(s, _1, _2, cc) = cc(null, instance(s, {$: $, caterwaul: $, require: require})) -rescue- cc(e, undefined),
                                      instance                 = $(options.configuration)],

         waul_simple_repl()         = introduce() -then- process.stdin.on('data', require('util') /~inspect/ instance(s, {$: $, caterwaul: $, require: require})
                                                                                  -re- process.stderr.write('#{it}\n', 'utf8')
                                                                                  -rescue- process.stderr.write('Error: #{e}') -given.s)
                                                  -then- process.stdin /~setEncoding/ 'utf8'
                                                  -then- process.stdin.resume()
                              -where [instance = $(options.configuration)],

         waul_repl()                = options.simple_repl ? waul_simple_repl() : waul_node_repl(),

         waul_identity(file, m)     = file /-waul_output/ m._,

         waul_transform(file, m, t) = file /-waul_output/ t.replace({_name: m._name, _compiled: transformed_function}).guarded()
                              -where [transformed_function = $(m._transform.as_escaped_string())(m._function) / null /-$.late_bound_tree/ options
                                                        -re- it.replace(it /!$.gensym_rename_table)],

         waul_run(m)                = $(m._transform.as_escaped_string())(m._function) /-$.compile/ {require: require, caterwaul: $} -re- it()]});

__
meta::sdoc('web/tutorial', <<'__');
Introduction.
Caterwaul is a Javascript recompiler that lets you change the semantics of functions. To do this it implements a modular decompiler, macroexpander, and compiler that allow you to manipulate
code in a first-class way. It also comes with several macro (Lisp-style, not C-style) libraries to make Javascript more fun (though you can easily disable them and/or write your own).

If you see merit in the linguistic features of Haskell, APL, Lisp, and Perl, then you will probably also see merit in the things that Caterwaul tries to achieve and you might even like it. If
you're a normal person who wants to use modern tools to write normal, maintainable apps, and you're not a programming language enthusiast who seeks out the pathological and the bizarre, then I
recommend using <a href='http://coffeescript.org' target='_blank'>CoffeeScript</a> instead.

This page is written in Caterwaul using the libraries covered below. If you're feeling adventurous, you might be interested to see the <a
href='https://github.com/spencertipping/caterwaul/blob/1.2/src/caterwaul.md' target='_blank'>annotated source</a> (the standard library has similar documentation and is in the same directory).

A <a href='javascript:void($(".shell").click().find(".input").val("help()"))'>shell</a> is available to interactively use Caterwaul while reading the tutorial below.

I've also started writing documentation in a more traditional form, available from <a href='doc/' target='_blank'>the documentation directory</a>. This is a great place to start if you're
interested in using Caterwaul for production projects (which you shouldn't be).

  Praise for Caterwaul.
  Lots of people have looked at Caterwaul and great things to say about it. Here are some of them:
  <blockquote>LaunchCtl? You may as well learn Caterwaul! <span class='signature'>Jeff Simpson, Senior Software Engineer @ LivingSocial</span></blockquote>
  <blockquote>Embrace the dark side of Javascript. Use Caterwaul. <span class='signature'>Dan Hopkins, Senior Software Engineer @ LivingSocial</span></blockquote>
  <blockquote>Nobody in their right mind would use this language. <span class='signature'>Anonymous</span></blockquote>
  <blockquote>Using this to build applications is like using quantum mechanics to build a car. <span class='signature'>Hank Racette, Founder of Arden Lake Technologies</span></blockquote>
  <blockquote>Caterwaul is a terrible language for the vast majority of developers. But I like it well enough. <span class='signature'>Spencer Tipping, author of Caterwaul</span></blockquote>
  <blockquote>Genius <span class='signature'>bilalhusain@ycombinator</span></blockquote>
  <blockquote>Caterwaul is f**king terrifying <span class='signature'>@wookiehangover</span></blockquote>
  <blockquote>Caterwaul is for advanced JavaScript developers only, and is in no way recommended to people that don't know what they're doing.
    <span class='signature'>Softpedia</span></blockquote>

  Using Caterwaul.
  I recommend that you don't use Caterwaul because it's a monstrosity. However, if you're adventurous and self-destructive, here's how to go about it.

  Caterwaul is pure Javascript, so you can integrate it into any web page without much effort. For example:

  | &lt;script src='http://caterwauljs.org/build/caterwaul.min.js'>&lt;/script>
    &lt;script src='http://caterwauljs.org/build/caterwaul.std.min.js'>&lt;/script>
    &lt;script src='http://caterwauljs.org/build/caterwaul.ui.min.js'>&lt;/script>

  The next step is to configure a compiler instance. Caterwaul provides a framework that you can use to build custom compilers, so this step tells Caterwaul what kind of macros you want to
  expand. (This could include your own custom macros or third-party extensions.)

  For example, here's how to get a compiler that compiles all of the macros discussed on this page:

  | var compiler = caterwaul('js_all jquery');

  What we're saying here is "build a compiler with all Javascript core macros, then add jQuery support." A compiler is a function that recompiles any function you give it:

  | var compiled = compiler(function () {alert(x) -where [x = 10]});

  Generally you create the compiler inline and use it to transform your app's initialization function:

  | // For jQuery apps:
    $(caterwaul('js_all jquery')(function () {
      $('body').append(jquery in div('hi there!'));
    }));

  | // For non-jQuery apps, or libraries:
    caterwaul('js_all')(function () {
      // app code
    })();

  Check out <a href='doc/caterwaul-by-example.pdf' target='_blank'>Caterwaul by example</a> for a more detailed discussion about writing apps with Caterwaul.

  Libraries.
  I maintain a motley set of libraries that are in various ways related to Caterwaul. Right now they are:
  <ul>
  <li><a href='http://github.com/spencertipping/caterwaul-bloom' target='_blank'>Bloom filter implementation</a></li>
  <li><a href='http://github.com/spencertipping/caterwaul-terminal' target='_blank'>ANSI terminal library</a></li>
  <li><a href='http://github.com/spencertipping/caterwaul-jquery-node' target='_blank'>Headless jQuery constructors (for HTML rendering)</a></li>
  <li><a href='http://github.com/spencertipping/caterwaul-regexp' target='_blank'>Regular expression parser (uses Caterwaul syntax trees)</a></li>
  <li><a href='http://github.com/spencertipping/caterwaul-parser' target='_blank'>Nonlinear parser combinators</a></li>
  <li><a href='http://github.com/spencertipping/caterwaul-futures' target='_blank'>Futures implementation</a></li>
  <li><a href='http://github.com/spencertipping/caterwaul-factory' target='_blank'>Value generation combinators (for testing, etc)</a></li>
  <li><a href='http://github.com/spencertipping/caterwaul-numerical-integration' target='_blank'>Numerical integration with error function</a></li>
  <li><a href='http://github.com/spencertipping/caterwaul-serialization' target='_blank'>Mediocre serialization library</a></li>
  <li><a href='http://github.com/spencertipping/caterwaul-invariant' target='_blank'>State transition/invariant library</a></li>
  </ul>

  I should mention that they're in various states of disrepair and sometimes break. However, if you'd like to use one in production (which you shouldn't), feel free to <a
  href='mailto:spencer@spencertipping.com'>e-mail me</a> and I'll set up a stable versioning scheme for it. They're all MIT-licensed, as is Caterwaul.

  Downloading Caterwaul.
  Here are some relevant links if you want to hack on or use Caterwaul:
  <ul>
  <li><a href='http://github.com/spencertipping/caterwaul' target='_blank'>Caterwaul on Github</a></li>
  <li><a href='http://caterwauljs.org/stable' target='_blank'>Stable versions of Caterwaul</a></li>
  <li><a href='http://caterwauljs.org/build/caterwaul.vim' target='_blank'>Vim highlighter for Javascript/Caterwaul</a></li>
  <li><a href='http://github.com/spencertipping/js-in-ten-minutes' target='_blank'>Javascript in Ten Minutes</a></li>
  </ul>

  Caterwaul in node.js.
  It's really easy to use Caterwaul with <a href='http://nodejs.org' target='_blank'>node.js</a>. You just need to download <code>caterwaul.node.js</code> and whatever extensions you want to
  use (I'll assume <code>caterwaul.std.js</code> for the purposes of this example), and concatenate them into one big file. On Mac or Linux the process looks like this:

  | $ curl http://caterwauljs.org/build/caterwaul.{node,std}.js > caterwaul-custom.js
    $ node
    > var caterwaul = require('./caterwaul-custom.js').caterwaul;
    > caterwaul.js_all()('[1, 2, 3] *[x + 1] -seq');
    [ 2, 3, 4 ]
    >

  Because Caterwaul recompiles functions, you'll have to explicitly bind <code>require</code> if you want your app to have access to it. This can be done by specifying a hash of variable
  bindings after the function you're compiling. For example:

  | var main_function = function () {...};
    caterwaul.js_all()(main_function, {require: require});

  Doing this puts <code>require</code> into the local scope of the compiled function. (Unfortunately, Caterwaul has no way of doing this automatically, since all functions that it constructs
  are created in the global scope and lexical scopes are not first-class in Javascript.)

Javascript extensions.
Caterwaul's core macro set starts by extending Javascript syntax in some helpful ways. In particular, it enables quick function assignment, <a href='#advanced'>infix and postfix function
application (experimental)</a>, and Ruby-style string interpolation (which works with both single and double quotes):

add(x, y) = x + y

c
String.prototype.say_hi() = 'hi from #{this}!'

Caterwaul translates these expressions into this:

| add = function (x, y) {
    return x + y;
  };
  String.prototype.say_hi = function () {
    return 'hi ' + (this) + '!';
  };

Now we can use the new functions in the shell:

add(3, 4)

'javascript'.say_hi()

Caterwaul also supports some <a href='#advanced'>experimental features</a> when defining functions this way.

String interpolation, function assignment, and infix and postfix function application are the only irregular syntactic forms provided by Caterwaul. Everything else is implemented as a regular
form called a modifier.

General modifiers.
A modifier is a word that is used with an operator to modify a bit of syntax. For example, Caterwaul provides a modifier called <code>when</code> to execute things conditionally:

log('hi') -when ['foo'.length === 3]

There are two parts to a modifier. The first is the operator you use with it (in this case minus), and the second is the modifier and any arguments it takes. The operator is very important; it
determines how much stuff you're modifying. For example:

log('hi'), log('again') -when [1 === 2]

Here the <code>when [1 === 2]</code> only modifies <code>log('again')</code> because minus has much higher precedence than the comma operator. However, Caterwaul lets you use several other
operators to change this:

log('hi'), log('again'), when [1 === 2]

In this case the <code>when [1 === 2]</code> modifies both <code>log</code> statements. The reason for this is kind of subtle: comma left-associates, so the first comma was collapsed into a
single syntax node that then became the left-hand side of the second comma. Because Caterwaul operates on the structure of your code, it groups both <code>log</code> statements into the
conditional.

You can inspect Caterwaul's parse tree by using the <code>qs</code> modifier (for "quote syntax"). For example:

qs [log('hi'), log('again'), when [1 === 2]]

qs [log('hi'), log('again'), when [1 === 2]].data

qs [log('hi'), log('again'), when [1 === 2]].length

qs [log('hi'), log('again'), when [1 === 2]][0]

qs [log('hi'), log('again'), when [1 === 2]][1]

qs [log('hi'), log('again'), when [1 === 2]].structure()

The <code>structure</code> method gives you a string containing the syntax tree in S-expression form. I talk more about this in the <a href='#quotation'>section about quotation</a>.

  Modifier operators.
  There are about six different operators you can use in conjunction with a modifier. From highest to lowest precedence they are:
  <ol><li>The slash. For example, <code>log('hi') /when [true]</code>. I use this when I need something tighter than a minus.</li>
      <li>The minus. For example, <code>log('hi') -when [true]</code>. It also comes in another form: <code>log('hi') -when- true</code>. I use this most of the time because it seems easier to
          read.</li>
      <li>The <code>in</code> operator. For example, <code>given [x] in x + 1</code>. <code>in</code> has the same precedence as <code><</code> and <code>></code>, which is lower
          than the arithmetic operators. As a result, it's useful when you're binding variables or creating functions around simple expressions.</li>
      <li>The <code><></code> operators. These are used around a modifier: <code>log('hi') <unless> no_logging</code>. This has the same precedence as <code>in</code> and other relational
          operators.
      <li>The <code>|</code> operator. This is the lowest-precedence regular operator; the only things lower are <code>&&</code>, <code>||</code>, <code>?:</code>, assignment, and the
          comma.</li>
      <li>The <code>,</code> operator. This is the lowest-precedence operator in Javascript. It can be dangerous to use because it left-associates; for example,
          <code>f(x, y, z, where [z = 10])</code> will invoke <code>f</code> on just one parameter, since the <code>where</code> gobbles everything to its left. (Using a <code>|</code> here
          would fix the problem.)</li>
      <li>The <code>[]</code> operator. This starts the precedence hierarchy over by using explicit grouping. For example, <code>where [x = 10] [log(x)]</code>.</li></ol>

  Conditional modifiers.
  <code>when</code> and <code>unless</code> are used to make conditionals more flexible. The semantics and return values are:

  | x -when- y          -> y && x
    x -unless- y        -> !y && x

  Similar are <code>and</code> and <code>or</code>, which behave identically to <code>&&</code> and <code>||</code> but can have different precedence. For example:

  | x -or- y + 1        -> (x || y) + 1
    x /and.y * 3        -> (x && y) * 3

  Binding modifiers.
  These let you define locally-scoped variables. There are two of these modifiers, <code>where</code> and <code>using</code>. <code>where</code> is used to bind local variables at runtime,
  much like it is in Haskell:

  x -where [x = 10]

  f(10) -where [f(x) = x + 1]

  Sometimes, though, you want to have access to all of the properties of an object without qualifying them. Javascript provides the <code>with</code> keyword for this purpose, but because it
  is evaluated at runtime it has significant performance implications. A much faster alternative is to use Caterwaul's <code>using</code> modifier, which evaluates its object at compile-time
  and produces a list of local variable definitions that refer to the object's properties. (Naturally, this means that the object you're using needs to be computable at compile-time.) Also,
  any variables defined with <code>using</code> will shadow surrounding variables with the same name. For example, this refers to <code>caterwaul.compile</code>:

  compile -using.caterwaul

  The opposite of <code>using</code> is <code>capture</code>, which makes an object out of a series of assignments. The assignment structure is just like it is for <code>where</code>:

  result = capture [f(x) = x + 1, y = 10]

  result.f(10)

  result.y

  Capturing assignments this way has one problem: since it just builds an object, your expressions can't refer to each other. For example, this won't do what you want:

  capture [f(x) = x + 1, g = f]

  The way to work around this is to use <code>wcapture</code>, which, as its name suggests, combines <code>where</code> and <code>capture</code>. Like <code>capture</code>, it returns an
  object built out of assignments, but like <code>where</code>, it introduces a local scope so that all of the assignments can see each other:

  wcapture [f(x) = x + 1, g = f].g(10)

  Function modifiers.
  There are two words that create functions. One is <code>given</code>, which creates a regular function. The other is <code>bgiven</code>, which binds the function to the <code>this</code>
  where it was defined. For example:

  given [x] in x + 1

  x + 1 -given [x]

  f.call(10) -where [f = this -given- x]

  f.call(10) -where [f = this -bgiven- x]

  There's a shorthand you can use if you just have a single operand for a modifier:

  x + 1 -given.x

  given.x in x + 1

  given.x [x + 1]

  Side-effecting modifiers.
  These make it easy to manipulate values and return things without using an explicit variable. We do this in English using pronouns, and Caterwaul binds the variable <code>it</code> to refer
  to "the thing that we're working with."

  There are two ways to create a side-effect. One is to return the side-effecting expression and the other is to return the original value. For example, suppose you want to write a function
  <code>hash(k, v)</code> that returns a hash <code>h</code> such that <code>h[k] === v</code>. In plain Javascript you'd write this:

  | var hash = function (k, v) {
      var result = {};
      result[k] = v;
      return result;
    };

  However, the amount of typing required is much larger than the complexity of the problem. We want to return an object after applying a side-effect to it; to do this with Caterwaul we would
  use the <code>se</code> modifier, which stands for "side-effect":

  hash(k, v) = {} -se [it[k] = v]

  This style of side-effects returns the original expression. Sometimes, though, you want to return the result of the side-effect rather than the original. For example, here's a zero-division
  check in plain Javascript:

  | var x_over_yp1 = function (x, y) {
      var y_plus_1 = y + 1;
      return y_plus_1 === 0 ? 0 : x / y_plus_1;
    };

  Here's the same function using a returning side-effect ("re" stands for "returning effect"):

  x_over_yp1(x, y) = y + 1 -re [it === 0 ? 0 : x / it]

  Side-effecting won't impact the evaluation order of your code. That is, <code>x -se- y</code> and <code>x -re- y</code> will always evaluate <code>x</code> before <code>y</code>.

  Another modifier is <code>-then-</code>, which is synonymous to <code>-re-</code> but doesn't allocate a closure or bind the <code>it</code> variable. It is semantically equivalent to
  Javascript's native comma operator, but can take on different precedence levels.

  Quotation.
  <span id='quotation'></span> Most people won't use this, but it's handy if you're doing heavy-duty syntax analysis or writing complex macros. The standard library includes an obscure
  modifier called <code>qs</code> that you can use to quote a piece of code. Quotation is basically grabbing the literal syntax rather than evaluating it normally. For example:

  qs [foo + bar]

  qs [foo + bar].data

  qs [foo + bar].length

  qs [foo + bar][0]

  qs [foo + bar].structure()

  Quotation is an idea that comes from Lisp and is handled similarly by Caterwaul. (The only difference is that Caterwaul returns its own n-ary syntax tree format instead of cons trees.)

  A variant, <code>qse</code>, macroexpands the quoted code before returning it as a syntax tree. For example:

  qse [log(foo) -unless [true]]

  log(foo) -unless [true], qse

  You can use this in the shell to see how Caterwaul will macroexpand something. Note that the shell's <code>caterwaul</code> function is configured with all extensions enabled.

  Evaluation modifiers.
  You can inform Caterwaul that you want to evaluate an expression at compile-time rather than at runtime by using the <code>eval</code> modifier. For example:

  given.x in x + Math.sqrt(2)

  given.x in x + Math.sqrt(2) /eval

  In the second example, <code>Math.sqrt(2)</code> is evaluated when the code is macroexpanded and a variable called <code>eval</code> is inserted into the code in its place. <code>eval</code>
  is bound to the result of the compile-time evaluation. Generally you wouldn't use this modifier, but I've included it for completeness.

  Macroexpansion modifiers.
  The <code>reexpand</code> and <code>noexpand</code> modifiers give Caterwaul instructions about how to handle an expression. For instance, suppose you have a variable called
  <code>given</code>, and you want to use it without worrying that Caterwaul will interpret it as a modifier. You can wrap expressions that contain this variable with the <code>noexpand</code>
  modifier to prevent any macroexpansion from happening:

  qse in noexpand [x -given.x]

  Similar to <code>noexpand</code> is <code>reexpand</code>, which tells Caterwaul to re-expand the output of the first macroexpansion. Normally you don't need to use this because all of the
  standard macros re-expand their output automatically and therefore require only the initial expansion.

  Other modifiers.
  There are a few more modifiers that I threw in to the standard library to make some edge cases easier:

  new Error('uh-oh') -raise

  null.foo -rescue- log('caught #{e}')

  The exception is always called <code>e</code> when using the <code>rescue</code> modifier.

Sequence library.
<span id='seq'></span> This is probably the gnarliest part of Caterwaul, but in my opinion it's also the most useful. The sequence library provides a modifier called <code>seq</code> that
reinterprets some syntax within an APL-like domain-specific language. It generates very efficient code and lets you express maps, folds, unfolds, filters, etc, with very little effort.

For instance, suppose we want an array of the first 10 squares. Using the sequence library looks like this:

ni[1, 10] *[x * x] /seq

  Mapping and iterating.
  The <code>*</code> operator is responsible for mapping, iterating, and flat-mapping. It's fairly easy to use; you just "multiply" a sequence by a bracketed expression. <code>*</code> will
  create a variable called <code>x</code> and evaluate your expression for each element in the sequence. It then collects these results and returns a new array. For example:

  seq in [1, 2, 3] *['x = #{x}']

  You don't have to use just arrays. You can use anything with a <code>.length</code> and <code>[0]</code> ... <code>[n - 1]</code> attributes. One of the most common non-array collections I
  use is a jQuery selector (just be sure to wrap <code>x</code> again so that you're not dealing with a plain DOM node):

  seq in +$('div') *[$(x).attr('class')]

  In this case, the <code>+</code> converts the jQuery collection into an array by invoking <code>Array.prototype.slice</code> on it. We can also map into another jQuery collection if we want
  to; for instance:

  seq in $('div') *[x.parentNode]

    Alternative forms.
    Most operators have an alternative form that does something similar to the original. You specify this form by using a <code>!</code> after the operator. The alternative form of
    <code>*</code> is used to iterate without collecting the results; doing this returns the original array. For example:

    seq in [1, 2, 3] *![log(x)]

    The third use of <code>*</code> is flat-mapping, which is denoted by writing <code>*~!</code>. For example:

    seq in [1, 2, 3] *~![[x, x + 1]]

    Like the original form, these alternative forms can be combined with any of the operator features below.

    Prefixes.
    Caterwaul 1.0.3 supports prefixes for mapping and iterating over non-array structures. Right now there are two prefixes, <code>%k</code> and <code>%v</code>. These can be used with
    <code>*</code> and <code>*!</code>, but not <code>*~!</code>.

    These prefixes stand for 'keys' and 'values', respectively, and they're used to limit the scope of a map or iteration to the keys or values of an object. For example:

    (seq in {foo: 'bar'} %k*[x + 'hi']).foohi

    (seq in {foo: 'bar'} %v*[x + 'hi']).foo

    seq in {foo: 'bar'} %v*![log(x)]

    The reason you can't use <code>%k</code> and <code>%v</code> with <code>*~!</code> is that <code>*~!</code> isn't a componentwise operator. Because it could return zero, one, or many
    values for each one that gets visited, it isn't clear what to do with the result. (One example of this is <code>seq in value %v*~![[x, x + 'foo']]</code> -- the intent is unclear.)

    Initialized forms.
    You can provide an initialization block to <code>*~!</code> to iterate without building up an array. For example, to find the 1024th root of a number:

    5 *~![xi < 10][Math.sqrt(x)] -seq

    This is equivalent to using an unfold (see below) and selecting only the last element of the resulting array. Because no array is built, <code>*~![]</code> ends up being significantly
    faster.

    Hacking iteration.
    It's not hard to achieve a lot of flexibility with the <code>seq</code> macro. For example, you can manually increment <code>xi</code> to skip elements:

    [1, 2, 3, 4, 5] *[++xi /unless [x & 1], xs[xi]] -seq

    I don't exactly recommend that you do this, but under the hood the <code>seq</code> macro writes more or less normal-looking <code>for</code> loops and so is amenable to this kind of
    manipulation.

  Operator features.
  The sequence library uses operators to describe operations on arrays. Most of them are regular binary infix operators like <code>+</code> and <code>*</code>, though a few of them have names
  (such as <code>ni[]</code> above).

  Despite the wide array of operators supported, there is a high degree of regularity among them. Each operator that takes a block (like <code>*</code> does) has several options that can be
  set to change the way it interprets the block.

    Variable renaming.
    The sequence language lets you rename any variable by prefixing the <code>[]</code> with a new variable name:

    seq in [1, 2, 3] *y[y + 1]

    Function promotion.
    Caterwaul 1.1 adds the ability to implicitly promote functions by using them instead of a <code>[]</code> block. For example:

    seq in [1, 2, 3] *![log(x)]

    seq in [1, 2, 3] *!log

    Note that the function name is evaluated within the context of the loop, so it is re-evaluated each iteration. This could, in pathological cases, be beneficial; but mostly it's something
    to watch out for. Generally you should only use local variables, or simple permutations of them, as functions. Function promotion applies to all operators that take blocks.

  Filtering.
  The filtering family of operators is denoted by <code>%</code>. For instance, here's a way to get multiples of three:

  seq in [1, 2, 3] %[x % 3 === 0]

    Alternative forms.
    Negation is so high precedence that it's often difficult to work it into a form without adding parentheses. The alternative form of <code>%</code> negates the predicate:

    seq in [1, 2, 3] %![x % 3]

    The other alternative form of <code>%</code> is a simultaneous map/filter. The idea is to return the expression value when it's truthy and drop the element otherwise. For example, we can
    get the squares of all negative elements this way:

    seq in [1, -2, -3, 4] %~![x < 0 && x * x]

    Prefixes.
    Filter operations can all take the <code>%k</code> and <code>%v</code> prefixes. These remove and/or transform key-value mapping in objects. For example:

    seq in {foo: 'bar', bif: 'baz'} %k%[/foo/.test(x)] /pairs

    seq in {foo: 'bar', bif: 'baz'} %v%[/z/.test(x)] /pairs

    seq in {foo: 'bar', bif: 'baz'} %k%![/o/.test(x)] /pairs

    seq in {foo: 'bar', bif: 'baz'} %k%~![/o/.test(x) && x.replace(/o/g, 'a')] /pairs

    Using <code>/pairs</code> with prefixes isn't necessary in most cases. I've included it in these examples to better illustrate what's happening.

    Initialized forms.
    You can use an init-block with <code>%~!</code> to separate the selector and the map. For example:

    [1, 2, 3] %~![x & 1][x + 1] -seq

    This is faster than its equivalent, <code>%[x & 1] *[x + 1]</code>.

  Folding.
  You can fold stuff through a binary expression by using the <code>/</code> family of operators. <code>/</code> has two forms: left fold (the default), and right fold (written as
  <code>/!</code>). For example, here is how you might sum a bunch of numbers:

  seq in [1, 2, 3] /[x + x0]

  Since <code>+</code> is associative it doesn't matter which direction the fold goes. It becomes obvious, however, if we interpolate the values into a string:

  seq in [1, 2, 3] /['[#{x0}, #{x}]']

  seq in [1, 2, 3] /!['[#{x}, #{x0}]']

  Notice that for folding we have a new variable <code>x0</code>. <code>x0</code> is always used as the accumulator; that is, the inductive step is <code>x0 = f(x0, x)</code>. There are
  actually a few variables you have access to depending on what you're doing. Inside any block you'll have <code>x</code>, <code>xi</code> (the current index), <code>xs</code> (the current
  source collection), <code>xr</code> (the result collection), and <code>xl</code> (the length of the original sequence). Each of these changes uniformly if you rename the variable; so for
  instance:

  seq in [1, 2, 3] /bar[bar + bar0 + bari + barl + bars + barr]

    Prefixes.
    Sometimes you want to fold into an existing element. For example, suppose you want the sum of the squares of numbers from 1 to 10. This code won't work:

    seq in n[1, 11] /[x*x + x0*x0]

    The reason is that you can't square the accumulator. If you can't specify the starting element of the fold, the best you can do is to pre-map the elements and then sum them normally:

    seq in n[1, 11] *[x * x] /[x + x0]

    However, the other option is to specify the initial value for <code>x0</code> by using the fold prefix:

    seq in n[1, 11] /[0][x0 + x*x]

    seq in n[1, 11] /![0][x0 + x*x]

    The fold prefix value is never interpreted in sequence context, even if you modify the body of the fold to do so.

    Unfolding.
    Sometimes it's useful to have anamorphic value generators. These are the opposite of folds: unfolds produce multiple values from one. For instance, summing the array <code>[1, 2, 3, 4,
    5]</code> can be done using a fold over the <code>+</code> operator:

    [1, 2, 3, 4, 5] /[x + x0] -seq

    Similarly, generating the array <code>[1, 2, 3, 4, 5]</code> can be done using an unfold over the increment operator:

    1 /~![x < 5 ? x + 1 : null] -seq

    If we treat the body of the unfold as a function <code>f(x) = x < 5 ? x + 1 : null</code>, then an unfold could be seen as <code>[1, f(1), f(f(1)), f(f(f(1))), f(f(f(f(1))))]</code>. The
    last element returns <code>null</code>, which tells the sequence library to stop unfolding.

    I recently received some great feedback from <a href='http://twitter.com/Phlogistique'>@Phlogistique</a> regarding unfolding. He suggested that I could use an extra body to determine the
    condition rather than using <code>null</code> as a sentinel. This is a very elegant approach, and it's now implemented in version 1.1.5:

    1 /~![x < 5][x + 1] -seq

    If you use two blocks, <code>null</code> can be generated from your unfolds and elements will be generated as long as the first block returns truthy values. Also, <code>x0</code> is set to
    the value of the first block. So, for example:

    1 /~![xi < 5 && 'woot'][x0] -seq

  Quantification.
  The sequence library provides existential quantification on arrays. This uses a block that acts as a predicate. So, for instance, to determine whether any element in an array is positive:

  [-4, -5, 10, 2] |[x > 0] |seq

  The <code>|</code> operator returns the first truthy value generated by the expression (not just true or false), so you can use it to detect things too. This block causes the sequence
  comprehension to return not only whether an element is positive, but if so the first such element will be returned:

  [-4, -5, 10, 2] |[x > 0 && x] |seq

  [-4, -5, 10, 2] |[x -when [x > 0]] |seq

  We can also use this construct to return the index of the first matching element. Because an index of 0 is falsy, we'll have to add one (so 0 is the not-found value rather than -1):

  [-4, -5, 10, 2] |[xi + 1 -when [x > 0]] |seq

  You can also ask whether something doesn't exist. This is done with the <code>|!</code> sequence operator. For example, to ask whether an array contains no negative numbers:

  [1, 2, 3, 4] |![x < 0] |seq

  Caterwaul 1.2 adds the <code>|~!</code> operator, which is identical to <code>|</code> but matches from the right instead of from the left. For example:

  [1, 2, 3] |[x & 1 && x] |seq

  [1, 2, 3] |~![x & 1 && x] |seq

  Combination.
  You can combine sequences via concatenation, written <code>+</code>:

  seq in [1, 2, 3] + [4, 5, 6]

  Objects.
  A really useful and important feature of the sequence library is that it works with objects very easily. It has four operators, <code>/keys</code>, <code>/values</code>, <code>/pairs</code>,
  and <code>|object</code>, that can convert between objects and arrays.

  You can pull an array of the keys or values of an object (not in any particular order of course) by using <code>/keys</code> and <code>/values</code>. For example:

  window /keys -seq

  jQuery /values -seq

  More interesting is the <code>/pairs</code> operator. This pulls out key-value pairs as two-element arrays:

  {foo: 'bar', bif: 'baz'} /pairs -seq

  Its inverse is the <code>|object</code> operator (also can be written as <code>-object</code> or <code>/object</code>, depending on what kind of precedence you want), which turns an array of
  those pairs back into an object:

  [['foo', 'bar'], ['bif', 'baz']] |object |seq

  [['foo', 'bar'], ['bif', 'baz']] -object -seq

  [['foo', 'bar'], ['bif', 'baz']] /object /seq

  Note the differing precedences of <code>/keys</code> etc. and <code>|object</code>. This is intentional. The rationale is that you rarely manipulate objects as objects in sequence
  comprehensions, since the sequence library has no useful operators for objects other than unpacking. Therefore, objects come from various other values and enter a sequence comprehension,
  which may at the very end zip an intermediate result into a final object return value. The alternative higher-precedence forms of <code>object</code> didn't exist before, but after some
  real-world use I've found it useful to be able to maintain a certain precedence level.

  Also note that when possible you should use <code>%k</code> and <code>%v</code> instead of packing and unpacking objects. These prefixes are faster and, in my experience, make the code
  easier to read.

  Caterwaul 1.2 introduces a new operator called <code>/mobject</code> (which can also be written as <code>-mobject</code> and <code>|mobject</code>). This is identical to
  <code>/object</code>, but groups values by key rather than assigning a single value per key. The result is that each key is mapped to an array of values. For example:

  m = [[1, 2], [1, 3], [2, 3]] /mobject -seq

  m[1]

  This behavior differs from <code>/object</code>, which just takes the last value:

  m = [[1, 2], [1, 3], [2, 3]] /object -seq

  m[1]

  Numerical iteration.
  Within a sequence comprehension you have access to the <code>n[]</code> operator, which generates arrays of evenly-spaced numbers. It has three uses. When invoked on one argument it returns
  integers between 0, inclusive, and the number, exclusive. When invoked with two arguments the first becomes the inclusive lower bound and the second is the exclusive upper bound. Adding a
  third argument changes the increment from its default value of 1. For example:

  n[10] -seq

  n[5, 8] -seq

  n[0, 1, 0.25] -seq

  n[0, -1, 0.25] -seq

  n[0, -1, -0.25] -seq

  Another similar operator is <code>ni[]</code>, which behaves exactly like <code>n[]</code> except that it includes its upper bound. For instance:

  n[10] -seq

  ni[10] -seq

  n[1, 4] -seq

  ni[1, 4] -seq

  n[0, 1, 0.25] -seq

  ni[0, 1, 0.25] -seq

  Note that the usual floating-point caveats apply; for example:

  n[0, 1, 0.1] -seq

  ni[0, 1, 0.1] -seq

  These results are the same because of the inductive loops used in <code>n</code> and <code>ni</code>. If you need endpoint accuracy in floating-point situations, your best bet is to generate
  an integer sequence and map across a scaling factor:

  n[10] *[x * 0.1] -seq

  ni[10] *[x * 0.1] -seq

DOM/jQuery driver.
One of the benefits of promoting syntax into a first-class construct is that you can specialize certain syntactic constructs for library interoperation. Caterwaul provides a module that
integrates jQuery-based DOM node construction right into the syntax of your program. (You can also write modules to do similar things for other client-side libraries.) For example:

jquery in div.foo('hi there')

In this example, <code>jquery</code> is a modifier that interprets its code as HAML-like DOM construction. The code above is translated into this:

| jQuery('<div>').addClass('foo').append('<span>' + ('hi there') + '</span>')

  Nodes and classes.
  The example above illustrates the node and class syntax. The way Caterwaul sees this is that <code>div</code> is a node, and each dot-expression after it denotes a class. For example,
  <code>div.foo.bar.bif</code> creates a <code>div</code> with three classes. You can also create just plain elements; <code>div</code> creates an empty <code>div</code> element with no CSS
  classes.

  This DOM driver uses context to determine when a word should be interpreted as an element name. Importantly, it doesn't have a list of known elements that it knows to promote. So, for
  example, this is also perfectly valid code:

  jquery in foo.bar(bif)

  If you run this you'll get a <code>&lt;foo></code> node that contains an empty <code>&lt;bif></code> node.

  Appending children.
  If you invoke one node on another, you're telling the driver to add the "parameters" of the invocation as children. This is translated into an <code>append</code> call to jQuery. So, for
  example, <code>div.foo(span.bar('hi there'))</code> creates an anonymous span containing <code>hi there</code>, adds that to a span with the "bar" class, and adds that to a div with the
  "foo" class. The div is returned.

  For reasons that will shortly become apparent there is a lower-precedence way to represent appending. You can use the <code>></code> operator to do the same thing as invocation. For example:

  jquery [div > p]

  Perhaps counterintuitively, chaining the <code>></code> operator does not result in further nesting. This is because <code>></code> left-associates, so <code>div > p > pre</code> would be
  interpreted as <code>(div > p) > pre</code>. This actually ends up being really convenient -- more so than if it did what it does in CSS, in my opinion.

  Appending other stuff.
  Because you can easily use functional abstraction over DOM nodes you'll probably end up factoring the creation of elements into a bunch of different functions. As a result, you'll end up
  calling those functions and wrapping some of the children in new nodes. The way to do this is to append stuff in a non-DOM context using <code>[]</code> instead of <code>()</code>:

  foo = jquery in div.foo

  jquery in div.container[foo]

  The low-precedence counterpart is <code>>=</code>, and like <code>></code> it left-associates. You can also mix the two because its precedence is identical to <code>></code>.

  In the "hi there" example at the top of this section I appended the string "hi there" (which was interpreted as a Javascript value, not as a node constructor) using parentheses rather than
  square brackets. The DOM driver has an exception for string values, since often you'll want to insert plain text between other nodes:

  jquery in div('foo', button, 'bar')

  There's also a much more sinister aspect to it, though. Firefox (and SpiderMonkey-based Javascript engines in general) rewrites your code at compile-time, before Caterwaul can see it. One of
  the optimizations it performs is constant-folding, which involves rewriting things of the form <code>x['y']</code> to <code>x.y</code> whenever <code>y</code> is a valid identifier. As a
  result, if you write something like this:

  jquery in button['hi']

  You will get the undesirable outcome <code>&lt;button class='hi'></button></code> in the generated code on Firefox. As a result you are always better off using <code>()</code> when there is
  text involved (as long as the text is a literal string, that is).

  Attributes and jQuery data.
  These can be setup by using the <code>*</code> operator. For example:

  jquery in a('google') *href('http://google.com')

  This invokes jQuery's <code>attr()</code> method on <code>'href', 'http://google.com'</code>. A similar shorthand is provided for jQuery's <code>data()</code>:

  jquery in a('got data') *!foo('bar')

  This results in <code>data('foo', 'bar')</code>. The expression inside parentheses is evaluated in normal Javascript context.

  Arbitrary methods and event bindings.
  These are available by using the <code>/</code> operator. For instance:

  jquery in button /text('hi')

  The slash simply turns into a regular method call: <code>$('&lt;button>').text('hi')</code>. Similar is the <code>/!</code> operator, which turns into a <code>bind()</code> call:

  jquery in button /!click(given.e in alert('hi'))

  Calling functions.
  One of the downsides of having a DSL for DOM node construction is that it's hard to call a function on a small piece of the structure. The DOM library addresses this by using the
  <code>%</code> operator to represent function invocation. For instance:

  says_hi(e) = e.text('hi there')

  jquery in button %says_hi

  This expands into <code>say_hi($('&lt;button>'))</code>. Sometimes you want to pass parameters into the function you're using. This is achieved by currying:

  says(thing)(e) = e.text(thing)

  jquery in button %says('click me')

  Side-effecting.
  Caterwaul 1.2.1r2 introduces the ability to use <code>-</code> as a modifier prefix inside a jQuery expression. For example:

  jquery in button -se [it.text('hi')]

  jquery in button[contents] -where [contents = 'woot']

Experimental extensions.
<span id='advanced'></span> These are things that I'm experimenting with before committing to the design. As such, they may change or be removed in the next few versions. (So use at your own
peril, both due to volatility and because they might be useless.)

  Side-effects in function definitions.
  I was writing some parser combinators using curried functions, and realized that it would be useful to be able to do things in between function definitions. For example, consider this
  definition:

  f(x)(y) = x + y

  It would be nice to be able to ensure that <code>x</code> was a number as soon as we passed it to <code>f</code>, rather than waiting for it to also receive <code>y</code>. To do this, you
  can use a side-effect, introduced in Caterwaul 1.1.3:

  must_be_numeric(n) = n.constructor === Number || raise [new Error('#{n} is not a number')]

  f(x, must_be_numeric(x))(y) = x + y

  You can also side-effect on the result of the function. This can be useful if you want to attach metadata to intermediate invocations:

  f(x, result.toString() = 'f(#{x})')(y) = x + y

  f(5).toString()

  Infix function application.
  Haskell gives you a nice way to use a function as an infix operator: you use backticks (so <code>x `f` y</code> becomes <code>f x y</code>). This reduces an API designer's pressure to use
  operator overloading, since now there's another way to get the normal subject-verb-object ordering in expressions.

  Caterwaul has a couple of similar constructs, though they don't look very nice compared to Haskell. The first is a simple binary application, which looks like this:

  1 /-log/ 2

  1 |-log| 2

  You can stack these up, as they associate leftward:

  1 /-log/ 2 /-log/ 3

  You can extend the invocation to take arbitrarily many arguments by adding them to the left and prefixing them with <code>/</code>:

  1 / 2 / 3 /-log/ 4

  1 | 2 | 3 |-log| 4

  Naturally, this syntax is somewhat dangerous since it might collide with certain arithmetic expressions. Hopefully nobody will be dividing twice in a row, but it could happen. That's one of
  the reasons I consider it to be experimental.

  Infix method application.
  You can invoke a method in much the same way that you can invoke a function. To do this, use the <code>~</code> prefix:

  caterwaul /~parse/ log

  Like infix function application, this form can become variadic:

  foo = 'hi'

  bar = 'there'

  console /foo /~log/ bar

  Postfix function application.
  This is an alternative way to invoke functions. Rather than putting the function in the second-to-last position, you can put it after all of its arguments. This enables you to invoke
  functions with only one argument. Expressions of the form <code>x /!f</code> are converted to <code>f(x)</code>:

  100 /!log

  Prefix slashes are recognized as before: <code>x /y /... /!f</code> is converted to <code>f(x, y, ...)</code>.

  Literal modifiers.
  There are two kinds of modifiers. Literal modifiers are used to modify literal values (such as strings and regular expressions). For example, Caterwaul provides a literal modifier called
  <code>.x</code> that removes spaces from regular expressions:

  /foo bar bif/.x

  All literal modifiers look like this; that is, they appear to be properties and aren't invoked. Caterwaul will only process literal modifiers that it knows about and that match literals of
  the right type. All of these expansions happen at compile-time, so there is no significant runtime impact of using them.

    Regular expression modifiers.
    The simplest regular expression modifier is <code>.x</code>. This lets you insert whitespace into your regular expressions without actually matching against whitespace; it's very similar
    to the 'x' flag in Perl or Ruby.

    /^\w+ @ \w+ \. com$/.x

    Another is <code>.qf</code>, short for "quote function". This causes the regular expression to be turned into a function that matches against strings (very similar to Perl's behavior):

    /foo/.qf

    String modifiers.
    Strings can be modified in several different ways:

    'foo bar'.qw

    Here, <code>.qw</code> causes the string to be split into an array of words. You can put arbitrarily much whitespace between words, though the usual Javascript syntax rules apply.

    'foo bar bif baz'.qh

    Similar to <code>.qw</code>, but a hash (object) is constructed instead of an array. Every other word is used as a key, and each following word is a value.

    '^http://'.qr

    Converts a string into a regular expression, but properly escapes the forward slashes. This is primarily for notational convenience, and has the caveat that some things that you'd do
    within regular expressions aren't allowed in strings. (For example, <code>'foo\[bar\]'.qr</code> will fail in Javascript's initial parse because <code>\[</code> and <code>\]</code> are
    invalid escape sequences.)

    'x + 1'.qs

    This creates a reference to the syntax tree generated by parsing <code>x + 1</code>. It's rare that you'd use this unless you're writing macros. You can also use <code>.qse</code> as of
    Caterwaul 1.2.2.

    '_ + 1'.qf

    Constructs a function whose sole argument is <code>_</code> and whose body is <code>_ + 1</code>. Code within the function is macroexpanded automatically, so you can do things like this:

    '_ + 1 -when._'.qf

__
meta::template('comment', '\'\';     # A mechanism for line or block comments.');
meta::template('eval', <<'__');
my $result = eval $_[0];
terminal::warning("Error during template evaluation: $@") if $@;
$result;
__
meta::template('failing_conditional', <<'__');
my ($commands)    = @_;
my $should_return = $commands =~ / if (.*)$/ && ! eval $1;
terminal::warning("eval of template condition failed: $@") if $@;
$should_return;
__
meta::template('include', <<'__');
my ($commands) = @_;
return '' if template::failing_conditional($commands);
join "\n", map retrieve($_), split /\s+/, $commands;
__
meta::template('pinclude', <<'__');
# Just like the regular include, but makes sure to insert paragraph boundaries
# (this is required for SDoc to function properly).

my ($commands) = @_;
return '' if template::failing_conditional($commands);
my $text = join "\n\n", map retrieve($_), split /\s+/, $commands;
"\n\n$text\n\n";
__
meta::template('script-include', <<'__');
my ($name) = @_;
my $s      = 'script';
my $script = retrieve($name);
"<$s>\n$script\n</$s>";

__
meta::template('style-include', <<'__');
my ($name) = @_;
my $s      = 'style';
my $style  = retrieve($name);
"<$s>\n$style\n</$s>";

__
meta::vim_highlighter('caterwaul', <<'__');
" Caterwaul VIM highlighter | Spencer Tipping
" Licensed under the terms of the MIT source code license

" Language:       Javascript with Caterwaul extensions
" Maintainer:     Spencer Tipping <spencer@spencertipping.com>
" URL:            http://caterwauljs.org/build/caterwaul.vim

if !exists("main_syntax")
  if version < 600
    syntax clear
  elseif exists("b:current_syntax")
    finish
  endif
  let main_syntax = 'caterwaul'
endif

syn case match
setlocal iskeyword=48-57,95,36,A-Z,a-z

syn region    jsWaulComment             start=/#/ end=/$/
syn region    jsNodeShebang             start=/\%^#!/ end=/$/

syn region    jsParenGroup              matchgroup=jsParen   start=/(/  end=/)/  contains=TOP
syn region    jsBracketGroup            matchgroup=jsBracket start=/\[/ end=/\]/ contains=TOP
syn region    jsBraceGroup              matchgroup=jsBrace   start=/{/  end=/}/  contains=TOP

syn region    jsTernary                 matchgroup=jsTernaryOperator start=/?/ end=/:/ contains=TOP,jsColonLHS
syn match     jsOperator                /[-+*^%&\|!~;=><,]\{1,4\}/
syn match     jsDot                     /\./

syn keyword   jsReservedToplevel        if else switch while for do break continue return with case default try catch finally throw delete void
syn keyword   jsOperator                in instanceof typeof new
syn keyword   jsBuiltinType             Array Boolean Date Function Number Object String RegExp
syn keyword   jsBuiltinLiteral          true false null undefined

syn keyword   jsBuiltinValue            this arguments
syn keyword   jsPrototype               prototype constructor

syn match     jsAssignment              /\k\+\s*[-+*/^&|%<>]*=[^=]\@=/ contains=jsOperator

syn match     jsWordPrefix              /[-\/|,<]\k\@=/

syn match     jsIdentifier              /[A-Za-z$_][A-Za-z0-9$@_]*/ contains=jsMetadata
syn match     jsMetadata                /@[A-Za-z0-9$@_]*/ contained
syn match     jsWildcard                /\<_[A-Za-z0-9$_@]\+\>/
syn match     jsNumber                  /-\?0x[0-9A-Fa-f]\+\|-\?\(\d*\.\d\+\|\d\+\.\d*\|\d\+\)\([eE][+-]\?\d\{1,3\}\)\?\|-\?0[0-7]\+/
syn region    jsStringD                 matchgroup=jsQuote start=/"/ skip=/\\\\\|\\"/ end=/"/ oneline keepend contains=jsStringEscape,jsCaterwaulEscape
syn region    jsStringS                 matchgroup=jsQuote start=/'/ skip=/\\\\\|\\'/ end=/'/ oneline keepend contains=jsStringEscape,jsCaterwaulEscape
syn region    jsRegexp                  matchgroup=jsQuote start=+/[^/ ]+rs=e-1 skip=+\\\\\|\\/+ end=+/[gims]*[^-~\+!\/A-Za-z0-9 #(\[{]\@=+ oneline contains=jsRegexpSpecial

syn region    jsCodeString              matchgroup=jsCodeQuote start=/\z(['"]\)/ end=/\z1\.qf\>/ skip=/\\./ oneline keepend contains=TOP
syn match     jsCodeStringVariable      /\<_\>/ containedin=jsCodeString contained

  syn match   jsRegexpSpecial           /\\[sSbBwWdDnr\\\[\]]\|[+*|?]\|\[\([^]\\\/]\|\\.\)\+\]/ contained

  syn match   jsStringEscape            /\\\d\{3\}\|\\u[0-9A-Za-z]\{4\}\|\\[a-z"'\\]/ contained
  syn region  jsCaterwaulEscape         start=/#{/ end=/}/                            contained contains=TOP,jsWaulComment keepend
  syn match   jsCaterwaulNumericHex     /\<x[0-9a-f_]\+\>/
  syn match   jsCaterwaulNumericBinary  /\<b[01_]\+\>/

syn match     jsColonLHS                /\k\+\s*:/
syn region    jsVarBinding              matchgroup=jsVarBindingConstruct start=/\<var\>\|\<const\>/ end=/;/ contains=TOP
syn match     jsVarInBinding            /var\s\+\k\+\s\+in/ contains=jsVarBindingKeyword,jsOperator
syn region    jsParamBinding            matchgroup=jsBindingConstruct start=/\(function\|catch\)\s*(/ end=/)/ contains=jsOperator

  syn keyword jsVarBindingKeyword       const var contained
  syn keyword jsBindingKeyword          function catch contained
  syn match   jsBindingAssignment       /\k\+\s*=\([^=]\|$\)\@=/ contains=jsOperator contained containedin=jsVarBinding
  syn match   jsExtraBindingAssignment  /[A-Za-z0-9$_]\+\s*\(=\([^=]\|$\)\@=\|(.*=\([^=]\|$\)\)\@=/ contained containedin=jsBindingGroup

syn keyword   jsBindingMacro            where capture wcapture nextgroup=jsBindingGroup
syn keyword   jsFunctionMacro           given bgiven           nextgroup=jsFunctionGroup
syn keyword   jsQuotationMacro          qs qse                 nextgroup=jsQuotationGroup
syn keyword   jsOtherMacro              raise seq noexpand reexpand eval ahead bitwise

syn keyword   jsParameterizedMacro      se re then and or when unless using rescue eq aeq oeq deq neq acq ocq dcq ncq nextgroup=jsModifierSuffix
syn match     jsModifierSuffix          /[->]/ contained

syn cluster   jsMacro                   add=jsBindingMacro,jsFunctionMacro,jsQuotationMacro,jsOtherMacro

syn match     jsLiteralModifier         /\.\(q[frwhs]\|qse\|x\)\>/

syn match     jsSeqFilter               /\/\(pairs\|keys\|values\)\>/
syn match     jsSeqFilter               /%[kv][\*%\/~!]/
syn match     jsSeqFilter               /[-\/|]m\?object\>/

syn region    jsBindingGroup            matchgroup=jsCaterwaulMacro start='\s*\[' end=']' contained contains=TOP
syn region    jsFunctionGroup           matchgroup=jsCaterwaulMacro start='\s*\[' end=']' contained
syn region    jsQuotationGroup          matchgroup=jsCaterwaulMacro start='\s*\[' end=']' contained contains=TOP

syn match     jsBindingGroup            /\.\k\+/ contained
syn match     jsFunctionGroup           /\.\k\+/ contained

syn match     jsParens                  /[()]/ contained
syn match     jsClosers                 /[\]})]/

syn match     jsCaterwaulInfixFunction  /\([|\/]\)[-~][^ \t\/|]\+\1/
syn match     jsCaterwaulUnaryFunction  +/![^ ,\]\)\}]\++

syn cluster   jsCaterwaulHtmlOps        contains=jsCaterwaulHtmlClass,jsCaterwaulHtmlSlash,jsCaterwaulHtmlMap,jsCaterwaulHtmlAttr,jsCaterwaulHtmlElement,jsCaterwaulHtmlParens
syn cluster   jsCaterwaulHtmlOps             add=jsCaterwaulHtmlArray,jsCaterwaulHtmlSlashB,jsCaterwaulHtmlAttrB,jsCaterwaulHtmlPlus,jsCaterwaulHtmlContains

syn region    jsCaterwaulHtmlPrefix1    matchgroup=jsCaterwaulMacro start=/\<jquery\s*\[/ end=/]/ contains=TOP,@jsCaterwaulHtmlGroups
syn match     jsCaterwaulHtmlPrefix2    /\<jquery\s\+in\s*/ nextgroup=@jsCaterwaulHtmlOps

syn cluster   jsCaterwaulHtmlGroups     contains=jsCaterwaulHtmlPrefix1,jsCaterwaulHtmlPrefix2

  syn match   jsCaterwaulHtmlClass      /[ \t\n]*\./                    contained nextgroup=jsCaterwaulHtmlClassName
  syn match   jsCaterwaulHtmlClassName  /[ \t\n]*\w\+/                  contained nextgroup=@jsCaterwaulHtmlOps
  syn match   jsCaterwaulHtmlSlash      /[ \t\n]*\/\s*\w\+/             contained nextgroup=@jsCaterwaulHtmlOps
  syn match   jsCaterwaulHtmlSlashB     /[ \t\n]*\/!\s*\w\+/            contained nextgroup=@jsCaterwaulHtmlOps
  syn match   jsCaterwaulHtmlAttr       /[ \t\n]*\*\s*\w\+/             contained nextgroup=@jsCaterwaulHtmlOps
  syn match   jsCaterwaulHtmlAttrB      /[ \t\n]*\*!\s*\w\+/            contained nextgroup=@jsCaterwaulHtmlOps
  syn match   jsCaterwaulHtmlMap        /[ \t\n]*%\s*[A-Za-z0-9$_\.]\+/ contained nextgroup=@jsCaterwaulHtmlOps

  syn match   jsCaterwaulHtmlPlus       /[ \t\n]*+\s*/                  contained nextgroup=@jsCaterwaulHtmlOps
  syn match   jsCaterwaulHtmlContains   /[ \t\n]*>\s*/                  contained nextgroup=@jsCaterwaulHtmlOps

  syn region  jsCaterwaulHtmlParens     matchgroup=jsParens start=/(/  end=/)/ contained nextgroup=@jsCaterwaulHtmlOps containedin=@jsCaterwaulHtmlGroups contains=jsCaterwaulHtmlElement,jsStringS,jsStringD
  syn region  jsCaterwaulHtmlArray      matchgroup=jsParens start=/\[/ end=/]/ contained nextgroup=@jsCaterwaulHtmlOps containedin=@jsCaterwaulHtmlGroups contains=TOP

  syn keyword jsCaterwaulHtmlElement    html head body meta script style link title div a span input button textarea option contained containedin=@jsCaterwaulHtmlGroups nextgroup=@jsCaterwaulHtmlOps
  syn keyword jsCaterwaulHtmlElement    table tbody tr td th thead tfoot img h1 h2 h3 h4 h5 h6 li ol ul noscript p pre samp contained containedin=@jsCaterwaulHtmlGroups nextgroup=@jsCaterwaulHtmlOps
  syn keyword jsCaterwaulHtmlElement    blockquote select form label iframe sub sup var code caption canvas audio video     contained containedin=@jsCaterwaulHtmlGroups nextgroup=@jsCaterwaulHtmlOps

syn region    jsBlockComment            start=+/\*+ end=+\*/+ contains=@Spell,jsCommentTags
syn region    jsLineComment             start=+//+  end=+$+   contains=@Spell,jsCommentTags

  syn keyword jsCommentTags             TODO FIXME XXX TBD contained

syn sync fromstart

if main_syntax == "caterwaul"
  syn sync ccomment javaScriptComment
endif

hi def link jsNodeShebang               Special

hi def link jsClosers                   Error

hi def link jsCaterwaulNumericHex       Number
hi def link jsCaterwaulNumericBinary    Number

hi def link jsCaterwaulHtmlElement      Keyword
hi def link jsCaterwaulHtmlClass        Special
hi def link jsCaterwaulHtmlClassName    Type
hi def link jsCaterwaulHtmlSlash        Special
hi def link jsCaterwaulHtmlSlashB       Special
hi def link jsCaterwaulHtmlMap          Special
hi def link jsCaterwaulHtmlAttr         Special
hi def link jsCaterwaulHtmlAttrB        Special
hi def link jsCaterwaulHtmlPlus         Special
hi def link jsCaterwaulHtmlContains     Special

hi def link jsCaterwaulHtmlPrefix2      Special

hi def link jsCaterwaulSeqVariable      Identifier

hi def link jsCaterwaulUnaryLeftOp      Special
hi def link jsCaterwaulComplexOp        Special
hi def link jsCaterwaulOperatorFn       Special

hi def link jsCaterwaulMacro            Special

hi def link jsCaterwaulInfixFunction    Type
hi def link jsCaterwaulUnaryFunction    Type

hi def link jsLiteralModifier           Special

hi def link jsSeqFilter                 Special

hi def link jsWordPrefix                Special

hi def link jsParameterizedMacro        Special
hi def link jsModifierSuffix            Special

hi def link jsBindingMacro              Special
hi def link jsFunctionMacro             Special
hi def link jsOtherMacro                Special
hi def link jsQuotationMacro            Special

hi def link jsFunctionGroup             Identifier

hi def link jsQuotationGroup            String

hi def link jsWaulComment               Comment
hi def link jsLineComment               Comment
hi def link jsBlockComment              Comment
hi def link jsCommentTags               Todo

hi def link jsCodeQuote                 Special
hi def link jsCodeStringVariable        Identifier

hi def link jsQuote                     Special
hi def link jsNumber                    Number
hi def link jsStringS                   String
hi def link jsStringD                   String
hi def link jsRegexp                    String
hi def link jsRegexpEscape              Special
hi def link jsRegexpSpecial             Special
hi def link jsStringEscape              Special
hi def link jsCaterwaulEscape           Special
hi def link jsColonLHS                  Type

hi def link jsAssignment                Type

hi def link jsParen                     Special
hi def link jsParens                    Special
hi def link jsBracket                   Special
hi def link jsBrace                     Special
hi def link jsParenCloseError           Error
hi def link jsBracketCloseError         Error
hi def link jsBraceCloseError           Error

hi def link jsTernaryOperator           Special

hi def link jsVarInBinding              Type

hi def link jsVarBindingKeyword         Keyword
hi def link jsVarBindingConstruct       Keyword
hi def link jsBindingConstruct          Special
hi def link jsBindingKeyword            Keyword
hi def link jsBindingAssignment         Type
hi def link jsExtraBindingAssignment    Identifier
hi def link jsParamBinding              Identifier

hi def link jsReservedToplevel          Keyword
hi def link jsOperator                  Keyword
hi def link jsDot                       Special
hi def link jsBuiltinType               Type
hi def link jsBuiltinLiteral            Special
hi def link jsBuiltinValue              Special
hi def link jsPrototype                 Special

hi def link jsWildcard                  Identifier
hi def link jsMetadata                  Type

let b:current_syntax = "caterwaul"
if main_syntax == 'caterwaul'
  unlet main_syntax
endif

__
internal::main();

__DATA__
