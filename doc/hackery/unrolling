#!/usr/bin/env waul-1.2
# unrolling: Determine the impact of loop unrolling on a trivial numerical loop.

caterwaul('js_all')(function () {
  'starting benchmark' /!console.log,

  bench('seq form (fp)',        1000, "floats /[x + x0] -seq".qf),
  bench('seq form (init) (fp)', 1000, "floats /[0][x0 + x] -seq".qf),

  bench('simple loop (fp)',     1000, function () {for (var i = 0, l = floats.length, total = 0; i < l; ++i) total += floats[i]; return total}),
  bench('unrolled 2x (fp)',     1000, function () {for (var i = 0, l = floats.length, total = 0; i < l; i += 2) total += floats[i], total += floats[i + 1]; return total}),
  bench('unrolled 4x (fp)',     1000, function () {for (var i = 0, l = floats.length, total = 0; i < l; i += 4) total += floats[i],     total += floats[i + 1],
                                                                                                                total += floats[i + 2], total += floats[i + 3]; return total}),

  bench('unrolled 8x (fp)',     1000, function () {for (var i = 0, l = floats.length, total = 0; i < l; i += 8) total += floats[i],     total += floats[i + 1],
                                                                                                                total += floats[i + 2], total += floats[i + 3],
                                                                                                                total += floats[i + 4], total += floats[i + 5],
                                                                                                                total += floats[i + 6], total += floats[i + 7]; return total}),

  bench('seq form',        1000, "ints /[x + x0] -seq".qf),
  bench('seq form (init)', 1000, "ints /[0][x0 + x] -seq".qf),

  bench('simple loop',     1000, function () {for (var i = 0, l = ints.length, total = 0; i < l; ++i) total += ints[i]; return total}),
  bench('unrolled 2x',     1000, function () {for (var i = 0, l = ints.length, total = 0; i < l; i += 2) total += ints[i], total += ints[i + 1]; return total}),
  bench('unrolled 4x',     1000, function () {for (var i = 0, l = ints.length, total = 0; i < l; i += 4) total += ints[i],     total += ints[i + 1],
                                                                                                         total += ints[i + 2], total += ints[i + 3]; return total}),

  bench('unrolled 8x',     1000, function () {for (var i = 0, l = ints.length, total = 0; i < l; i += 8) total += ints[i],     total += ints[i + 1],
                                                                                                         total += ints[i + 2], total += ints[i + 3],
                                                                                                         total += ints[i + 4], total += ints[i + 5],
                                                                                                         total += ints[i + 6], total += ints[i + 7]; return total}),

  where [floats = n[200000] *Math.sqrt -seq,
         ints   = floats *[x >>> 0] -seq,

         bench(name, n, f) = '#{name}\033[40G\033[1;32m#{average /!Math.round}ms avg, #{max}ms max, #{min}ms min, #{Math.sqrt(variance) /!Math.round}ms stddev\033[0;0m' /!console.log
                     -where [samples  = n[8] *[run(name, n >>> 3, f)] -seq,
                             average  = samples /[x + x0] -seq -re- it / 8,
                             max      = samples /[x /-Math.max/ x0] -seq,
                             min      = samples /[x /-Math.min/ x0] -seq,
                             variance = samples /[0][x0 + (x - average) * (x - average)] -seq],
         run = function (name, n, f) {var start = +new Date(); for (var i = n; i >= 0; --i) f(); return +new Date() - start}]})();
