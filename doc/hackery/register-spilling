#!/usr/bin/env waul-1.2b9
# register-spilling: How many locals need to be allocated before performance decreases?

caterwaul('js_all')(function () {
  'starting benchmark' /!console.log,

  # Decreasing this pattern to 1 and 2 accumulators runs the risk of overflowing into floating point arithmetic.

  bench('3 accumulators', 10000, function () {for (var i = 0, a = 0, b = 0, c = 0;                      i < 100000; ++i) a += i, b += ++i, c += ++i;                               return c}),
  bench('4 accumulators', 10000, function () {for (var i = 0, a = 0, b = 0, c = 0, d = 0;               i < 100000; ++i) a += i, b += ++i, c += ++i, d += ++i;                     return d}),
  bench('5 accumulators', 10000, function () {for (var i = 0, a = 0, b = 0, c = 0, d = 0, e = 0;        i < 100000; ++i) a += i, b += ++i, c += ++i, d += ++i, e += ++i;           return e}),
  bench('6 accumulators', 10000, function () {for (var i = 0, a = 0, b = 0, c = 0, d = 0, e = 0, f = 0; i < 100000; ++i) a += i, b += ++i, c += ++i, d += ++i, e += ++i, f += ++i; return f}),

  bench('7 accumulators', 10000, function () {for (var i = 0, a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0; i < 100000; ++i)
                                                a += i, b += ++i, c += ++i, d += ++i, e += ++i, f += ++i, g += ++i; return g}),

  bench('8 accumulators', 10000, function () {for (var i = 0, a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0; i < 100000; ++i)
                                                a += i, b += ++i, c += ++i, d += ++i, e += ++i, f += ++i, g += ++i, h += ++i; return h}),

  bench('9 accumulators', 10000, function () {for (var i = 0, a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, j = 0; i < 100000; ++i)
                                                a += i, b += ++i, c += ++i, d += ++i, e += ++i, f += ++i, g += ++i, h += ++i, j += ++i; return j}),

  bench('10 accumulators', 10000, function () {for (var i = 0, a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, j = 0, k = 0; i < 100000; ++i)
                                                 a += i, b += ++i, c += ++i, d += ++i, e += ++i, f += ++i, g += ++i, h += ++i, j += ++i, k += ++i; return k}),

  bench('11 accumulators', 10000, function () {for (var i = 0, a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, j = 0, k = 0, l = 0; i < 100000; ++i)
                                                 a += i, b += ++i, c += ++i, d += ++i, e += ++i, f += ++i, g += ++i, h += ++i, j += ++i, k += ++i, l += ++i; return l}),

  bench('12 accumulators', 10000, function () {for (var i = 0, a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, j = 0, k = 0, l = 0, m = 0; i < 100000; ++i)
                                                 a += i, b += ++i, c += ++i, d += ++i, e += ++i, f += ++i, g += ++i, h += ++i, j += ++i, k += ++i, l += ++i, m += ++i; return m}),

  bench('13 accumulators', 10000, function () {for (var i = 0, a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, j = 0, k = 0, l = 0, m = 0, n = 0; i < 100000; ++i)
                                                 a += i, b += ++i, c += ++i, d += ++i, e += ++i, f += ++i, g += ++i, h += ++i, j += ++i, k += ++i, l += ++i, m += ++i, n += ++i; return n}),

  where [bench(name, n, f) = '#{name}\033[40G\033[1;32m#{average /!Math.round}ms avg, #{max}ms max, #{min}ms min, #{Math.sqrt(variance) /!Math.round}ms stddev\033[0;0m' /!console.log
                     -where [samples  = n[8] *[run(name, n >>> 3, f)] -seq,
                             average  = samples /[x + x0] -seq -re- it / 8,
                             max      = samples /[x /-Math.max/ x0] -seq,
                             min      = samples /[x /-Math.min/ x0] -seq,
                             variance = samples /[0][x0 + (x - average) * (x - average)] -seq],
         run = function (name, n, f) {var start = +new Date(); for (var i = n; i >= 0; --i) f(); return +new Date() - start}]})();
