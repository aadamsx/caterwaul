#!/usr/bin/env waul-1.2b5
# access: Determine access times for different kinds of values.

caterwaul('js_all')(function () {
  'starting benchmark' /!console.log,

  bench('int local', 5000, function () {for (var i = 0, t = 0; i < 50000; ++i) t += i; return t}),
  bench('float local', 5000, function () {for (var i = 0, t = 0.1; i < 50000; ++i) t += i; return t}),
  bench('int array', 5000, function () {for (var i = 0, xs = [0]; i < 50000; ++i) xs[0] += i; return xs[0]}),
  bench('float array', 5000, function () {for (var i = 0, xs = [0.1]; i < 50000; ++i) xs[0] += i; return xs[0]}),
  bench('int object', 5000, function () {for (var i = 0, o = {foo: 0}; i < 50000; ++i) o.foo += i; return o.foo}),
  bench('float object', 5000, function () {for (var i = 0, o = {foo: 0.1}; i < 50000; ++i) o.foo += i; return o.foo}),
  bench('int class', 5000, function () {for (var i = 0, o = new ctor(0); i < 50000; ++i) o.x += i; return o.foo}),
  bench('float class', 5000, function () {for (var i = 0, o = new ctor(0.1); i < 50000; ++i) o.x += i; return o.foo}),
  bench('int closure (1 level)', 5000, function () {closure_total = 0; for (var i = 0; i < 50000; ++i) closure_total += i; return closure_total}),
  bench('float closure (1 level)', 5000, function () {closure_float = 0.1; for (var i = 0; i < 50000; ++i) closure_float += i; return closure_float}),
  bench('int closure (2 levels)', 5000, function () {closure_total_2 = 0; return (function () {for (var i = 0; i < 50000; ++i) closure_total_2 += i; return closure_total_2})()}),
  bench('float closure (2 levels)', 5000, function () {closure_float_2 = 0.1; return (function () {for (var i = 0; i < 50000; ++i) closure_float_2 += i; return closure_float_2})()}),
  bench('int closure (3 levels)', 5000, function () {closure_total_3 = 0; return (function () {return (function () {
    for (var i = 0; i < 50000; ++i) closure_total_3 += i; return closure_total_3})()})()}),

  bench('float closure (3 levels)', 5000, function () {closure_float_3 = 0.1; return (function () {return (function () {
    for (var i = 0; i < 50000; ++i) closure_float_3 += i; return closure_float_3})()})()}),

  bench('int closure (4 levels)', 5000, function () {closure_total_4 = 0; return (function () {return (function () {return (function () {
    for (var i = 0; i < 50000; ++i) closure_total_4 += i; return closure_total_4})()})()})()}),

  bench('float closure (4 levels)', 5000, function () {closure_float_4 = 0.1; return (function () {return (function () {return (function () {
    for (var i = 0; i < 50000; ++i) closure_float_4 += i; return closure_float_4})()})()})()}),

  where [closure_total   = 0, closure_float   = 0.1,
         closure_total_2 = 0, closure_float_2 = 0.1,
         closure_total_3 = 0, closure_float_3 = 0.1,
         closure_total_4 = 0, closure_float_4 = 0.1,

         ctor(x) = (this.x = x, this),

         bench(name, n, f) = '#{name}\033[40G\033[1;32m#{average /!Math.round}ms avg, #{max}ms max, #{min}ms min, #{Math.sqrt(variance) /!Math.round}ms stddev\033[0;0m' /!console.log
                     -where [samples  = n[8] *[run(name, n >>> 3, f)] -seq,
                             average  = samples /[x + x0] -seq -re- it / 8,
                             max      = samples /[x /-Math.max/ x0] -seq,
                             min      = samples /[x /-Math.min/ x0] -seq,
                             variance = samples /[0][x0 + (x - average) * (x - average)] -seq],
         run = function (name, n, f) {var start = +new Date(); for (var i = n; i >= 0; --i) f(); return +new Date() - start}]})();
