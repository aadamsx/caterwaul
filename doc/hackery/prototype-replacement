#!/usr/bin/env waul-1.2
# prototype-replacement: Measuring the impact of replacing a prototype method with a specialized one.

caterwaul('js_all')(function () {
  'starting benchmark' /!console.log,

  # Prime the benchmark:
  bench('primer (ignore this)', 8, "memoized_elements      *![x.hashed()] -seq".qf),
  bench('primer (ignore this)', 8, "cached_elements        *![x.hashed()] -seq".qf),
  bench('primer (ignore this)', 8, "boxed_elements         *![x.hashed()] -seq".qf),
  bench('primer (ignore this)', 8, "heuristic_elements     *![x.hashed()] -seq".qf),
  bench('primer (ignore this)', 8, "reflective_elements    *![x.hashed()] -seq".qf),
  bench('primer (ignore this)', 8, "strict_cached_elements *![x.hashed()] -seq".qf),
  bench('primer (ignore this)', 8, "naive_elements         *![x.hashed()] -seq".qf),

  bench('memoized',      1000, "memoized_elements      /[0][x0 + x.hashed()] -seq".qf),
  bench('cached',        1000, "cached_elements        /[0][x0 + x.hashed()] -seq".qf),
  bench('boxed',         1000, "boxed_elements         /[0][x0 + x.hashed()] -seq".qf),
  bench('heuristic',     1000, "heuristic_elements     /[0][x0 + x.hashed()] -seq".qf),
  bench('reflective',    1000, "reflective_elements    /[0][x0 + x.hashed()] -seq".qf),
  bench('strict cached', 1000, "strict_cached_elements /[0][x0 + x.hashed()] -seq".qf),
  bench('naive',         1000, "naive_elements         /[0][x0 + x.hashed()] -seq".qf),

  where [memoized_ctor      = "this.data = _, this".qf -se- it.prototype /-merge/ capture [hashed() = (this.hashed() = h).call(this) -where [h = this.data % 31]],
         cached_ctor        = "this.data = _, this".qf -se- it.prototype /-merge/ capture [hashed() = this.hash || (this.hash = this.data % 31)],
         boxed_ctor         = "this.data = _, this".qf -se- it.prototype /-merge/ capture [hashed() = this.hash ? this.hash[0] : (this.hash = [this.data % 31])],
         heuristic_ctor     = "this.data = _, this".qf -se- it.prototype /-merge/ capture [hashed() = this.hash === undefined ? this.hash = this.data % 31 : this.hash],
         reflective_ctor    = "this.data = _, this".qf -se- it.prototype /-merge/ capture [hashed() = 'hash' in this ? this.hash : this.hash = this.data % 31],
         strict_cached_ctor = "this.data = _, this".qf -se- it.prototype /-merge/ capture [hashed() = this.hash_computed ? this.hash : (this.hash_computed = true, this.hash = this.data % 31)],
         naive_ctor         = "this.data = _, this".qf -se- it.prototype /-merge/ capture [hashed() = this.data % 31],

         memoized_elements      = n[100000] *[new memoized_ctor(x)]      -seq,
         cached_elements        = n[100000] *[new cached_ctor(x)]        -seq,
         boxed_elements         = n[100000] *[new boxed_ctor(x)]         -seq,
         heuristic_elements     = n[100000] *[new heuristic_ctor(x)]     -seq,
         reflective_elements    = n[100000] *[new reflective_ctor(x)]    -seq,
         strict_cached_elements = n[100000] *[new strict_cached_ctor(x)] -seq,
         naive_elements         = n[100000] *[new naive_ctor(x)]         -seq,

         bench(name, n, f) = '#{name}\033[40G\033[1;32m#{average /!Math.round}ms avg, #{max}ms max, #{min}ms min, #{Math.sqrt(variance) /!Math.round}ms stddev\033[0;0m' /!console.log
                     -where [samples  = n[8] *[run(name, n >>> 3, f)] -seq,
                             average  = samples /[x + x0] -seq -re- it / 8,
                             max      = samples /[x /-Math.max/ x0] -seq,
                             min      = samples /[x /-Math.min/ x0] -seq,
                             variance = samples /[0][x0 + (x - average) * (x - average)] -seq],
         run = function (name, n, f) {var start = +new Date(); for (var i = n; i >= 0; --i) f(); return +new Date() - start}],

  using [caterwaul]})();
