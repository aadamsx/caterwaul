#!/usr/bin/env waul-1.2b11
# prototype-replacement: Measuring the impact of replacing a prototype method with a specialized one.

caterwaul('js_all')(function () {
  'starting benchmark' /!console.log,

  # Prime the benchmark:
  bench('primer (ignore this)', 10, "memoized_elements *![x.hashed()] -seq".qf),
  bench('primer (ignore this)', 10, "naive_elements    *![x.hashed()] -seq".qf),

  bench('memoized', 1000, "memoized_elements /[0][x0 + x.hashed()] -seq".qf),
  bench('naive',    1000, "naive_elements    /[0][x0 + x.hashed()] -seq".qf),

  where [memoized_ctor = "this.data = _, this".qf -se- it.prototype /-merge/ capture [hashed() = (this.hashed() = h).call(this) -where [h = this.data % 31]],
         naive_ctor    = "this.data = _, this".qf -se- it.prototype /-merge/ capture [hashed() = this.data % 31],

         memoized_elements = n[100000] *[new memoized_ctor(x)] -seq,
         naive_elements    = n[100000] *[new naive_ctor(x)]    -seq,

         bench(name, n, f) = '#{name}\033[40G\033[1;32m#{average /!Math.round}ms avg, #{max}ms max, #{min}ms min, #{Math.sqrt(variance) /!Math.round}ms stddev\033[0;0m' /!console.log
                     -where [samples  = n[8] *[run(name, n >>> 3, f)] -seq,
                             average  = samples /[x + x0] -seq -re- it / 8,
                             max      = samples /[x /-Math.max/ x0] -seq,
                             min      = samples /[x /-Math.min/ x0] -seq,
                             variance = samples /[0][x0 + (x - average) * (x - average)] -seq],
         run = function (name, n, f) {var start = +new Date(); for (var i = n; i >= 0; --i) f(); return +new Date() - start}],

  using [caterwaul]})();
