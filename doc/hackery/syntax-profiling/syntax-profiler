#!/usr/bin/env waul
# A REPL for profiling syntax node distribution within Caterwaul, which I'm using as a representative code corpus.

caterwaul('js_all')(function () {
  require('repl').start('syntax profiler> ', undefined, evaluate)

  -where [evaluate(s, _1, _2, cc) = cc(null, evaluator(s, environment)) -rescue- cc(e, undefined),
          evaluator               = caterwaul('js_all'),

          environment             = wcapture [p(f)     = {} -se- caterwaul.parse(f) /~reach/ "it[_.data] = (it[_.data] || 0) + 1, when   [_.length]".qf,
                                              p0(f)    = {} -se- caterwaul.parse(f) /~reach/ "it[_.data] = (it[_.data] || 0) + 1, unless [_.length]".qf,

                                              r(f)     = require('fs').readFileSync(f, 'utf8'),

                                              hp(f)(p) = f /!p /!h /!console.log,

                                              hpi      = hp(caterwaul.initializer),
                                              hps      = hp(caterwaul.module('std.seq')),
                                              hpr      = hp(caterwaul.replicator().toString()),
                                              hpw      = hp(r('waul')),
                                              hpj      = hp(r('jquery.js')),

                                              hpm(p)   = caterwaul.modules *!['#{x}\n#{h(p(caterwaul.module(x)))}\n' /!console.log] -seq,

                                              h(o)     = rows_for(o).join('\n')
                                                        -where [row(p)          = {name: p[0], n: p[1], c: 0, bar: bar(p[1])},
                                                                accumulate(rs)  = rs *![x.c = (c += x.n)] -seq -where [c = 0],
                                                                create_bars(rs) = rs *![x.bar = bar(x.n / maximum(rs) * 152 /!Math.round)] -seq,
                                                                maximum(rs)     = rs *[x.n] /[Math.max(x, x0)] -seq -se [maximum_of(_) = it],
                                                                row_order(x, y) = y.n - x.n,

                                                                format(r)       = '\033[1;32m#{r.name}\033[20G\033[0;0m#{r.n} (#{r.c})\033[40G#{r.bar}',
                                                                bar(n)          = n[n] *['='] -seq -re- it.join(''),
                                                                rows_for(o)     = o /pairs %[x[1] && x[1].constructor === Number] *row -seq
                                                                             -re- create_bars(accumulate(it.sort(row_order))) *format /seq]]]})();
