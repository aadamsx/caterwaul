#!/usr/bin/env waul-1.2b9
# monomorphic-tracing: Determine whether manual separation into monomorphic traces helps Javascript efficiency.

caterwaul('js_all')(function () {
  'starting benchmark' /!console.log,

  bench('seq form (implicitly polymorphic)', 1000, function () {return heterogeneous_array /[x + x0] -seq}),
  bench('seq form (init) (implicitly polymorphic)', 1000, function () {return heterogeneous_array /[0][x + x0] -seq}),

  bench('polymorphic fold', 1000, function () {
    for (var i = 0, l = heterogeneous_array.length, total = 0; i < l; ++i) total += heterogeneous_array[i];
    return total}),

  bench('polymorphic fold (reverse)', 1000, function () {
    for (var i = heterogeneous_array.length - 1, total = 0; i >= 0; --i) total += heterogeneous_array[i];
    return total}),

  bench('polymorphic fold (indirect load)', 1000, function () {
    for (var i = 0, l = heterogeneous_array.length, x, total = 0; i < l; ++i) x = heterogeneous_array[i], total += x;
    return total}),

  bench('polymorphic fold (indirect call)', 1000, function () {
    return (function (xs) {for (var i = 0, l = xs.length, x, total = 0; i < l; ++i) x = xs[i], total += x; return total})(heterogeneous_array)}),

  bench('polymorphic fold (indirect thiscall)', 1000, function () {
    return (function (xs) {for (var i = 0, l = xs.length, x, total = 0; i < l; ++i) x = xs[i], total += x; return total}).call(this, heterogeneous_array)}),

  bench('monomorphic fold', 1000, function () {
    for (var i = 0, l = heterogeneous_array.length, t1 = 0; i < l; i += 2) t1 += heterogeneous_array[i];                # Integer addition
    for (var i = 1, l = heterogeneous_array.length, t2 = 0; i < l; i += 2) t2 += heterogeneous_array[i];                # Floating-point addition
    return t1 + t2}),

  bench('monomorphic fold (reverse)', 1000, function () {
    for (var i = heterogeneous_array.length - 1, t1 = 0; i >= 0; i -= 2) t1 += heterogeneous_array[i];                  # Integer addition
    for (var i = heterogeneous_array.length - 2, t2 = 0; i >= 0; i -= 2) t2 += heterogeneous_array[i];                  # Floating-point addition
    return t1 + t2}),

  bench('monomorphic fold (unified loop)', 1000, function () {
    for (var i = 0, l = heterogeneous_array.length, t1 = 0, t2 = 0; i < l; i += 2) t1 += heterogeneous_array[i], t2 += heterogeneous_array[i + 1];
    return t1 + t2}),

  bench('monomorphic fold (indirect load)', 1000, function () {
    for (var i = 0, l = heterogeneous_array.length, x, t1 = 0; i < l; i += 2) x = heterogeneous_array[i], t1 += x;      # Integer addition
    for (var i = 1, l = heterogeneous_array.length, x, t2 = 0; i < l; i += 2) x = heterogeneous_array[i], t2 += x;      # Floating-point addition
    return t1 + t2}),

  bench('monomorphic fold (indirect call)', 1000, function () {
    return (function (xs) {for (var i = 0, l = xs.length, t1 = 0; i < l; i += 2) t1 += xs[i]; return t1})(heterogeneous_array) +
           (function (xs) {for (var i = 1, l = xs.length, t2 = 0; i < l; i += 2) t2 += xs[i]; return t2})(heterogeneous_array)}),

  bench('monomorphic fold (indirect thiscall)', 1000, function () {
    return (function (xs) {for (var i = 0, l = xs.length, t1 = 0; i < l; i += 2) t1 += xs[i]; return t1}).call(this, heterogeneous_array) +
           (function (xs) {for (var i = 1, l = xs.length, t2 = 0; i < l; i += 2) t2 += xs[i]; return t2}).call(this, heterogeneous_array)}),

  where [heterogeneous_array = n[200000] *[x & 1 ? Math.sqrt(x) : Math.sqrt(x) >>> 0] -seq,
         bench(name, n, f) = '#{name}\033[40G\033[1;32m#{average /!Math.round}ms avg, #{max}ms max, #{min}ms min, #{Math.sqrt(variance) /!Math.round}ms stddev\033[0;0m' /!console.log
                     -where [samples  = n[8] *[run(name, n >>> 3, f)] -seq,
                             average  = samples /[x + x0] -seq -re- it / 8,
                             max      = samples /[x /-Math.max/ x0] -seq,
                             min      = samples /[x /-Math.min/ x0] -seq,
                             variance = samples /[0][x0 + (x - average) * (x - average)] -seq],
         run = function (name, n, f) {var start = +new Date(); for (var i = n; i >= 0; --i) f(); return +new Date() - start}]})();
