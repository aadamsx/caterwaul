#!/usr/bin/env waul-1.2b11
# access: Determine access times for different kinds of values.

caterwaul('js_all')(function () {
  'starting benchmark' /!console.log,

  bench('local (1M iterations)', 100, function () {for (var i = 0, t = 0; i < 1000000; ++i) t += i; return t}),
  bench('array (1M iterations)', 100, function () {for (var i = 0, t = 0, xs = [0]; i < 1000000; ++i) t += i; return xs[0] = t}),
  bench('object (1M iterations)', 100, function () {for (var i = 0, t = 0, o = {foo: 0}; i < 1000000; ++i) t += i; return o.foo = t}),
  bench('closure (1 level) (1M iterations)', 100, function () {for (var i = 0, t = 0; i < 1000000; ++i) t += i; return closure_total = t}),
  bench('closure (2 levels) (1M iterations)', 100, function () {return (function () {for (var i = 0, t = 0; i < 1000000; ++i) t += i; return closure_total_2 = t})()}),
  bench('closure (3 levels) (1M iterations)', 100, function () {return (function () {return (function () {for (var i = 0, t = 0; i < 1000000; ++i) t += i; return closure_total_3 = t})()})()}),
  bench('closure (4 levels) (1M iterations)', 100, function () {return (function () {return (function () {return (function () {
    for (var i = 0, t = 0; i < 1000000; ++i) t += i; return closure_total_4 = t})()})()})()}),

  bench('local', 1000, function () {for (var i = 0, t = 0; i < 100000; ++i) t += i; return t}),
  bench('array', 1000, function () {for (var i = 0, t = 0, xs = [0]; i < 100000; ++i) t += i; return xs[0] = t}),
  bench('object', 1000, function () {for (var i = 0, t = 0, o = {foo: 0}; i < 100000; ++i) t += i; return o.foo = t}),
  bench('closure (1 level)', 1000, function () {for (var i = 0, t = 0; i < 100000; ++i) t += i; return closure_total = t}),
  bench('closure (2 levels)', 1000, function () {return (function () {for (var i = 0, t = 0; i < 100000; ++i) t += i; return closure_total_2 = t})()}),
  bench('closure (3 levels)', 1000, function () {return (function () {return (function () {for (var i = 0, t = 0; i < 100000; ++i) t += i; return closure_total_3 = t})()})()}),
  bench('closure (4 levels)', 1000, function () {return (function () {return (function () {return (function () {
    for (var i = 0, t = 0; i < 100000; ++i) t += i; return closure_total_4 = t})()})()})()}),

  where [closure_total = 0,
         closure_total_2 = 0,
         closure_total_3 = 0,
         closure_total_4 = 0,

         bench(name, n, f) = '#{name}\033[40G\033[1;32m#{average /!Math.round}ms avg, #{max}ms max, #{min}ms min, #{Math.sqrt(variance) /!Math.round}ms stddev\033[0;0m' /!console.log
                     -where [samples  = n[8] *[run(name, n >>> 3, f)] -seq,
                             average  = samples /[x + x0] -seq -re- it / 8,
                             max      = samples /[x /-Math.max/ x0] -seq,
                             min      = samples /[x /-Math.min/ x0] -seq,
                             variance = samples /[0][x0 + (x - average) * (x - average)] -seq],
         run = function (name, n, f) {var start = +new Date(); for (var i = n; i >= 0; --i) f(); return +new Date() - start}]})();
