# Waul precompiler implementation | Spencer Tipping
# Licensed under the terms of the MIT source code license

# Introduction.
# Caterwaul is useful as a library and an online compiler, but when performance is important you probably want to deliver precompiled code. Waul is a program that does exactly that. You write a
# regular file that invokes Caterwaul on a function, and Waul emits a Javascript file that contains the Caterwaul-compiled results. For example:

# | $ cat > test.waul <<EOF
#   caterwaul('js_all')(function ($) {
#     console.log('#{message} from caterwaul!')
#     -where [message = 'hello']})(caterwaul);
#   EOF
#   $ waul test.waul
#   $ node test.js
#   hello from caterwaul!
#   $

# Waul has some limitations:

# | 1. It cannot precompile any macros that generate refs (this includes the -eval- modifier, unfortunately, though as of 1.1.6 -using- works just fine).
#   2. You need to inform it about any Caterwaul extensions up-front (I'll explain how to do this).

# Shebang-line invocation.
# You should use the -x option if you intend to use waul as a shebang line interpreter. This way it will ignore any other options you pass it, saving those for the script:

# | #!./my-waul-object -x
#   caterwaul(':all')(function () {
#     ...})();

# Extensions.
# Caterwaul can be extended with custom macros, and in order to precompile something that uses these extensions you'll have to inform Waul about them. You can do this with the --extension flag,
# like this:

# | $ waul --extension caterwaul.custom.js foo.waul

# You can compile multiple files at once using multiple arguments. If you do this, each will be compiled to its own .js file.

# Self-replication.
# Waul can preload itself with Caterwaul extensions and emit a copy of itself on stdout. To do this, use the '-r' or '--replicate' options along with one or more extensions. These extensions
# will be implicitly enabled in the resulting waul script.

caterwaul.module('waul', 'js_all', function ($) {
  process /~nextTick/ main,

  where [main()                     = options.extensions *extension_tree *!evaluate_extension /seq -then- main_action(),
         main_action()              = options.replicate ? replicate() : options.input_files.length ? options.input_files *!waul -seq : waul_repl(),

         fs                         = require('fs'),
         options                    = {extensions: [], input_files: [], output_pattern: '$1$2.js', configuration: '', use_std: true, expression_ref_table: true, simple_repl: false}
                                      -se [it.input_files = []]
                                      -se [process.argv[2] === '-x' || process.argv[2] === '--execute' ? it.input_files = [process.argv[3]]
                                           : process.argv.slice(2) *![x === '--extension' || x === '-e' ? it.extensions /~push/ xs[++xi]  :
                                                                      x === '--output'    || x === '-o' ? it.output_pattern = xs[++xi]    :
                                                                      x === '--no-table'  || x === '-T' ? it.expression_ref_table = false :
                                                                      x === '--replicate' || x === '-r' ? it.replicate = true             :
                                                                      x === '--stdin'                   ? it.simple_repl = true           :
                                                                      x === '--configure' || x === '-c' ? it.configuration = xs[++xi]     : it.input_files /~push/ x] /seq],

         waul_input(filename)       = fs.readFileSync(filename, 'utf8') -re [/\.sdoc$/i.test(filename) ? it.split(/(?:\n\s*)+\n/) %![/^\s*[A-Z|]/.test(x)] -seq -re- it.join('\n') : it],
         extension_tree(filename)   = new $.opaque_tree(filename /!waul_input),
         evaluate_extension(e)      = '(function(){_e})()'.qs /~replace/ {_e: e} /-$.compile/ {caterwaul: $, require: require},

         replicate()                = process.stdout.write('#!/usr/bin/env node\n' +
                                                           '// Waul precompiler (or derivative), copyright 2012 Spencer Tipping\n' +
                                                           '// Licensed under the terms of the MIT source code license\n' +
                                                           '// http://github.com/spencertipping/caterwaul\n\n' +
                                                           $.replicator()),

         immediate_pattern          = 'caterwaul(_transform)(_function)();'.qs,

         module_pattern             = 'caterwaul.module(_name, _transform, _function);'.qs,
         module_pattern_explicit    = 'caterwaul.module(_name, caterwaul(_transform)(_function));'.qs,
         module_pattern_identity    = 'caterwaul.module(_name, function (_formal) {_body});'.qs,
         module_template            = 'caterwaul.module(_name, _compiled);'.qs,

         offline_pattern            = 'caterwaul.offline(_transform, _function);'.qs,
         offline_template           = '(_compiled)();'.qs,

         output_for(filename)       = filename.replace(/^((?:.*\/)?)((?:(?!\.waul(?:\.sdoc)?)[^\/])+)(\.waul(?:\.sdoc)?)?/, options.output_pattern),
         waul_output(input_file, t) = fs.writeFileSync(input_file /!output_for, t.toString(), 'utf8'),

         waul(input_file)           = input_file /-waul_process/ $.parse(input_file /!waul_input).as(';'),
         waul_process(file, tree)   = immediate_pattern       /~match/ tree                                            -re [it ? waul_run(it)                               :
                                      module_pattern          /~match/ tree -or- module_pattern_explicit /~match/ tree -re [it ? waul_transform(file, it, module_template)  :
                                      module_pattern_identity /~match/ tree                                            -re [it ? waul_identity(file, it)                    :
                                      offline_pattern         /~match/ tree                                            -re [it ? waul_transform(file, it, offline_template) :
                                        raise [new Error('waul: unrecognized toplevel construct in #{file}')]]]]],

         introduce()                = process.stderr.write('Waul precompiler or derivative (repl mode), copyright 2012 Spencer Tipping\n' +
                                                           'Licensed under the terms of the MIT source code license\n' +
                                                           'http://github.com/spencertipping/caterwaul\n'),

         repl_history(size)         = wcapture [items      = [],
                                                limit      = size || 5,
                                                push(x)    = items.unshift(x) -then- items.pop() /when [items.length > limit] -then- x,
                                                bindings() = n[limit] *[['_#{x + 1}', items[x]]] -object -seq],

         waul_node_repl()           = introduce() -then- require('repl').start('waul> ', undefined, evaluator)
                              -where [evaluator(s, _1, _2, cc) = cc(null, history /~push/ instance(s, {$: $, caterwaul: $, require: require} /-$.merge/ history.bindings())) -rescue- cc(e, undefined),
                                      instance                 = $(options.configuration),
                                      history                  = repl_history()],

         waul_simple_repl()         = introduce() -then- process.stdin.on('data', require('util') /~inspect/ history.push(instance(s, {$: $, caterwaul: $, require: require}
                                                                                                                                      /-$.merge/ history.bindings()))
                                                                                  -re-     process.stderr.write('#{it}\n', 'utf8')
                                                                                  -rescue- process.stderr.write('Error: #{e}') -given.s)
                                                  -then- process.stdin /~setEncoding/ 'utf8'
                                                  -then- process.stdin.resume()
                              -where [instance = $(options.configuration),
                                      history  = repl_history()],

         waul_repl()                = options.simple_repl ? waul_simple_repl() : waul_node_repl(),

         waul_identity(file, m)     = file /-waul_output/ m._,

         waul_transform(file, m, t) = file /-waul_output/ t.replace({_name: m._name, _compiled: transformed_function}).guarded()
                              -where [transformed_function = $(m._transform.as_escaped_string())(m._function) / null /-$.late_bound_tree/ options
                                                        -re- it.replace(it /!$.gensym_rename_table)],

         waul_run(m)                = $(m._transform.as_escaped_string())(m._function) /-$.compile/ {require: require, caterwaul: $} -re- it()]});

# Generated by SDoc
