sdocp('modules/caterwaul.std.test/local.js.sdoc', 'Caterwaul local standard library tests\n\ntest(function () {\n  var fn = caterwaul.clone(\'std.locally\');\n\n  fn(function (eq) {\n    eq(locally[\'std.fn\'][fn[x][x + 1]](6), 7);\n    eq(locally[\'std.fn\'][fn[x, y][x + y](6, 7)], 13);\n    eq(locally[\'std.fn\'][fn_[10]](), 10);\n\n    eq(locally[\'std.bind\'][l[y = 5] in y + 1], 6);\n    eq(locally[\'std.bind\'][l[y = 5, a = 6] in y + a], 11);\n\n    eq(locally[\'std.bind\'][l*[x = 4, y = x] in x + y], 8);\n    eq(locally[\'std.bind std.fn\'][l*[fact = fn[n][n > 1 ? n * fact(n - 1) : 1]] in fact(5)], 120);\n\n    eq(locally[\'std.bind\'][z + 1, where[z = 5]], 6);\n    eq(locally[\'std.bind\'][q + w, where[q = 10, w = 100]], 110);\n\n    eq(locally[\'std.bind\'][x + y, where*[x = 4, y = x]], 8);\n    eq(locally[\'std.bind std.fn\'][fact(5), where*[fact = fn[n][n > 1 ? n * fact(n - 1) : 1]]], 120);\n\n    eq(locally[\'std.cond\'][5, when[true]], 5);\n    eq(locally[\'std.cond\'][5, when[false]], false);\n\n    eq(locally[\'std.cond\'][5, unless[true]], false);\n    eq(locally[\'std.cond\'][5, unless[false]], 5);\n\n    eq(locally.std[fn[x][x + 1](6)], 7);\n  }) (eq);\n});\n');