Filter tests. (Also includes quantification, since that's sort of like filtering.)

test(function () {
  var c = caterwaul.clone('std iter seq');

  c(function (eq) {
    var naturals = x + 1 <sa< [0];
    var evens1   = ! (x & 1) <sf< naturals;
    var evens2   = naturals.filter(fn[x][!(x % 2)]);

    eq(naturals.at(0), 0);
    eq(naturals.at(1), 1);
    eq(naturals.at(4), 4);

    eq(evens1.length, Infinity);
    eq(evens2.length, Infinity);

    eq(evens1.at(0), 0);
    eq(evens1.at(1), 2);
    eq(evens1.at(4), 8);

    eq(evens2.at(0), 0);
    eq(evens2.at(1), 2);
    eq(evens2.at(4), 8);
  })(eq);

  c(function (eq) {
    var naturals = x + 1 <sa< [0];
    var primes   = ! naturals.between(2, x).exists(fn[y][x % y === 0]) <sf< naturals.after(2);

    eq(primes.length, Infinity);
    eq(primes.force(10).join(' '), '2 3 5 7 11 13 17 19 23 29');
  })(eq);
});
