sdocp('modules/caterwaul.seq.test/filter.js.sdoc', 'Filter tests. (Also includes quantification, since that\'s sort of like filtering.)\n\ntest(function () {\n  var c = caterwaul.clone(\'std iter seq\');\n\n  c(function (eq) {\n    var naturals = x + 1 <sa< [0];\n    var evens1   = ! (x & 1) <sf< naturals;\n    var evens2   = naturals.filter(fn[x][!(x % 2)]);\n\n    eq(naturals.at(0), 0);\n    eq(naturals.at(1), 1);\n    eq(naturals.at(4), 4);\n\n    eq(evens1.length, Infinity);\n    eq(evens2.length, Infinity);\n\n    eq(evens1.at(0), 0);\n    eq(evens1.at(1), 2);\n    eq(evens1.at(4), 8);\n\n    eq(evens2.at(0), 0);\n    eq(evens2.at(1), 2);\n    eq(evens2.at(4), 8);\n  })(eq);\n\n  c(function (eq) {\n    var naturals = x + 1 <sa< [0];\n    var primes   = ! naturals.between(2, x).exists(fn[y][x % y === 0]) <sf< naturals.after(2);\n\n    eq(primes.length, Infinity);\n    eq(primes.force(10).join(\' \'), \'2 3 5 7 11 13 17 19 23 29\');\n  })(eq);\n});\n');