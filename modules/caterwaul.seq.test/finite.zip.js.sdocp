sdocp('modules/caterwaul.seq.test/finite.zip.js.sdoc', 'Finite sequence zip tests.\n\ntest(function () {\n  var c = caterwaul.clone(\'std seq\');\n\n  c(function (eq) {\n    var xs = new caterwaul.seq.finite([1, 2, 3, 4, 5]);\n    var ys = xs.map(fn[x][x * 2]);\n    var zs = xs.map(fn[x][x * 3]);\n\n    var triples = xs.zip(ys, zs);\n    eq(triples.length, 5);\n    eq(triples[0].length, 3);\n\n    eq(triples[0][0], 1);\n    eq(triples[0][1], 2);\n    eq(triples[0][2], 3);\n\n    eq(triples[0].join(\',\'), \'1,2,3\');\n    eq(triples[1].join(\',\'), \'2,4,6\');\n    eq(triples[4].join(\',\'), \'5,10,15\');\n\n    var sums = xs.zip(ys, zs, {f: fn[x, y, z][x + y + z]});\n\n    eq(sums.length, 5);\n    eq(sums[0], 6);\n    eq(sums[1], 12);\n    eq(sums[4], 30);\n\n    var inner = xs.zip([1, 2, 3]);\n\n    eq(inner.length, 3);\n    eq(inner[0].length, 2);\n    eq(inner[0].join(\',\'), \'1,1\');\n    eq(inner[1].join(\',\'), \'2,2\');\n    eq(inner[2].join(\',\'), \'3,3\');\n\n    var outer = xs.zip([1, 2, 3], {outer: true});\n\n    eq(outer.length, 5);\n    eq(outer[0].join(\',\'), \'1,1\');\n    eq(outer[1].join(\',\'), \'2,2\');\n    eq(outer[2].join(\',\'), \'3,3\');\n    eq(outer[3][0], 4);\n    eq(outer[3][1], undefined);\n    eq(outer[4][0], 5);\n    eq(outer[4][1], undefined);\n  })(eq);\n});\n');