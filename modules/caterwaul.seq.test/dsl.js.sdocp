sdocp('modules/caterwaul.seq.test/dsl.js.sdoc', 'Sequence DSL tests.\n\ntest(\'caterwaul.seq.dsl\', function () {\n  var c = caterwaul.clone(\'std continuation seq\');\n\n  c(function (eq) {\n    var f = fn[x][x + 1];\n    var xs = seq[~[1, 2, 3, 4, 5]];\n\n    var ys = seq[~xs *+f];\n    eq(ys.size(), xs.size());\n    eq(ys[0], 2);\n    eq(ys[1], 3);\n    eq(ys[2], 4);\n    eq(ys[3], 5);\n    eq(ys[4], 6);\n\n    eq(seq[xs /+fn[x, y][x + y]], 15);\n    eq(seq[xs %+fn[x][x % 2]].size(), 3);\n  })(eq);\n\n  c(function (eq) {\n    var from_two    = seq[2 >>>[_ + 1]];\n    var primes      = seq[from_two %~n[from_two <<[_ <= Math.sqrt(n)] &[n % _]]];\n    var primef      = fn_[primes];\n    var under_100   = seq[(primes <<[_ < 100]).join(\',\')];\n    var under_100_2 = seq[(~(primes <<[_ < 100])).join(\',\')];\n    var under_100_3 = seq[(~(primef() <<[_ < 100])).join(\',\')];\n\n    var primes2   = seq[2 >>>[_ + 1]] /re[seq[_ %~n[_ <<[_ <= Math.sqrt(n)] &[n % _]]]];\n\n    var count = 0;\n    var one_to_ten = seq[1 >>>[_ + 1] <<[_ <= 10]];\n\n    l/cps[x <- seq[~one_to_ten *n[n * 3]].each(_)][count += x];\n\n    eq(count, 165);\n\n    eq(seq[(primes2 <<[_ < 100]).join(\',\')], under_100);\n    eq(under_100, \'2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97\');\n    eq(under_100_2, under_100);\n    eq(under_100_3, under_100);\n\n    // There are fewer primes below 100 than below 1000:\n    eq(seq[primes <<[_ < 100] < primes <<[_ < 1000]], true);\n\n    var keys = seq[sk[{foo: \'bar\'}]];\n    eq(keys[0], \'foo\');\n    eq(keys.size(), 1);\n\n    var object = seq[!(sp[{foo: \'bar\'}])];\n    eq(object.constructor, Object);\n    eq(object.foo, \'bar\');\n    eq(caterwaul.seq.finite.keys(object).size(), 1);\n  })(eq);\n\n  c(function (eq) {\n    // In response to a failure case:\n    var bytes = fn[x][seq[x >>>[_ >>> 8] <<[_]]];\n    var one = bytes(10);\n\n    eq(one.size(), 1);\n    eq(one[0], 10);\n  })(eq);\n\n  c(function (eq) {\n    var zero = seq[(~[1, 2, 3, 4, 5] -~[~[_, -_]]) /[_ + _0]];\n    eq(zero, 0);\n\n    var ten = seq[(~[1, 2, 3, 4] -[[_]]) /[_ + _0]];\n    eq(ten, 10);\n  })(eq);\n});\n');