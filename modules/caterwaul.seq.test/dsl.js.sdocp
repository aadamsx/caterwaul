sdocp('modules/caterwaul.seq.test/dsl.js.sdoc', 'Sequence DSL tests.\n\ntest(function () {\n  var c = caterwaul.clone(\'std seq\');\n\n  c(function (eq) {\n    var from_two    = seq[2 >>>[_ + 1]];\n    var primes      = seq[from_two %~n[from_two <<[_ <= Math.sqrt(n)] &[n % _]]];\n    var primef      = fn_[primes];\n    var under_100   = seq[(primes <<[_ < 100]).join(\',\')];\n    var under_100_2 = seq[(~(primes <<[_ < 100])).join(\',\')];\n    var under_100_3 = seq[(~(primef() <<[_ < 100])).join(\',\')];\n\n    var primes2   = seq[2 >>>[_ + 1]] /re[seq[_ %~n[_ <<[_ <= Math.sqrt(n)] &[n % _]]]];\n\n    eq(seq[(primes2 <<[_ < 100]).join(\',\')], under_100);\n    eq(under_100, \'2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97\');\n    eq(under_100_2, under_100);\n    eq(under_100_3, under_100);\n\n    // There are fewer primes below 100 than below 1000:\n    eq(seq[primes <<[_ < 100] < primes <<[_ < 1000]], true);\n\n    var keys = seq[sk[{foo: \'bar\'}]];\n    eq(keys[0], \'foo\');\n    eq(keys.length, 1);\n\n    var object = seq[!(sp[{foo: \'bar\'}])];\n    eq(object.constructor, Object);\n    eq(object.foo, \'bar\');\n    eq(caterwaul.seq.finite.keys(object).length, 1);\n  })(eq);\n});\n');