sdocp('modules/caterwaul.seq.test/ana.js.sdoc', 'Anamorphism tests.\n\ntest(function () {\n  var c = caterwaul.clone(\'seq\');\n  \n  c(function (eq) {\n    var xs = x + 1 <sa< [0];\n    eq(xs.at(0), 0);\n    eq(xs.finite_bound, 1);\n    eq(xs[0], 0);\n    eq(xs.length, Infinity);\n    eq(xs.size(), Infinity);\n    eq(xs.at(1), 1);\n    eq(xs.finite_bound, 2);\n    eq(xs.at(2), 2);\n    eq(xs.finite_bound, 3);\n    eq(xs.at(5), 5);\n    eq(xs.finite_bound, 6);\n  })(eq);\n\n  c(function (eq) {\n    var fibs = $(-1) + $(-2) <sa< [0, 1];\n    eq(fibs.at(0), 0);\n    eq(fibs.at(1), 1);\n    eq(fibs.at(2), 1);\n    eq(fibs.at(3), 2);\n\n    eq(fibs.at(5), 5);\n    eq(fibs.at(6), 8);\n    eq(fibs.at(7), 13);\n\n    eq(fibs[49], undefined);\n\n    // Enforces memoization. Without it, this would take years:\n    fibs.prepare(50);\n    eq(fibs[49].constructor, Number);\n    eq(fibs[50], undefined);\n  })(eq);\n\n  c(function (eq) {\n    var evens = x + 2 <sa< [0];\n    var xs = evens.force(10);\n    eq(xs.length, 10);\n    for (var i = 0, l = xs.length; i < l; ++i) eq(xs[i], i * 2);\n  })(eq);\n});\n');