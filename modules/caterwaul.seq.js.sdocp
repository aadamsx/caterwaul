sdocp('modules/caterwaul.seq.js.sdoc', 'Caterwaul JS sequence library | Spencer Tipping\nLicensed under the terms of the MIT source code license\n\nIntroduction.\nJavascript\'s looping facilities are side-effectful and more importantly operate in statement-mode rather than expression-mode. This sequence library moves finite and anamorphic looping into\nexpression-mode using both methods and macros. Macros are used sparingly here; they provide comprehensions, but are ultimately just shorthands for sequence methods.\n\n  caterwaul.tconfiguration(\'std\', \'seq.core\', function () {this.shallow(\'seq\', {core: fn_[null]})}).\n\nThere are two kinds of sequences represented here. One is a finite sequence, which is eager and acts like a Javascript array (though it has a different prototype). The other is an infinite\nstream; this is an anamorphism that generates new elements from previous ones. Because Javascript isn\'t required to optimize tail calls, any recursion done by the sequence library is coded in\nCPS using the continuation library.\n\nFinite sequence API.\nFinite sequences are assumed to have numbered elements and a \'length\' field, just like a Javascript array or jQuery object. Any mapping, filtering, or folding on these sequences is done\neagerly (put differently, most sequence/stream operations are closed under eagerness). There\'s a core prototype for finite sequences that contains eager implementations of each(), map(),\nfilter(), foldl(), foldr(), zip(), etc.\n\n  tconfiguration(\'std\', \'seq.finite.core\', function () {\n    let[push = Array.prototype.push]\n    [this.configure(\'seq.core\').seq.finite = fc[xs][this.length = 0, push.apply(this, xs || [])] /se[_.prototype = new this.seq.core() /se[_.constructor = ctor], where[ctor = _]]]}).\n\n  Mutability.\n  Sequences can be modified in-place. Depending on how Javascript optimizes this case it may be much faster than reallocating. Note that the methods here are not quite the same as the regular\n  Javascript array methods. In particular, push() returns the sequence rather than its new length. Also, there is no shift()/unshift() API. These would each be linear-time given that we\'re\n  using hard indexes.\n\n    tconfiguration(\'std\', \'seq.finite.mutability\', function () {\n      this.configure(\'seq.finite.core\').seq.finite.prototype /se[_.push() = (Array.prototype.push.apply(this, arguments), this),\n                                                                 _.pop()  = this[--this.length]]}).\n\n  Object interfacing.\n  Sequences can be built from object keys, values, or key-value pairs. This keeps you from having to write for (var k in o) ever again. Also, you can specify whether you want all properties or\n  just those which belong to the object directly (by default the latter is assumed). For example:\n\n  | var keys     = caterwaul.seq.finite.keys({foo: \'bar\'});\n    var all_keys = caterwaul.seq.finite.keys({foo: \'bar\'}, true);\n\n    tconfiguration(\'std\', \'seq.finite.object\', function () {\n      let[own = Object.hasOwnProperty] in\n      this.configure(\'seq.finite.core\').seq.finite /se[_.keys(o, all)     = new _() /se[(function () {for (var k in o) if (!all || own.call(o, k)) _.push(k)})()],\n                                                       _.values(o, all)   = new _() /se[(function () {for (var k in o) if (!all || own.call(o, k)) _.push(o[k])})()],\n                                                       _.kv_pairs(o, all) = new _() /se[(function () {for (var k in o) if (!all || own.call(o, k)) _.push([k, o[k]])})()]]}).\n\n  Mapping and traversal.\n  Sequences support the usual set of map/filter/fold operations. They\'re not particularly well-optimized.\n\n    tconfiguration(\'std\', \'seq.finite.traversal\', function () {\n      this.configure(\'seq.finite.core seq.finite.mutability\').seq.finite.prototype\n        /se[_.map(f) = new this.constructor() /se[(function () {for (var i = 0, l = this.length; i < l; ++i) _.push(f.call(this, this[i], i))}).call(this)]]}).\n\nStream API.\nAll streams are assumed to be infinite in length; that is, given some element there is always another one. Streams provide this interface with h() and t() methods; the former returns the first\nelement of the stream, and the latter returns a stream containing the rest of the elements.\n\n  tconfiguration(\'std\', \'seq.infinite.core\', function () {\n    this.configure(\'seq.core\').seq.infinite = fn_[null] /se[_.prototype = new this.seq.core() /se[_.constructor = ctor], where[ctor = _]]\n      /se[_.def(name, ctor, h, t) = i[name] = ctor /se[_.prototype = new i() /se[_.h = h, _.t = t, _.constructor = ctor]], where[i = _],\n\n          _.def(\'cons\', fn[h, t][this._h = h, this._t = t], fn_[this._h], fn_[this._t]),\n          _.def(\'k\',    fn   [x][this._x = x],              fn_[this._x], fn_[this])]}).\n\n  Anamorphisms via fixed-point.\n  Anamorphic streams are basically unwrapped version of the Y combinator. An anamorphic stream takes a function f and an initial element x, and returns f(x), f(f(x)), f(f(f(x))), ....\n\n    tconfiguration(\'std\', \'seq.infinite.y\', function () {\n      this.configure(\'seq.infinite.core\').seq.infinite.def(\'y\', fc[f, x][this._f = f, this._x = x], fn_[this._x], fn_[new this.constructor(this._f, this._f(this._x))])}).\n\n  Lazy map and filter.\n  These are implemented as separate classes that wrap instances of infinite streams. They implement the next() method to provide the desired functionality. map() and filter() are simple\n  because they provide streams as output. filter() is eager on its first element; that is, it remains one element ahead of what is requested.\n\n    tconfiguration(\'std continuation\', \'seq.infinite.class.transform\', function () {\n      this.configure(\'seq.infinite.core\').seq.infinite\n        /se[_.prototype.map(f) = new _.map(f, this),\n            _.def(\'map\', fc[f, xs][this._f = f, this._xs = xs], fn_[this._f(this._xs.h())], fn_[new this.constructor(this._f, this._xs.t())]),\n\n            _.prototype.filter(f) = new _.filter(f, this),\n            _.def(\'filter\', fc[f, xs][this._f = f, this._xs = let*[next(s)(cc) = f(s.h()) ? cc(s) : call/tail[next(s.t())(cc)]] in call/cc[next(xs)]],\n                            fn_[this._xs.h()], fn_[new this.constructor(this._f, this._xs.t())])]}).\n\n  Traversal and forcing.\n  This is where we convert from infinite streams to finite sequences. You can take or drop elements until a condition is met. take() always assumes it will return a finite sequence, whereas\n  drop() assumes it will return an infinite stream. (In other words, the number of taken or dropped elements is assumed to be finite.) Both take() and drop() are eager. drop() returns a\n  sequence starting with the element that triggers the function, whereas take() returns a sequence for which no element triggers the function.\n\n    tconfiguration(\'std continuation\', \'seq.infinite.class.traversal\', function () {\n      let[finite = this.configure(\'seq.finite.core seq.finite.mutability\').seq.finite] in\n      this.configure(\'seq.infinite.core\').seq.infinite.prototype\n        /se[_.drop(f) = let*[next(s)(cc) = f(s.h()) ? cc(s) : call/tail[next(s.t())(cc)]] in call/cc[next(this)],\n            _.take(f) = let*[xs = new finite(), next(s)(cc) = let[h = s.h()][f(h) ? cc(xs) : (xs.push(h), call/tail[next(s.t())(cc)])]] in call/cc[next(this)]]}).\n\nFinal configuration.\nRather than including individual configurations above, you\'ll probably just want to include this one.\n\n  configuration(\'seq\', function () {this.configure(\'seq.core seq.infinite.core seq.infinite.y seq.infinite.class.transform seq.infinite.class.traversal\')});\n');