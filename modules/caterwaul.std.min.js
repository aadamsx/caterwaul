caterwaul.configuration('std.qs',function (){this.macro(this.parse('qs[_]'),function (tree){return new this.ref(tree)}).macro(this.parse('qse[_]'),function (tree){return new this.ref(this.macroexpand(tree))}).macro(this.parse('literal[_]'),function (tree){return tree})}).tconfiguration('std.qs','std.qg',function (){this.rmacro(qs[qg[_]],function (expression){return expression.as('(')})}).tconfiguration('std.qs std.qg','std.fn',function (){this.configure('std.qg').rmacro(qs[fn[_][_]],function (vars,expression){return qs[qg[function (vars){return expression}]].replace({vars:vars,expression:expression})}).rmacro(qs[fn_[_]],function (expression){return qs[qg[function (){return expression}]].replace({expression:expression})}).rmacro(qs[fb[_][_]],function (vars,expression){return qse[fn[_t][fn_[fn[vars][e].apply(_t,arguments)]](this)].replace({_t:this.gensym(),vars:vars,e:expression})}).rmacro(qs[fb_[_]],function (expression){return qse[fn[_t][fn_[fn_[e].apply(_t,arguments)]](this)].replace({_t:this.gensym(),e:expression})}).rmacro(qs[fc[_][_]],function (vars,body){return qse[qg[fn[vars][body,undefined]]].replace({vars:vars,body:body})}).rmacro(qs[fc_[_]],function (body){return qse[qg[fn[vars][body,undefined]]].replace({body:body})})}).tconfiguration('std.qs std.qg std.fn','std.obj',function (){this.configure('std.qg std.fn').rmacro(qs[_/mb/_],fn[object,method][qse[qg[fn[_o][fn_[_o.m.apply(_o,arguments)]]](o)].replace({_o:this.gensym(),o:object,m:method})]).rmacro(qs[_/mb[_]],fn[object,method][qse[qg[fn[_o][fn_[_o[m].apply(_o,arguments)]]](o)].replace({_o:this.gensym(),o:object,m:method})]).rmacro(qs[_/se[_]],fn[value,body][qse[qg[fn[_][body,_]].call(this,value)].replace({body:body,value:value})]).rmacro(qs[_/re[_]],fn[value,body][qse[qg[fn[_][body]].call(this,value)].replace({body:body,value:value})]).rmacro(qs[_/se._[_]],fn[value,name,body][qse[qg[fn[name][body,name]].call(this,value)].replace({body:body,name:name,value:value})]).rmacro(qs[_/re._[_]],fn[value,name,body][qse[qg[fn[name][body]].call(this,value)].replace({body:body,name:name,value:value})])}).tconfiguration('std.qs std.qg std.fn','std.bind',function (){var let_star_expander=fb[vars,expression][qs[qg[function (){var vars;return expression}].call(this)].replace({vars:this.macroexpand(vars),expression:expression})],let_expander=fb[vars,expression][vars=this.macroexpand(vars).flatten(','),qs[qg[function (vars){return e}].call(this,values)].replace({vars:vars.map(fn[n][n[0]]).unflatten(),e:expression,values:vars.map(fn[n][n[1]]).unflatten()})];this.configure('std.qg').rmacro(qs[let[_] in _],let_expander).rmacro(qs[let[_][_]],let_expander).rmacro(qs[_,where[_]],fn[expression,vars][let_expander(vars,expression)]).rmacro(qs[let*[_] in _],let_star_expander).rmacro(qs[let*[_][_]],let_star_expander).rmacro(qs[_,where*[_]],fn[expression,vars][let_star_expander(vars,expression)])}).tconfiguration('std.qs std.qg std.fn','std.lvalue',function (){this.rmacro(qs[_(_)=_],fn[base,params,value][qs[base=qg[function (params){return value}]].replace({base:base,params:params,value:value})])}).tconfiguration('std.qs std.fn','std.cond',function (){this.configure('std.qg').rmacro(qs[_,when[_]],fn[expression,cond][qs[qg[l]&&qg[r]].replace({l:cond,r:expression})]).rmacro(qs[_,unless[_]],fn[expression,cond][qs[!qg[l]&&qg[r]].replace({l:cond,r:expression})])}).tconfiguration('std.qs std.fn std.bind std.lvalue','std.defmacro',function (){let[wildcard(n)=n.data.constructor===String&&n.data.charAt(0)==='_'&&'_'] in this.macro(qs[defmacro[_][_]],fn[pattern,expansion][this.rmacro(pattern,this.compile(this.macroexpand(expansion))),qs[null]]).macro(qs[defsubst[_][_]],fn[pattern,expansion][this.rmacro(pattern.rmap(wildcard),let[wildcards=pattern.collect(wildcard)] in fn_[let[hash={},as=arguments][this.util.map(fn[v,i][hash[v.data]=as[i]],wildcards),expansion.replace(hash)]]),qs[null]])}).tconfiguration('std.qs std.fn std.bind','std.with_gensyms',function (){this.rmacro(qs[with_gensyms[_][_]],fn[vars,expansion][let[bindings={}][vars.flatten(',').each(fb[v][bindings[v.data]=this.gensym()]),qs[qs[_]].replace({_:expansion.replace(bindings)})]])}).tconfiguration('std.qs std.fn','std.compile_eval',function (){this.macro(qs[compile_eval[_]],fn[e][new this.ref(this.compile(this.macroexpand(qs[fn_[_]].replace({_:e}))).call(this))])}).tconfiguration('std.qs std.fn','std.ref',function (){this.macro(qs[caterwaul],fn_[new this.ref(this)])}).tconfiguration('std.qs std.bind std.lvalue','std.locally',function (){let*[t=this,handler(c,e)=t.clone(c.is_string()?c.as_escaped_string():c.data).macroexpand(e)] in this.macro(qs[locally[_][_]],handler).macro(qs[locally._[_]],handler)}).tconfiguration('std.qs std.fn std.bind','std.string',function (){this.rmacro(qs[_],fn[string][string.is_string()&&/#\{[^\}]+\}/.test(string.data)&&let*[q=string.data.charAt(0),s=string.as_escaped_string(),eq=new RegExp('\\\\'+q,'g'),strings=s.split(/#\{[^\}]+\}/),xs=[],result=new this.syntax('+')][s.replace(/#\{([^\}]+)\}/g,fn[_,s][xs.push(s),'']),this.util.map(fb[x,i][result.push(new this.syntax(q+(i<strings.length?strings[i]:'')+q)).push(new this.syntax('(',this.parse(xs[i].replace(eq,q))))],xs),new this.syntax('(',result.push(new this.syntax(q+(xs.length<strings.length?strings[strings.length-1]:'')+q)).unflatten())]])}).configuration('std',function (){this.configure('std.qs std.qg std.bind std.lvalue std.cond std.fn std.obj std.defmacro std.with_gensyms std.ref std.locally std.compile_eval std.string')});