sdocp('modules/caterwaul.walk.js.sdoc', 'Code walking library | Spencer Tipping\nLicensed under the terms of the MIT source code license\n\nIntroduction.\nThis module abstracts out some code common to tree walkers. Code walkers are similar to regular macros, but they generally have a bit more context. For example, Montenegro\n(http://github.com/spencertipping/montenegro) defines a markup language for HTML that includes context-sensitivity:\n\n| html[div.foo > div.bar]       // A <div> within another <div>\n  html[div.foo >= div.bar]      // The value div.bar within a <div> -- we stopped walking on the right-hand side of >=.\n\nThe right-hand side is processed differently depending on the operator. Taking the naive approach of using regular functions gives you a regular language over tree traversal; that is, you can\nsay things like this (abstractly):\n\n| f(left > right)  = f(left) > f(right)\n  f(left >= right) = f(left) >= right\n\nAt present I can\'t imagine a situation when you would need context-free or universal traversal over syntax trees. Both are supported, however, in case you want uber-powerful traversal\nfunctionality. For example, here\'s a tree walker that transforms nodes with a prime number of unary negations:\n\n| f(n)(qs[-_]) = \n');