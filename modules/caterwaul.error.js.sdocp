sdocp('modules/caterwaul.error.js.sdoc', 'Error handling macros | Spencer Tipping\nLicensed under the terms of the MIT source code license\n\nIntroduction.\nJavaScript\'s error handling is clunky to use, especially from inside an expression context. These macros abstract that away and let you handle errors in various ways. The simplest macro is\nprobably quietly[], which silently ignores any errors. (It just returns false instead of whatever the expression would have returned.) Slightly more complex is safely[][], which takes two\nforms. The first is evaluated, and the result returned if there are no errors. If there is an error, then the second is evaluated in a context where \'error\' is bound to the error object, and\nthat result is returned.\n\nAlso provided is an expression-mode throw, which lets you throw errors without returning to statement syntax. This is written !![x], where x is the expression to be thrown.\n\ncaterwaul.tconfiguration(\'std\', \'error\', function () {\n  this.rmacro(qs[safely[_][_]], fn[expression, handler][qs[qg[function () {try {return _} catch (error) {return _}}]()].s(\'_\', [expression, handler])]);\n  this.rmacro(qs[quietly[_]],   fn[expression]         [qs[qg[function () {try {return _} catch (error) {return false}}]()].s(\'_\', expression)]);\n  this.rmacro(qs[!![_]],        fn[expression]         [qs[qg[function () {throw _}]()].s(\'_\', expression)]);\n});\n');