sdocp('modules/caterwaul.continuation.test/delimited.js.sdoc', 'Delimited continuation tests.\n\ntest(\'caterwaul.continuation.delimited\', function () {\n  var c = caterwaul.clone(\'std continuation\');\n\n  c(function (eq) {\n    eq(call/cc[fn[cc][cc(4)]], 4);\n    eq(call/cc[fn[cc][cc(4), 5]], 4);\n    eq(call/cc[fn[cc][5]], 5);\n  })(eq);\n\n  c(function (eq) {\n    // This will fail if tail calls aren\'t being optimized.\n    var successor_cps = fn[n, acc, cc][n > 0 ? call/tail[successor_cps(n - 1, acc + 1, cc)] : cc(acc)];\n    eq(call/cc[fn[cc][successor_cps(5, 0, cc)]], 5);\n    eq(call/cc[fn[cc][successor_cps(100000, 0, cc)]], 100000);\n  })(eq);\n\n  c(function (eq) {\n    var factorial_cps = fn[n, acc, cc][n > 0 ? call/tail[factorial_cps(n - 1, acc * n, cc)] : call/tail[cc(acc)]];\n    eq(call/cc[fn[cc][factorial_cps(5, 1, cc)]], 120);\n  })(eq);\n});\n');