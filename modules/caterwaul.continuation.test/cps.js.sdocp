sdocp('modules/caterwaul.continuation.test/cps.js.sdoc', 'CPS-conversion tests.\n\ntest(\'caterwaul.continuation.cps\', function () {\n  var c = caterwaul.clone(\'std continuation\');\n  c(function (eq) {\n    var x  = 0;\n    var cs = [];\n    var f  = cs/mb/push;\n    var g  = fn_[cs.shift().apply(this, arguments)];\n\n    eq(l/cps[y <- f(_)][x += y], 1);\n    eq(x, 0);\n    eq(cs.length, 1);\n    g(10);\n    eq(x, 10);\n    eq(cs.length, 0);\n\n    eq(l/cps[y <- f(_), z <- f(_)][x += y + z], 1);\n    eq(x, 10);\n    eq(cs.length, 1);\n    g(7);\n    eq(x, 10);\n    eq(cs.length, 1);\n    g(4);\n    eq(x, 21);\n    eq(cs.length, 0);\n\n    var s = \'\';\n    eq(l/cps[(foo, bar) <- f(_)][s += foo + bar], 1);\n    eq(s, \'\');\n    eq(cs.length, 1);\n    g(\'one\', \'two\');\n    eq(s, \'onetwo\');\n    eq(cs.length, 0);\n  })(eq);\n\n  c(function (eq) {\n    var f = fn[x, g, y][g.call(10, x + y)];\n    var count = 0;\n    var t = this;\n    f(3, _, 5) /cps[++count, eq(_, 8), eq(this, 10)];\n    f(3, _, 5) /cpb[++count, eq(_, 8), eq(this, t)];\n    eq(count, 2);\n\n    f(4, _, 9) /cps.n[++count, eq(n, 13), eq(this, 10)];\n    f(4, _, 9) /cpb.n[++count, eq(n, 13), eq(this, t)];\n    eq(count, 4);\n  })(eq);\n\n  c(function (eq) {\n    // Sort of like the real I and C, but not quite...\n    var i = fn[f][fn[x][f(x)]];\n    var c = fn[x, f, g][g(f(x))];\n\n    eq(c(5, i(_) /cps[_ + 1], _) /cps[_ + 1], 7);\n    eq(c(5, i(_) /cps.x[x + 1], _) /cps[_ + 1], 7);\n    eq(c(5, i(_) /cps[_ + 1], _) /cps.x[x + 1], 7);\n  })(eq);\n});\n');