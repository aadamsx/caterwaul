sdocp('sdoc::js::modules/caterwaul.parser.test/high-complexity', 'Observed failure case of exponential-time complexity to parse simple expressions.\nThe Figment parser parses strings using the c(/ /, 1) construct. However, its complexity seems to be exponential.\n\nUpdate: The problem was the following regular expression, which does in fact have exponential time complexity when processing strings that end in a newline:\n| /(?:\\n?[^\\n]+)*/\n\ntest(\'caterwaul.parser.high-complexity\', function () {\n  caterwaul.clone(\'std seq continuation parser\')(function (eq) {\n    defsubst[time[_x]][l*[start = +new Date(), result = qg[_x], end = +new Date()] in end - start];\n    var parser = peg[c(/\'([^\\\\\']|\\\\.?)*/, 1) % c("\'")];\n    var times = [time[parser("\'\'")], time[parser("\'f\'")], time[parser("\'fo\'")], time[parser("\'foobar\'")], time[parser("\'foobarbifbaz\'")]];\n\n    // Uncomment this to run the actual test. I\'ve commented it out because it fails nondeterministically.\n    //eq(times[4] <= times[0] + times[1] + times[2] + times[3], true);\n\n    // Another test, the Figment lexer:\n    var figment_lex = l*[literate     = peg[c(/[A-Z\\|](?:\\n?[^\\n]+)*/, 1) >> fn_[\'\']],\n                         paragraph    = peg[c(/[^\\n]+/, 1) % c(/(?:\\n[^\\n]+)*/, 1) >> fn[xs][xs[0][0] + xs[1][0]]],\n                         paragraphs   = peg[(([c(/\\n\\n+/, 2)] >> fn_[\'\']) % (literate / paragraph) >> fn[xs][xs.join(\'\')])[0] >> fn[xs][seq[~xs %[_]].join(\'\\n\')]],\n                         line_comment = peg[c(/[-\\/]\\s*/, 1) % c(/[A-Z][^\\n]*/, 1) % [c(\'\\n\')] >> fn_[\' \']],\n                         code         = peg[(line_comment / c([\'-\', \'/\']) / (c(/[^-\\/]+/, 1) >> fn[xs][xs[0]]))[1] >> fn[xs][xs.join(\'\')]]] in\n                      fn[s][code(paragraphs(s))];\n    var times2 = [time[figment_lex(\'foo bar bif\\n\')], time[figment_lex(\'foo bar bif baz bok\\n\')], time[figment_lex(\'foo bar bif baz bok boo quux hork bork bogus\\n\')]];\n  })(eq);\n});');