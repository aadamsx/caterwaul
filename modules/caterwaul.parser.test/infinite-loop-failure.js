// An observed failure involving infinite looping.
// The original case is in the Figment parser:

// | l*[literate     = peg[c(/[A-Z\|](?:[^\n]+\n?)*/, 1) >> fn_['']],
//      paragraph    = peg[c(/([^\n]+\n?)*/, 1) >> fn[xs][xs[0]]],
//      paragraphs   = peg[([c(/\n\n+/, 2)] % (literate / paragraph) >> fn[xs][xs.join('')])[0] >> fn[xs][xs.join('')]],
//      line_comment = peg[c(/[-\/]\s*/, 1) % c(/[A-Z][^\n]*/, 1) % c('\n') >> fn_['']],
//      code         = peg[(line_comment / c(['-', '/']) / c(/[^-\/]+/, 1))[1] >> fn[xs][xs.join('')]]] in
//   fn[s][code(paragraphs(s))]

// Update: Another failure is related to newlines. The Figment parser hangs indefinitely when presented with the input "this.hello_world = 'hello world!'\n".

test('caterwaul.parser.infinite-loop-failure', function () {
  var c = caterwaul.clone('std parser');
  c(function (eq) {
    l*[literate     = peg[c(/[A-Z\|](?:[^\n]+\n?)+/, 2) >> fn_['']],
       paragraph    = peg[c(/(?:[^\n]+\n?)+/, 1) >> fn[xs][xs[0]]],
       paragraphs   = peg[(literate / paragraph % ([c(/\n\n+/, 2)] >> fn_['']) >> fn[xs][xs.join('')])[1] >> fn[xs][xs.join('')]],
       line_comment = peg[c(/[-\/]\s*/, 1) % c(/[A-Z][^\n]*/, 1) % c('\n') >> fn_['']],
       code         = peg[(line_comment / c(['-', '/']) / c(/[^-\/]+/, 1))[1] >> fn[xs][xs.join('')]]] in

    eq /se[_(code(paragraphs('foo')), 'foo'),
           _(code(paragraphs('foo\n')), 'foo\n'),
           _(code(paragraphs('foo = "bar"\n')), 'foo = "bar"\n'),
           _(code(paragraphs('foo = "bar"\n\n')), 'foo = "bar"\n')];

    // The failure case is triggered by this (the "one or more" combinator failed to recognize end of input):
    eq(peg[c(/.*/, 1)[1]]('abcdef').join(''), 'abcdef');
    eq(peg[c(/.*/, 1)[1]]('abc').join(''), 'abc');
    eq(peg[c(/.*/, 1)[1]]('a').join(''), 'a');

    // Second failure: a boundary case:
    eq(peg[[c(/\s+/, 1)]]('\n'), '\n');
    eq(peg[c(/\s+/, 1)[1]]('\n').join(''), '\n');
    eq(peg[c(/\w+/, 1) % c(/\s+/, 1)[1]]('foo\n').join(''), 'foo\n');
  })(eq);
});
// Generated by SDoc 
