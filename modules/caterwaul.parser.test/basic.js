// Basic parser combinator tests.

test('caterwaul.parser.basic', function () {
  var c = caterwaul.clone('std parser');

  c(function (eq) {
    var p = caterwaul.parser.parsers;

    var a = p.c('a');
    eq(a('a'), 'a');

    var abc = p.seq(p.c('a'), p.c('b'), p.c('c'));
    eq(abc('abc').join(','), 'a,b,c');
    eq(!! abc('abd'), false);
    eq(!! abc('ab'), false);

    var abBc = p.seq(p.c('a'), p.alt(p.c('b'), p.c('B')), p.c('c'));
    eq(abBc('abc').join(','), 'a,b,c');
    eq(abBc('aBc').join(','), 'a,B,c');
    eq(!! abBc('acc'), false);
    eq(!! abBc('aac'), false);
    eq(!! abBc('abb'), false);
    eq(!! abBc('abC'), false);
    eq(!! abBc('Abc'), false);

    var ab_c = p.seq(p.c('a'), p.opt(p.c('b')), p.c('c'));
    eq(ab_c('abc').join(','), 'a,b,c');
    eq(ab_c('ac').join(','), 'a,false,c');
    eq(!! ab_c('abbc'), false);
    eq(!! ab_c('adc'), false);
    eq(!! ab_c('aabc'), false);

    eq(p.times(p.c('abab'), 1, 2)('abab').join(','), 'abab');
    eq(p.times(p.c('abab'), 1, 2)('abababab').join(','), 'abab,abab');
    eq(p.times(p.c('ab'), 1, 3)('ababab').join(','), 'ab,ab,ab');
    eq(p.times(p.c('ab'), 0, 3)('ab').join(','), 'ab');
    eq(p.times(p.c('ab'), 0, 3)('abab').join(','), 'ab,ab');

    var abbc = p.seq(p.c('a'), p.times(p.c('b'), 1, 3), p.c('c'));
    eq(abbc('abc')[1].join(','), 'b');
    eq(abbc('abbc')[1].join(','), 'b,b');
    eq(abbc('abbbc')[1].join(','), 'b,b,b');
    eq(abbc('abbbbc'), false);
    eq(abbc('ac'), false);

    var ac = p.seq(p.c('a'), p.times(p.c('b'), 0, 2), p.c('c'));
    eq(ac('abc')[1].join(','), 'b');
    eq(ac('abbc')[1].join(','), 'b,b');
    eq(ac('abbbc'), false);
    eq(ac('abbbbc'), false);
    eq(ac('ac')[1].length, 0);
  })(eq);
});
// Generated by SDoc 
