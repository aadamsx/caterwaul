sdocp('sdoc::js::modules/caterwaul.parser.test/basic', 'Basic parser combinator tests.\n\ntest(\'caterwaul.parser.basic\', function () {\n  var c = caterwaul.clone(\'std parser\');\n\n  c(function (eq) {\n    var p = caterwaul.parser.parsers;\n\n    var a = p.c(\'a\');\n    eq(a(\'a\'), \'a\');\n\n    var abc = p.seq(p.c(\'a\'), p.c(\'b\'), p.c(\'c\'));\n    eq(abc(\'abc\').join(\',\'), \'a,b,c\');\n    eq(!! abc(\'abd\'), false);\n    eq(!! abc(\'ab\'), false);\n\n    var abBc = p.seq(p.c(\'a\'), p.alt(p.c(\'b\'), p.c(\'B\')), p.c(\'c\'));\n    eq(abBc(\'abc\').join(\',\'), \'a,b,c\');\n    eq(abBc(\'aBc\').join(\',\'), \'a,B,c\');\n    eq(!! abBc(\'acc\'), false);\n    eq(!! abBc(\'aac\'), false);\n    eq(!! abBc(\'abb\'), false);\n    eq(!! abBc(\'abC\'), false);\n    eq(!! abBc(\'Abc\'), false);\n\n    var ab_c = p.seq(p.c(\'a\'), p.opt(p.c(\'b\')), p.c(\'c\'));\n    eq(ab_c(\'abc\').join(\',\'), \'a,b,c\');\n    eq(ab_c(\'ac\').join(\',\'), \'a,false,c\');\n    eq(!! ab_c(\'abbc\'), false);\n    eq(!! ab_c(\'adc\'), false);\n    eq(!! ab_c(\'aabc\'), false);\n\n    eq(p.times(p.c(\'abab\'), 1, 2)(\'abab\').join(\',\'), \'abab\');\n    eq(p.times(p.c(\'abab\'), 1, 2)(\'abababab\').join(\',\'), \'abab,abab\');\n    eq(p.times(p.c(\'ab\'), 1, 3)(\'ababab\').join(\',\'), \'ab,ab,ab\');\n    eq(p.times(p.c(\'ab\'), 0, 3)(\'ab\').join(\',\'), \'ab\');\n    eq(p.times(p.c(\'ab\'), 0, 3)(\'abab\').join(\',\'), \'ab,ab\');\n\n    var abbc = p.seq(p.c(\'a\'), p.times(p.c(\'b\'), 1, 3), p.c(\'c\'));\n    eq(abbc(\'abc\')[1].join(\',\'), \'b\');\n    eq(abbc(\'abbc\')[1].join(\',\'), \'b,b\');\n    eq(abbc(\'abbbc\')[1].join(\',\'), \'b,b,b\');\n    eq(abbc(\'abbbbc\'), false);\n    eq(abbc(\'ac\'), false);\n\n    var ac = p.seq(p.c(\'a\'), p.times(p.c(\'b\'), 0, 2), p.c(\'c\'));\n    eq(ac(\'abc\')[1].join(\',\'), \'b\');\n    eq(ac(\'abbc\')[1].join(\',\'), \'b,b\');\n    eq(ac(\'abbbc\'), false);\n    eq(ac(\'abbbbc\'), false);\n    eq(ac(\'ac\')[1].length, 0);\n  })(eq);\n});');