sdocp('modules/caterwaul.cps.js.sdoc', 'Continuation-passing style module | Spencer Tipping\nLicensed under the terms of the MIT source code license\n\nIntroduction.\nJavascript is generally written in non-blocking style, both on the client and server. However, this can lead to long chains of callbacks that can be difficult to read. This library provides\ncombinatory operators and an environment for CPS conversion.\n\n  Sequence.\n  The most common operation is a sequence, which is invocation of a CPS-function along with its continuation. This is what happens when you make an AJAX call, for instance. So, for example,\n  here\'s a normal AJAX call and its corresponding CPS representation:\n\n  | // Using caterwaul.std:\n    $.getJSON(\'/some/url\', fn[data][$.post(\'/data\', data, fn[reply][console.log(\'Posted, and got #{reply}\')])]);\n    $.getJSON(\'/other/url\', fn[data][alert(\'Got #{data}\')]);\n\n  | // Using caterwaul.std and caterwaul.cps:\n    cps[$.getJSON(\'/some/url\') | $.post(\'/data\', $0) | console.log(\'Posted, and got #{$0}\'),\n        $.getJSON(\'/other/url\') | alert(\'Got #{data}\')];\n');