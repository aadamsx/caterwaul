// Caterwaul JS | Spencer Tipping
Licensed under the terms of the MIT source code license
caterwaul.configuration('std.qs',function (){this.macro(this.parse('qs[_]'),function (tree){return new this.ref(tree)}).macro(this.parse('qse[_]'),function (tree){return new this.ref(this.macroexpand(tree))}).macro(this.parse('literal[_]'),function (tree){return tree})}).tconfiguration('std.qs','std.qg',function (){this.rmacro(qs[qg[_]],function (expression){return expression.as('(')})}).tconfiguration('std.qs std.qg','std.fn',function (){this.configure('std.qg').rmacro(qs[fn[_][_]],function (vars,expression){return qs[qg[function (vars){return expression}]].replace({vars:vars,expression:expression})}).rmacro(qs[fn_[_]],function (expression){return qs[qg[function (){return expression}]].replace({expression:expression})}).rmacro(qs[fb[_][_]],function (vars,expression){return qse[fn[_t][fn_[fn[vars][e].apply(_t,arguments)]](this)].replace({_t:this.gensym(),vars:vars,e:expression})}).rmacro(qs[fb_[_]],function (expression){return qse[fn[_t][fn_[fn_[e].apply(_t,arguments)]](this)].replace({_t:this.gensym(),e:expression})}).rmacro(qs[fc[_][_]],function (vars,body){return qse[qg[fn[vars][body,undefined]]].replace({vars:vars,body:body})}).rmacro(qs[fc_[_]],function (body){return qse[qg[fn[vars][body,undefined]]].replace({body:body})})}).tconfiguration('std.qs std.qg std.fn','std.obj',function (){this.configure('std.qg std.fn').rmacro(qs[_/mb/_],fn[object,method][qse[qg[fn[_o][_o.m&&fn_[_o.m.apply(_o,arguments)]]](o)].replace({_o:this.gensym(),o:object,m:method})]).rmacro(qs[_/mb[_]],fn[object,method][qse[qg[fn[_o,_m][_o[_m]&&fn_[_o[_m].apply(_o,arguments)]]](o,m)].replace({_o:this.gensym(),_m:this.gensym(),o:object,m:method})]).rmacro(qs[_/se._[_]],fn[v,n,b][qse[qg[fn[n][b,n]].call(this,v)].replace({b:b,n:n,v:v})]).rmacro(qs[_/se[_]],fn[v,b][qse[v/se._[b]].replace({b:b,v:v})]).rmacro(qs[_/re._[_]],fn[v,n,b][qse[qg[fn[n][b]].call(this,v)].replace({b:b,n:n,v:v})]).rmacro(qs[_/re[_]],fn[v,b][qse[v/re._[b]].replace({b:b,v:v})])}).tconfiguration('std.qs std.qg std.fn','std.bind',function (){this.configure('std.qg');var lf=fb[form][this.rmacro(form,l_expander)],lsf=fb[form][this.rmacro(form,l_star_expander)],l_star_expander=fb[vars,expression][qs[qg[function (){var vars;return expression}].call(this)].replace({vars:this.macroexpand(vars),expression:expression})],l_expander=fb[vars,expression][vars=this.macroexpand(vars).flatten(','),qs[qg[function (vars){return e}].call(this,values)].replace({vars:vars.map(fn[n][n[0]]).unflatten(),e:expression,values:vars.map(fn[n][n[1]]).unflatten()})];lf(qs[l[_] in _]),lf(qs[l[_][_]]),lf(this.parse('let [_] in _')),lf(this.parse('let [_][_]')).rmacro(qs[_,where[_]],fn[expression,vars][l_expander(vars,expression)]);lsf(qs[l*[_] in _]),lsf(qs[l*[_][_]]),lsf(this.parse('let*[_] in _')),lsf(this.parse('let*[_][_]')).rmacro(qs[_,where*[_]],fn[expression,vars][l_star_expander(vars,expression)])}).tconfiguration('std.qs std.qg std.fn','std.lvalue',function (){this.rmacro(qs[_(_)=_],fn[base,params,value][qs[base=qg[function (params){return value}]].replace({base:base,params:params,value:value})])}).tconfiguration('std.qs std.fn','std.cond',function (){this.configure('std.qg').rmacro(qs[_,when[_]],fn[expression,cond][qs[qg[l]&&qg[r]].replace({l:cond,r:expression})]).rmacro(qs[_,unless[_]],fn[expression,cond][qs[ !qg[l]&&qg[r]].replace({l:cond,r:expression})])}).tconfiguration('std.qs std.fn std.bind std.lvalue','std.defmacro',function (){l[wildcard(n)=n.data.constructor===String&&n.data.charAt(0)==='_'&&'_'] in this.macro(qs[defmacro[_][_]],fn[pattern,expansion][this.rmacro(pattern,this.compile(this.macroexpand(expansion))),qs[null]]).macro(qs[defsubst[_][_]],fn[pattern,expansion][this.rmacro(pattern.rmap(wildcard),l[wildcards=pattern.collect(wildcard)] in fn_[l[hash={},as=arguments][this.util.map(fn[v,i][hash[v.data]=as[i]],wildcards),expansion.replace(hash)]]),qs[null]])}).tconfiguration('std.qs std.fn std.bind','std.with_gensyms',function (){this.rmacro(qs[with_gensyms[_][_]],fn[vars,expansion][l[bindings={}][vars.flatten(',').each(fb[v][bindings[v.data]=this.gensym()]),qs[qs[_]].replace({_:expansion.replace(bindings)})]])}).tconfiguration('std.qs std.fn','std.compile_eval',function (){this.macro(qs[compile_eval[_]],fn[e][new this.ref(this.compile(this.macroexpand(qs[fn_[_]].replace({_:e}))).call(this))])}).tconfiguration('std.qs std.fn','std.ref',function (){this.macro(qs[caterwaul],fn_[new this.ref(this)])}).tconfiguration('std.qs std.bind std.lvalue','std.locally',function (){l*[t=this,handler(c,e)=t.clone(c.is_string()?c.as_escaped_string():c.data).macroexpand(e)] in this.macro(qs[locally[_][_]],handler).macro(qs[locally._[_]],handler)}).tconfiguration('std.qs std.fn std.bind','std.string',function (){this.rmacro(qs[_],fn[string][string.is_string()&&/#\{[^\}]+\}/.test(string.data)&&l*[q=string.data.charAt(0),s=string.as_escaped_string(),eq=new RegExp('\\\\'+q,'g'),strings=s.split(/#\{[^\}]+\}/),xs=[],result=new this.syntax('+')][s.replace(/#\{([^\}]+)\}/g,fn[_,s][xs.push(s),'']),this.util.map(fb[x,i][result.push(new this.syntax(q+(i<strings.length?strings[i]:'')+q)).push(new this.syntax('(',this.parse(xs[i].replace(eq,q))))],xs),new this.syntax('(',result.push(new this.syntax(q+(xs.length<strings.length?strings[strings.length-1]:'')+q)).unflatten())]])}).configuration('std',function (){this.configure('std.qs std.qg std.bind std.lvalue std.cond std.fn std.obj std.defmacro std.with_gensyms std.ref std.locally std.compile_eval std.string')});caterwaul.tconfiguration('std seq','heap',function (){this.heap(less)=fc_[null]/se.c[c.prototype=new caterwaul.seq.finite()/se[_.constructor=c]/se[_.insert(x)=this.push(x).heapify_up(this.size()-1),_.root()=this[0],_.rroot()=this[0]/se[this.pop()/se[this[0]=_,this.heapify_down(0),when[this.size()]]],_.swap(i,j)=this/se[_[j]=_[i],_[i]=temp,where[temp=_[j]]],_.heapify_up(i)=this/se[_.swap(i,p).heapify_up(p),when[less.call(_,_[i],_[p])],where[p=i>>1]],_.heapify_down(i)=this/se[_.swap(lr,i).heapify_down(lr),unless[lr===i],where*[s=_.size(),r=i+1<<1,l=r-1,ll=l<s&&less.call(_,_[l],_[i])?l:i,lr=r<s&&less.call(_,_[r],_[ll])?r:ll]]]]});caterwaul.tconfiguration('std seq continuation','memoize',function (){this.namespace('memoize')/se.m[m.wrap(f)=fn_[l[as=arguments,start= +new Date()] in unwind_protect[{error:e}][{result:f.apply(this,as)}]/se[_.time= +new Date()-start]]/se[_.original=f],m.perform(result)=result.error?unwind[result.error]:result.result,m.from(proxy)=fn[f][l[state={},g=m.wrap(f)] in fn_[m.perform(proxy.call(state,this,arguments,g))]]]});caterwaul.tconfiguration('std','opt.unroll',function (){this.rmacro(qs[opt.unroll[_,_][_]],fn[variable,iterations,body][with_gensyms[l,rs,es,j][qg[function (l){for (var rs=l>=0&&l>>3,es=l>=0&&l&7,_i_=0;_i_<es; ++_i_)_body_;for (var j=0;j<rs; ++j){_body_;_i_++;_body_;_i_++;_body_;_i_++;_body_;_i_++;_body_;_i_++;_body_;_i_++;_body_;_i_++;_body_;_i_++};return l}].call(this,_iterations_)].replace({_i_:variable,_body_:body,_iterations_:iterations})])});caterwaul.configuration('opt',function (){this.configure('opt.unroll')});caterwaul.configuration('continuation.core',function (){this.shallow('continuation',{})}).tconfiguration('std','continuation.unwind',function (){this.configure('std.fn continuation.core').continuation/se[_.unwind_protect=function (escape,f){try {return f()}catch (e){return escape(e)}},_.unwind=function (e){throw e}];this.rmacro(qs[unwind_protect[_][_]],fn[escape,body][qse[_f(fb[e][_escape],fb_[_body])].replace({_f:qs[caterwaul.continuation.unwind_protect],_escape:escape,_body:body})]).rmacro(qs[unwind[_]],fn[e][qs[caterwaul.continuation.unwind(_e)].replace({_e:e})])}).tconfiguration('std','continuation.cps',function (){l*[cps_convert(v,f,b,bound)=qse[l[_=_c][_f]].replace({_c:caterwaul.macroexpand(qs[_f[_v][_b]].replace({_f:bound?qs[fb]:qs[fn]})).replace({_v:v.as('(')[0],_b:b}),_f:f}),l_cps_def(t,form,bound)=l[inductive(cs,v,f,b)=qs[l/cps[cs][_f]].replace({cs:cs,_f:cps_convert(v,f,b,bound)}),base(v,f,b)=cps_convert(v,f,b,bound)] in t.rmacro(qs[l/_form[_,_< -_] in _].replace({_form:form}),inductive).rmacro(caterwaul.parse('let/#{form.serialize()}[_, _ <- _] in _'),inductive).rmacro(qs[l/_form[_< -_] in _].replace({_form:form}),base).rmacro(caterwaul.parse('let/#{form.serialize()}[   _ <- _] in _'),base).rmacro(qs[l/_form[_,_< -_][_]].replace({_form:form}),inductive).rmacro(caterwaul.parse('let/#{form.serialize()}[_, _ <- _][_]'),inductive).rmacro(qs[l/_form[_< -_][_]].replace({_form:form}),base).rmacro(caterwaul.parse('let/#{form.serialize()}[   _ <- _][_]'),base),cps_def(t,form,bound)=t.rmacro(qs[_/_form[_]].replace({_form:form}),fn[f,b][qse[_f/_form._[_b]].replace({_form:form,_f:f,_b:b})]).rmacro(qs[_/_form._[_]].replace({_form:form}),fn[f,v,b][qse[l[_=_c][_f]].replace({_c:caterwaul.macroexpand(qs[_f[_v][_b]].replace({_f:bound?qs[fb]:qs[fn]})).replace({_v:v,_b:b}),_f:f})])] in this.configure('std.fn continuation.core')/se[cps_def(_,qs[cps],false),cps_def(_,qs[cpb],true),l_cps_def(_,qs[cps],false),l_cps_def(_,qs[cpb],true)]}).tconfiguration('std','continuation.delimited',function (){l[magic=this.configure('std.qg continuation.core').continuation.magic=this.magic('continuation.delimited')] in this.continuation/se[_.call_cc=function (f){var escaped=false,cc=function (x){escaped=true;throw x},frame={magic:magic,continuation:f,parameters:[cc]};try {while ((frame=frame.continuation.apply(this,frame.parameters))&&frame&&frame.magic===magic);return frame}catch (e){if (escaped)return e;else throw e}},_.call_tail()={magic:magic,continuation:this,parameters:arguments}];this.rmacro(qs[call/cc[_]],fn[f][qs[qg[caterwaul.continuation.call_cc.call(this,_f)]].replace({_f:f})]).rmacro(qs[call/tail[_(_)]],fn[f,args][qs[qg[caterwaul.continuation.call_tail.call(_f,_args)]].replace({_f:f,_args:args})])}).configuration('continuation',function (){this.configure('continuation.core continuation.unwind continuation.cps continuation.delimited')});caterwaul.tconfiguration('std','seq.core',function (){this.shallow('seq',{core:fn_[null]/se[_.prototype=[]/se.p[p.constructor=_]]})}).tconfiguration('std opt','seq.finite.core',function (){this.configure('seq.core').seq.finite=fc[xs][this.length=this.l=xs?opt.unroll[i,xs.size?xs.size():xs.length][this[i]=xs[i]]:0]/se.c[c.prototype=new this.seq.core()/se[_.size()=this.l||this.length,_.slice()=[]/se[opt.unroll[i,this.size()][_.push(this[i])]],_.constructor=c]]}).tconfiguration('std','seq.finite.serialization',function (){this.configure('seq.finite.core').seq.finite.prototype/se[_.toString()='seq[#{this.slice().join(", ")}]',_.join(x)=this.slice().join(x)]}).tconfiguration('std opt','seq.finite.mutability',function (){l[push=Array.prototype.push,slice=Array.prototype.slice] in this.configure('seq.finite.core').seq.finite.prototype/se[_.push()=l[as=arguments] in opt.unroll[i,as.length][this[this.l++]=as[i]]/re[this.length=this.l,this],_.pop()=this[ --this.l]/se[delete this[this.length=this.l]],_.concat(xs)=new this.constructor(this)/se[_.push.apply(_,slice.call(xs))]]}).tconfiguration('std','seq.finite.object',function (){l[own=Object.prototype.hasOwnProperty] in this.configure('seq.finite.core').seq.finite/se[_.keys(o,all)=new _()/se[(function (){for (var k in o)if (all||own.call(o,k))_.push(k)})()],_.values(o,all)=new _()/se[(function (){for (var k in o)if (all||own.call(o,k))_.push(o[k])})()],_.pairs(o,all)=new _()/se[(function (){for (var k in o)if (all||own.call(o,k))_.push([k,o[k]])})()],_.prototype.object(o)=(o||{})/se[this.each(fn[p][_[p[0]]=p[1]])]]}).tconfiguration('std opt','seq.finite.traversal',function (){this.configure('seq.finite.core seq.finite.mutability').seq.finite.prototype/se[_.map(f)=new this.constructor()/se[opt.unroll[i,this.l][_.push(f.call(this,this[i],i))]],_.filter(f)=new this.constructor()/se[opt.unroll[i,this.l][_.push(this[i]),when[f.call(this,this[i],i)]]],_.each(f)=this/se[opt.unroll[i,_.l][f.call(_,_[i],i)]],_.reversed()=new this.constructor()/se[l[l=this.l] in opt.unroll[i,l][_.push(this[l-i-1])]],_.flat_map(f)=new this.constructor()/se[this.each(fn[x,xi][(f.call(this,x,xi)/re.xs[xs.each?xs:new this.constructor(xs)]).each(fn[x][_.push(x)])])],_.foldl(f,x)=l[x=arguments.length>1?x:this[0],xi=2-arguments.length][opt.unroll[i,this.l-xi][x=f.call(this,x,this[i+xi],i+xi)],x,when[this.l>=xi]],_.foldr(f,x)=l[x=arguments.length>1?x:this[this.l-1],xi=3-arguments.length,l=this.l][opt.unroll[i,l-(xi-1)][x=f.call(this,this[l-(i+xi)],x,l-(i+xi))],x,when[l>=xi-1]]]}).tconfiguration('std opt','seq.finite.zip',function (){this.configure('seq.finite.traversal').seq.finite/se[_.prototype.zip()=l[as=new seq([this].concat(slice.call(arguments))),options={f:fn_[new seq(arguments)],outer:false}][caterwaul.util.merge(options,as.pop()),when[as[as.size()-1].constructor===Object],l[l=as.map(fn[x][x.size?x.size():x.length]).foldl(options.outer?fn[x,y][Math.max(x,y)]:fn[x,y][Math.min(x,y)]),f=options.f] in new this.constructor()/se[opt.unroll[i,l][_.push(f.apply({i:i},as.map(fn[x][x[i]]).slice()))]]],where[seq=_,slice=Array.prototype.slice]]}).tconfiguration('std opt continuation','seq.finite.quantification',function (){this.configure('seq.finite.core').seq.finite.prototype/se[_.exists(f)=call/cc[fb[cc][opt.unroll[i,this.l][f.call(this,this[i],i)/re[_&&cc(_)]],false]],_.forall(f)= !this.exists(fn_[ !f.apply(this,arguments)])]}).tconfiguration('std','seq.infinite.core',function (){this.configure('seq.core').seq.infinite=fn_[null]/se[_.prototype=new this.seq.core()/se[_.constructor=ctor],where[ctor=_]]/se[_.def(name,ctor,h,t)=i[name]=ctor/se[_.prototype=new i()/se[_.h=h,_.t=t,_.constructor=ctor]],where[i=_],_.def('cons',fn[h,t][this._h=h,this._t=t],fn_[this._h],fn_[this._t]),_.def('k',fn[x][this._x=x],fn_[this._x],fn_[this])]}).tconfiguration('std','seq.infinite.y',function (){this.configure('seq.infinite.core').seq.infinite.def('y',fc[f,x][this._f=f,this._x=x],fn_[this._x],fn_[new this.constructor(this._f,this._f(this._x))])}).tconfiguration('std continuation','seq.infinite.transform',function (){this.configure('seq.infinite.core').seq.infinite/se[_.prototype.map(f)=new _.map(f,this),_.def('map',fc[f,xs][this._f=f,this._xs=xs],fn_[this._f(this._xs.h())],fn_[new this.constructor(this._f,this._xs.t())]),_.prototype.filter(f)=new _.filter(f,this),_.def('filter',fc[f,xs][this._f=f,this._xs=l*[next(s)(cc)=f(s.h())?cc(s):call/tail[next(s.t())(cc)]] in call/cc[next(xs)]],fn_[this._xs.h()],fn_[new this.constructor(this._f,this._xs.t())])]}).tconfiguration('std continuation','seq.infinite.traversal',function (){l[finite=this.configure('seq.finite.core seq.finite.mutability').seq.finite] in this.configure('seq.infinite.core').seq.infinite.prototype/se[_.drop(f)=l*[next(s)(cc)=f(s.h())?call/tail[next(s.t())(cc)]:cc(s)] in call/cc[next(this)],_.take(f)=l*[xs=new finite(),next(s)(cc)=l[h=s.h()][f(h)?(xs.push(h),call/tail[next(s.t())(cc)]):cc(xs)]] in call/cc[next(this)]]}).tconfiguration('std opt','seq.numeric',function (){this.configure('seq.infinite.core seq.infinite.y seq.finite.core').seq/se[_.naturals_from(x)=new _.infinite.y(fn[n][n+1],x),_.naturals=_.naturals_from(0),_.n(l,u,s)=l[lower=arguments.length>1?l:0,upper=arguments.length>1?u:l][l[step=Math.abs(s||1)*(lower<upper?1: -1)] in new _.infinite.y(fn[n][n+step],lower).take(fn[x][(upper-lower)*(upper-x)>0])]]}).tconfiguration('std opt continuation','seq.dsl',function (){this.configure('seq.core seq.infinite.y seq.finite.core seq.finite.zip seq.finite.traversal seq.finite.mutability').seq.dsl=caterwaul.global().clone()/se[_.prefix_substitute(tree,prefix)=tree.rmap(fn[n][new n.constructor('#{prefix}#{n.data.substring(1)}'),when[n.data.charAt(0)==='_']]),_.define_functional(op,expansion,xs)=trees_for(op).map(fn[t,i][_.macro(t,fn[l,v,r][expansion.replace({_x:_.macroexpand(l),_y:i>=8?v:qs[fn[xs][y]].replace({fn:i&2?qs[fb]:qs[fn],xs:_.prefix_substitute(xs,i&1?v.data:'_'),y:(i&4?_.macroexpand:fn[x][x])(r||v)})})])]),_.define_functional/se[_('%',qs[_x.filter(_y)],qs[_,_i]),_('*',qs[_x.map(_y)],qs[_,_i]),_('/',qs[_x.foldl(_y)],qs[_,_0,_i]),_('%!',qs[_x.filter(c(_y))].replace({c:not}),qs[_,_i]),_('*!',qs[_x.each(_y)],qs[_,_i]),_('/!',qs[_x.foldr(_y)],qs[_,_0,_i]),_('&',qs[_x.forall(_y)],qs[_,_i]),_('|',qs[_x.exists(_y)],qs[_,_i]),_('-',qs[_x.flat_map(_y)],qs[_,_i]),_('>>',qs[_x.drop(_y)],qs[_]),_('<<',qs[_x.take(_y)],qs[_]),_('>>>',qs[new caterwaul.seq.infinite.y(_y,_x)],qs[_])],seq(qw('> < >= <= == !=')).each(fn[op][_.macro(qs[_+_].clone()/se[_.data=op],rxy(qs[qg[_x].size()+qg[_y].size()].clone()/se[_.data=op]))]),l[e(x)=_.macroexpand(x)] in _.macro/se[_(qs[_&&_],rxy(qse[qg[l[xp=_x][xp&&xp.size()?_y:xp]]])),_(qs[_||_],rxy(qse[qg[l[xp=_x][xp&&xp.size()?xp:_y]]])),_(qs[_===_],rxy(qs[qg[l[xp=_x,yp=_y][xp===yp||xp.size()===yp.size()&&xp.zip(yp).forall(fn[p][p[0]===p[1]])]]])),_(qs[_!==_],rxy(qs[qg[l[xp=_x,yp=_y][xp!==yp&&(xp.size()!==yp.size()||xp.zip(yp).exists(fn[p][p[0]!==p[1]]))]]])),_(qs[_^_],rxy(qs[_x.zip(_y)])),_(qs[_+_],rxy(qs[_x.concat(_y)])),_(qs[ !_],rxy(qs[_x.object()])),_(qs[_,_],rxy(qs[_x,_y])),_(qs[ ~_],rxy(qs[qg[new caterwaul.seq.finite(_x)]])),_(qs[_?_:_],fn[x,y,z][qs[x?y:z].replace({x:e(x),y:e(y),z:e(z)})]),l[rx(t)(x,y)=t.replace({_x:e(x),_y:y})][_(qs[_(_)],rx(qs[_x(_y)])),_(qs[_[_]],rx(qs[_x[_y]])),_(qs[_._],rx(qs[_x._y])),_(qs[_].as('('),rx(qs[qg[_x]]))],_(qs[ +_],fn[x][x]),l[rx(t)(x)=t.replace({x:x})][_(qs[N],fn_[qs[caterwaul.seq.naturals]]),_(qs[N[_]],rx(qs[caterwaul.seq.naturals_from(x)])),_(qs[n[_]],rx(qs[caterwaul.seq.n(x)]))],seq(qw('sk sv sp')).zip(qw('keys values pairs')).each(fb[p][_(qs[p[_]].replace({p:p[0]}),fn[x][qs[caterwaul.seq.finite.r(x)].replace({r:p[1],x:x})])])],this.rmacro(qs[seq[_]],_.macroexpand),where*[rxy(tree)(x,y)=tree.replace({_x:_.macroexpand(x),_y:y&&_.macroexpand(y)}),seq=fb[xs][new this.seq.finite(xs)],prepend(operator)(x)=qs[ -x].replace({x:x})/se[_.data=operator],tree_forms=l*[base=seq([qs[[_]],qs[_[_]]]),mod(fs,op)=fs.concat(fs.map(prepend(op)))] in mod(mod(base,'u-'),'u~').concat(seq([qs[ +_]])),template(op)(t)=qs[_+x].replace({x:t})/se[_.data=op],qw=caterwaul.util.qw,not=qs[qg[fn[f][fn_[ !f.apply(this,arguments)]]]],trees_for(op)=tree_forms/re[op.charAt(op.length-1)==='!'?_.map(prepend('u!')):_]/re[_.map(template(op.replace(/!$/,'')))]]]}).configuration('seq',function (){this.configure('seq.core seq.finite.core seq.finite.object seq.finite.mutability seq.finite.traversal seq.finite.zip seq.finite.quantification '+'seq.finite.serialization seq.infinite.core seq.infinite.y seq.infinite.transform seq.infinite.traversal '+'seq.numeric seq.dsl')});caterwaul.tconfiguration('std seq continuation memoize','parser.core',function (){this.namespace('parser')/se[_.parse_state(input,i,result,memo)=undefined/se[this.input=input,this.i=i,this.result=result,this.memo=memo],_.parse_state/se.s[s.from_input(input)=new _.parse_state(input,0,null,{}),s.prototype/se[_.accept(i,r)=new this.constructor(this.input,i,r,this.memo),_.has_input()=this.i<this.input.length,_.toString()='ps[#{this.input.substr(this.i)}, #{this.result}]']],_.memoize=caterwaul.memoize.from(fn[c,as,f][k in m?m[k]:(m[k]=f.apply(c,as)),where[k='#{f.original.memo_id}|#{as[0].i}',m=as[0].memo||(as[0].memo={})]]),_.promote_non_states(f)=fn[state][state instanceof _.parse_state?f.call(this,state):f.call(this,_.parse_state.from_input(state))/re[_&&_.result]],_.identify(f)=f/se[_.memo_id=caterwaul.gensym()],_.parser(f)=_.promote_non_states(_.memoize(_.identify(f))),_.defparser(name,f)=_.parsers[name]()=_.parser(f.apply(this,arguments)),_.parsers={}]}).tconfiguration('std seq continuation','parser.c',function (){this.configure('parser.core').parser.defparser('c',fn[x,l][x.constructor===String?fn[st][st.accept(st.i+x.length,x),when[x===st.input.substr(st.i,x.length)]]:x instanceof Array?l[index=index_entries(x)] in fn[st][check_index(index,st.input,st.i)/re[_&&st.accept(st.i+_.length,_)]]:x.constructor===RegExp?l[x=add_absolute_anchors_to(x)] in fn[st][fail_length(x,st.input,st.i,l)/re[_>l&&split_lengths(x,st.input,st.i,l,_)/re[st.accept(st.i+_,x.exec(st.input.substr(st.i,_)))]]]:x.constructor===Function?fn[st][x.call(st,st.input,st.i)/re[_&&st.accept(st.i+_,st.input.substr(st.i,_))]]:l[index=index_entries(seq[sk[x]])] in fn[st][check_index(index,st.input,st.i)/re[_&&st.accept(st.i+_.length,x[_])]],where*[check_index(i,s,p)=seq[i|[_['@#{s}']&&s,where[s=s.substr(p,_.length)]]],index_entries(xs)=l*[xsp=seq[ ~xs],ls=seq[sk[seq[ !(xsp*[[_.length,true]])]]*[Number(_)]]] in seq[ ~ls.slice().sort(fn[x,y][y-x])* ~l[ !(xsp%[_.length===l]*[['@#{_}',true]]+[['length',l]])]],add_absolute_anchors_to(x)=l[parts=/^\/(.*)\/(\w*)$/.exec(x.toString())] in new RegExp('^#{parts[1]}$',parts[2]),fail_length(re,s,p,l)=re.test(s.substr(p,l))?p+(l<<1)<=s.length?fail_length(re,s,p,l<<1):l<<1:l,split_lengths(re,s,p,l,u)=l*[b(l,u)=l+1<u?(l+(u-l>>1))/re.m[re.test(s.substr(p,m))?b(m,u):b(l,m)]:l] in b(l,u)]])}).tconfiguration('std opt seq continuation','parser.seq',function (){this.configure('parser.core').parser.defparser('seq',fn_[l[as=arguments] in fn[state][call/cc[fn[cc][opt.unroll[i,as.length][(state=as[i](state))?result.push(state.result):cc(false)],state.accept(state.i,result)]],where[result=[]]]])}).tconfiguration('std seq','parser.alt',function (){this.configure('parser.core').parser.defparser('alt',fn_[l[as=seq[ ~arguments]] in fn[state][seq[as|[_(state)]]]])}).tconfiguration('std opt seq continuation','parser.times',function (){this.configure('parser.core').parser.defparser('times',fn[p,lower,upper][fn[state][call/cc[fn[cc][opt.unroll[i,lower][ ++count,(state=p(state))?result.push(state.result):cc(false)],true]]&&call/cc[l*[loop(cc)=( !upper||count++<upper)&&state.has_input()&&p(state)/se[state=_,when[_]]?result.push(state.result)&&call/tail[loop(cc)]:cc(state.accept(state.i,result))] in loop],where[count=0,result=[]]]])}).tconfiguration('std seq continuation','parser.opt',function (){this.configure('parser.core').parser.defparser('opt',fn[p][fn[state][state.accept(n,r),where*[s=p(state),n=s?s.i:state.i,r=s&&s.result]]])}).tconfiguration('std seq continuation','parser.match',function (){this.configure('parser.core').parser/se[_.defparser('match',fn[p][fn[state][p(state)/re[_&&state.accept(state.i,state.result)]]]),_.defparser('reject',fn[p][fn[state][p(state)/re[ !_&&state.accept(state.i,null)]]])]}).tconfiguration('std seq continuation','parser.bind',function (){this.configure('parser.core').parser/se[_.defparser('bind',fn[p,f][fn[state][p(state)/re[_&&_.accept(_.i,f.call(_,_.result))]]])]}).tconfiguration('std seq continuation','parser.dsl',function (){this.configure('parser.core').rmacro(qs[peg[_]],fn[x][qs[qg[l*[_bindings][_parser]]].replace({_bindings:new this.syntax(',',seq[sp[this.parser.parsers]*[qs[_x=_y].replace({_x:_[0],_y:new outer.ref(_[1])})]]),_parser:this.parser.dsl.macroexpand(x)}),where[outer=this]]),this.parser.dsl=caterwaul.global().clone()/se.dsl[dsl.macro/se[_(qs[_(_)],fn[x,y][qs[_x(_y)].replace({_x:e(x),_y:y})]),_(qs[_/_],fb('/','alt')),_(qs[_%_],fb('%','seq')),_(qs[_>>_],b('bind')),_(qs[[_]],u('opt')),_(qs[_].as('('),fn[x][e(x).as('(')]),_(qs[_[_]],fn[x,l][qs[times(_x,_l)].replace({_x:e(x),_l:l})]),_(qs[_[_,_]],fn[x,l,u][qs[times(_x,_l,_u)].replace({_x:e(x),_l:l,_u:u})]),where*[e=dsl.macroexpand,fb(op,name)(x,y)=qs[_name(_x,_y)].replace({_name:name,_x:x.flatten(op).map(e)/se[_.data=','],_y:e(y)}),b(name)(x,y)=qs[_name(_x,_y)].replace({_name:name,_x:e(x),_y:y}),u(name)(x)=qs[_name(_x)].replace({_name:name,_x:e(x)})]]]}).configuration('parser',function (){this.configure('parser.core parser.c parser.seq parser.alt parser.times parser.opt parser.match parser.bind parser.dsl')});