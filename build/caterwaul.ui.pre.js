caterwaul.words(caterwaul.js() ) (function($) {$.jquery(caterwaul_function) =caterwaul_function-se-it.modifiers.push(given.match in this(jquery_expand(anon_pattern.replace( {_x:match._expression} ) ) ) -when[match._modifier.data=== 'jquery' ] ) -where[anon_pattern=anon( 'J[_x]' ) ,jquery_expand=$.expander(jquery_macros.concat(string_macros) .concat(search_macros) ) ] ,where[jq= 'jQuery' ,anon=$.anonymizer( 'J' , 'TS' , 'S' , 'P' , 'PS' ) ,rule(p,e) =$.replacer(anon(p) ,e.constructor===Function?this(e.call(this,match) ) -given.match:anon(e) ) ,hyphenate(s) =s.replace( /_/g , '-' ) ,p=where[p_pattern=anon( 'P[_thing]' ) ]in p_pattern.replace( {_thing:node} ) -given.node,jquery_macros= [rule( 'J[_element]' ,given.match[match._element.is_constant() ||match._element.length?wrap_in_jquery(match) :become_dom_node(match) ] -where[dom_node_template=anon( '#{jq}(TS[_element])' ) ,jquery_template=anon( '#{jq}("<span>" + (_element) + "</span>")' ) ,become_dom_node(match) =dom_node_template.replace(match) ,wrap_in_jquery(match) =jquery_template.replace(match) ] ) ,rule( 'J[_element._class]' , 'J[_element].addClass(S[_class])' ) ,rule( 'J[_element *_attr(_val)]' , 'J[_element].attr(S[_attr], _val)' ) ,rule( 'J[_element *!_name(_val)]' , 'J[_element].data(S[_name], _val)' ) ,rule( 'J[_element /_method(_args)]' , 'J[_element]._method(_args)' ) ,rule( 'J[_element /!_event(_args)]' , 'J[_element].bind(S[_event], _args)' ) ,rule( 'J[_element %_function]' , '_function(J[_element])' ) ,rule( 'J[_element(_children)]' , 'J[_element].append(J[_children])' ) ,rule( 'J[_element[_children]]' , 'J[_element].append(_children)' ) ,rule( 'J[_element > _child]' , 'J[_element].append(J[_child])' ) ,rule( 'J[_element >= _child]' , 'J[_element].append(_child)' ) ,rule( 'J[_element1, _element2]' , 'J[_element1].add(J[_element2])' ) ,rule( 'J[_element1 + _element2]' , 'J[_element1].add(J[_element2])' ) ,rule( 'J[_element >> _pattern]' , 'J[_element].filter(PS[_pattern])' ) ,rule( 'J[_element >>> _pattern]' , 'J[_element].find(PS[_pattern])' ) ,rule( 'J[_element << _pattern]' , 'J[_element].parents(PS[_pattern])' ) ,rule( 'J[(_element)]' , '(J[_element])' ) ,rule( 'J[[_element]]' , '[J[_element]]' ) ,rule( 'J[+_expression]' , '_expression' ) ] ,string_macros= [rule( 'TS[_identifier]' ,string( '<#{hyphenate(match._identifier.data)}>' ) -given.match) ,rule( 'S[_identifier]' ,string(hyphenate(match._identifier.data) ) -given.match) ,rule( 'PS[_identifier]' ,string(expand(p(match._identifier) ) .data) -given.match) ] -where[string(s) =new $.syntax( '"' +s.replace( /\\/g , '\\\\' ) .replace( /"/g , '\\"' ) + '"' ) ] ,search_macros= [rule( 'P[_element]' ,new $.syntax(hyphenate(match._element.data-re[it=== '_' ? '*' :it] ) ) -given.match) ,rule( 'P[_element._class]' ,new $.syntax( '#{this(p(match._element)).data}.#{hyphenate(match._class.data)}' ) -given.match) ,rule( 'P[_element[_attributes]]' ,new $.syntax( '#{this(p(match._element)).data}[#{this(p(match._attributes))}]' ) -given.match) ,rule( 'P[_attribute = _value]' ,new $.syntax( '#{this(p(match._attribute)).data}="#' + '{' +interpolated(match._value) + '}"' ) -given.match) ,rule( 'P[(_element)]' , 'P[_element]' ) ,rule( 'P[_element1 +   _element2]' ,binary( ', ' ) ) ,rule( 'P[_element1,    _element2]' ,binary( ', ' ) ) ,rule( 'P[_element1 >>  _element2]' ,binary( ' ' ) ) ,rule( 'P[_element1 >>> _element2]' ,binary( ' ' ) ) ,rule( 'P[_element1 >   _element2]' ,binary( ' > ' ) ) ,rule( 'P[_element1(_element2)]' ,binary( ' > ' ) ) ,rule( 'P[_element /_selector]' ,new $.syntax( '#{expand(p(match._element)).data}:#{hyphenate(match._selector.data)}' ) -given.match) ,rule( 'P[_element /_selector(_value)]' ,new $.syntax( '#{expand(p(match._element)).data}:#{hyphenate(match._selector.data)}("#' + '{' +interpolated(match._value) + '}")' ) -given.match) ] -where[interpolated(node) = '(#{node.toString()}).replace(/(\\)/g, "$1$1").replace(/(")/g, "\\$1")' ,binary(op) (match) =new $.syntax( '#{expand(p(match._element1)).data}#{op}#{expand(p(match._element2)).data}' ) ] ] } ) (caterwaul) ;
caterwaul.js_ui=function(existing) {var js=this.js() ;
return this.clone() .macros(existing.macros() ,this.jquery_macro(js) ) } ;
