#!/bin/bash
sdoc -p . lib test

function start() {
  echo starting $*
}

function pass-or-fail() {
  local return_code=$?
  if [[ $? -eq 0 ]]; then echo pass $* >> .test-log
  else                    echo fail $* >> .test-log
                          echo -e "\033[1;31mfail $*\033[0;0m:"; fi
  return $return_code
}

function run-rhino() {
  start rhino $*
  egrep -vh '^\s*//' "$@" > tmp.js
  rhino tmp.js
  pass-or-fail rhino $* && rm -f tmp.js
}

function run-v8() {
  start v8 $*
  d8 "$@"
  pass-or-fail v8 $*
}

if [[ $1 == clean ]]; then
  rm -f test/*.js *.js
  exit
fi

if [[ $1 == fast || $1 == v8 ]]; then
  no_rhino=yes
  no_min=yes
  shift
fi

node lib/minify.js < caterwaul.js > caterwaul.min.js

if [[ $1 == loc ]]; then
  echo "Total LOC/chars:   $(cat test/*.js caterwaul.js | wc -lm)"
  echo "Comment LOC/chars: $(grep '//' < caterwaul.js | wc -lm)"
  echo "Source LOC/chars:  $(grep -v '//' < caterwaul.js | grep -v '^$' | wc -lm)"
  echo "Test SLOC/chars:   $(cat test/*.js | grep -v '//' | grep -v '^$' | wc -lm)"
  echo "GZip bytes: $(gzip  -c9 caterwaul.min.js | wc -c)"
  exit
fi

rm -f .test-log
for file in test/$1*.js; do
                                          run-v8    caterwaul.js     lib/unit.js $file
  [[ -z "$no_min" ]]                   && run-v8    caterwaul.min.js lib/unit.js $file
  [[ -z "$no_rhino" ]]                 && run-rhino caterwaul.js     lib/unit.js $file
  [[ -z "$no_rhino" && -z "$no_min" ]] && run-rhino caterwaul.min.js lib/unit.js $file
done

grep '^fail' .test-log && $0 clean
echo
