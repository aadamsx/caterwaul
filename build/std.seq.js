caterwaul.module( 'std.seq' ,function($) { (function( ) {var anon=$.anonymizer( 'S' ) ,rule=function(p,e) {;
return $.rereplacer(p.constructor===String?anon(p) :p,e.constructor===String?anon(e) :e) } ,operator_macros= (function( ) {var loop_anon=$.anonymizer( 'x' , 'y' , 'i' , 'j' , 'l' , 'lj' , 'r' , 'o' , 'k' ) ,scope=anon( '(function (_xs) {var _x, _x0, _xi, _xl, _xr; _body}).call(this, S[_s])' ) ,scoped=function( /* unary , node */t) {;
return scope.replace( {_body:t} ) } ,expand=function( /* unary , node */s) {;
return s.replace( /@/g , 'Array.prototype.slice.call' ) .replace( /#/g , 'Object.prototype.hasOwnProperty.call' ) .replace( /%%/g , '.constructor' ) } ,form=function( /* unary , node */x) {;
return loop_anon( /* unary , node */scoped( /* unary , node */anon( /* unary , node */expand( /* unary , node */x) ) ) ) } ,map=form( 'for (var _xr = new _xs%%(), _xi = 0, _xl = _xs.length; _xi < _xl; ++_xi) _x = _xs[_xi], _xr.push((_f));               return _xr' ) ,each=form( 'for (var                    _xi = 0, _xl = _xs.length; _xi < _xl; ++_xi) _x = _xs[_xi], (_f);                         return _xs' ) ,flatmap=form( 'for (var _xr = new _xs%%(), _xi = 0, _xl = _xs.length; _xi < _xl; ++_xi) _x = _xs[_xi], _xr.push.apply(_xr, @((_f))); return _xr' ) ,iterate=form( 'for (var _x = _xs, _xi = 0, _x0, _xl;              _x0 = (_init); ++_xi) _x = (_f);                                   return _x' ) ,filter=form( 'for (var _xr = new _xs%%(), _xi = 0, _xl = _xs.length, _x0;     _xi < _xl; ++_xi) _x = _xs[_xi], (_f) && _xr.push(_x);        return _xr' ) ,filter_not=form( 'for (var _xr = new _xs%%(), _xi = 0, _xl = _xs.length, _x0;     _xi < _xl; ++_xi) _x = _xs[_xi], (_f) || _xr.push(_x);        return _xr' ) ,map_filter=form( 'for (var _xr = new _xs%%(), _xi = 0, _xl = _xs.length, _x0, _y; _xi < _xl; ++_xi) _x = _xs[_xi], (_y = (_f)) && _xr.push(_y); return _xr' ) ,imap_filter=form( 'for (var _xr = new _xs%%(), _xi = 0, _xl = _xs.length, _x0; _xi < _xl; ++_xi) _x = _xs[_xi], (_x0 = (_init)) && _xr.push(_f); return _xr' ) ,foldl=form( 'for (var _x0 = _xs[0], _xi = 1, _xl = _xs.length;            _xi < _xl; ++_xi) _x = _xs[_xi], _x0 = (_f); return _x0' ) ,foldr=form( 'for (var _xl = _xs.length, _xi = _xl - 2, _x0 = _xs[_xl - 1]; _xi >= 0; --_xi) _x = _xs[_xi], _x0 = (_f); return _x0' ) ,unfold=form( 'for (var _xr = [], _x = _xs, _xi = 0;                      _x !== null; ++_xi) _xr.push(_x), _x = (_f);   return _xr' ) ,ifoldl=form( 'for (var _x0 = (_init), _xi = 0, _xl = _xs.length;      _xi < _xl; ++_xi) _x = _xs[_xi], _x0 = (_f);     return _x0' ) ,ifoldr=form( 'for (var _xl = _xs.length - 1, _xi = _xl, _x0 = (_init); _xi >= 0; --_xi) _x = _xs[_xi], _x0 = (_f);     return _x0' ) ,iunfold=form( 'for (var _xr = [], _x = _xs, _xi = 0, _x0;          _x0 = (_init); ++_xi) _xr.push(_x), _x = (_f);       return _xr' ) ,exists=form( 'for (var _x = _xs[0], _xi = 0, _xl = _xs.length, x; _xi < _xl; ++_xi) {_x = _xs[_xi]; if (x = (_f)) return x} return false' ) ,not_exists=form( 'for (var _x = _xs[0], _xi = 0, _xl = _xs.length, x; _xi < _xl; ++_xi) {_x = _xs[_xi]; if (x = (_f)) return false} return true' ) ,concat=anon( '(S[_xs]).concat((S[_ys]))' ) ,zip=form( 'for (var _xr = (S[_ys]), pairs = [], i = 0, l = _xs.length; i < l; ++i) pairs.push([_xs[i], _xr[i]]); return pairs' ) ,cross=form( 'for (var _xr = (S[_ys]), pairs = [], i = 0, l = _xs.length, lj = _xr.length; i < l; ++i) ' + 'for (var j = 0; j < lj; ++j) pairs.push([_xs[i], _xr[j]]);' + 'return pairs' ) ,kmap=form( 'var _xr = new _xs%%();  for (var _x in _xs) if (#(_xs, _x)) _xr[_f] = _xs[_x]; return _xr' ) ,keach=form( '                        for (var _x in _xs) if (#(_xs, _x)) _f;                return _xs' ) ,kfilter=form( 'var _xr = new _xs%%();    for (var _x in _xs) if (#(_xs, _x) &&      (_f))  _xr[_x] = _xs[_x]; return _xr' ) ,kfilter_not=form( 'var _xr = new _xs%%();    for (var _x in _xs) if (#(_xs, _x) &&    ! (_f))  _xr[_x] = _xs[_x]; return _xr' ) ,kmap_filter=form( 'var _xr = new _xs%%(), x; for (var _x in _xs) if (#(_xs, _x) && (x = (_f))) _xr[x]  = _xs[_x]; return _xr' ) ,vmap=form( 'var _xr = new _xs%%();    for (var  k in _xs) if (#(_xs, k)) _x = _xs[k], _xr[k] = (_f); return _xr' ) ,veach=form( '                          for (var  k in _xs) if (#(_xs, k)) _x = _xs[k], _f;            return _xs' ) ,vfilter=form( 'var _xr = new _xs%%();    for (var  k in _xs) if (#(_xs, k)) _x = _xs[k],        (_f) && (_xr[k] = _x); return _xr' ) ,vfilter_not=form( 'var _xr = new _xs%%();    for (var  k in _xs) if (#(_xs, k)) _x = _xs[k],        (_f) || (_xr[k] = _x); return _xr' ) ,vmap_filter=form( 'var _xr = new _xs%%(), x; for (var  k in _xs) if (#(_xs, k)) _x = _xs[k], x = (_f), x && (_xr[k] =  x); return _xr' ) ;
return( (function( ) {var unrecognized=function( /* unary , node */reason) {;
return(function( ) {throw new Error(reason) } ) .call(this) } ,use_form=function(form,xs,body,init,vars) {;
return form?form.replace( {_f:body,_init:init} ) .replace($.merge( {_s:xs} ,vars) ) :unrecognized( ( 'unsupported sequence operator or modifiers used on ' + (body) + '' ) ) } ,operator_case=function( /* unary , node */forms) {;
return function( /* unary , node */match) {;
return(function( ) {var xs=match._xs,expander=this,form_function=function( /* unary , node */form) {;
return function(body,vars) {;
return use_form(form,xs,body,null,vars) } } ,iform_function=function( /* unary , node */form) {;
return function(body,init,vars) {;
return use_form(form,xs,body,init,vars) } } ,use=function(form,iform) {;
return function( /* unary , node */body) {;
return parse_body(body,expander,form_function(form) ,iform_function(iform) ) } } ;
return(parse_modifiers(match._thing,use(forms.normal,forms.inormal) ,use(forms.bang,forms.ibang) ,use(forms.tbang,forms.itbang) ) ) } ) .call(this) } } ,handle_map_forms=operator_case( {normal:map,bang:each,tbang:flatmap,itbang:iterate} ) ,handle_filter_forms=operator_case( {normal:filter,bang:filter_not,tbang:map_filter,itbang:imap_filter} ) ,handle_fold_forms=operator_case( {normal:foldl,bang:foldr,tbang:unfold,inormal:ifoldl,ibang:ifoldr,itbang:iunfold} ) ,handle_kmap_forms=operator_case( {normal:kmap,bang:keach} ) ,handle_kfilter_forms=operator_case( {normal:kfilter,bang:kfilter_not,tbang:kmap_filter} ) ,handle_vmap_forms=operator_case( {normal:vmap,bang:veach} ) ,handle_vfilter_forms=operator_case( {normal:vfilter,bang:vfilter_not,tbang:vmap_filter} ) ,handle_exists_forms=operator_case( {normal:exists,bang:not_exists} ) ,block=anon( '[_x]' ) ,block_with_variable=anon( '_var[_x]' ) ,block_with_init=anon( '[_init][_x]' ) ,block_with_variable_and_init=anon( '_var[_init][_x]' ) ,block_with_closure=anon( '+_x' ) ,block_with_seq=anon( '~_x' ) ,standard_names= {_x: 'x' ,_x0: 'x0' ,_xi: 'xi' ,_xl: 'xl' ,_xs: 'xs' ,_xr: 'xr' } ,prefixed_names=function( /* unary , node */p) {;
return{_x:p,_x0: ( '' + (p) + '0' ) ,_xi: ( '' + (p) + 'i' ) ,_xl: ( '' + (p) + 'l' ) ,_xs: ( '' + (p) + 's' ) ,_xr: ( '' + (p) + 'r' ) } } ,function_promotion=anon( '(_f).call({_x0: _x0, _xi: _xi, _xl: _xl, _xs: _xs, _xr: _xr}, _x)' ) ,promote_function=function( /* unary , node */f) {;
return function_promotion.replace( {_f:f} ) } ,closure_wrapper=anon( '(function (_x, _x0, _xi, _xl, _xs, _xr) {return _f}).call(this, _x, _x0, _xi, _xl, _xs, _xr)' ) ,close_body=function(vars,f) {;
return closure_wrapper.replace(vars) .replace( {_f:f} ) } ,seq_pattern=anon( 'S[_x]' ) ,promote_seq=function( /* unary , node */f) {;
return seq_pattern.replace( {_x:f} ) } ,parse_body=function(tree,expand,normal,init) {;
return(function( ) {var in_sequence_context=function( /* unary , node */f) {;
return expand.call(expand,promote_seq(f) ) } ,sequence_context_normal=function(f,names) {;
return normal(in_sequence_context(f) ,names) } ,sequence_context_init=function(f,init_expression,names) {;
return init(in_sequence_context(f) ,init_expression,names) } ,wrapping_normal=function(f,names) {;
return normal(close_body(names,f) ,names) } ,wrapping_init=function(f,init_expression,names) {;
return init(close_body(names,f) ,init_expression,names) } ,r=null;
return( ( (r=block_with_seq.match(tree) ) ?parse_body(r._x,expand,sequence_context_normal,sequence_context_init) : (r=block_with_closure.match(tree) ) ?parse_body(r._x,expand,wrapping_normal,wrapping_init) : (r=block_with_variable_and_init.match(tree) ) ?init(r._x,r._init,prefixed_names(r._var) ) : (r=block_with_init.match(tree) ) ?init(r._x,r._init,standard_names) : (r=block_with_variable.match(tree) ) ?normal(r._x,prefixed_names(r._var) ) : (r=block.match(tree) ) ?normal(r._x,standard_names) :normal(promote_function(tree) ,standard_names) ) ) } ) .call(this) } ,tbang_modifier=anon( '~!_x' ) ,bang_modifier=anon( '!_x' ) ,parse_modifiers=function(tree,normal,bang,tbang) {;
return(function( ) {var result=null;
return( ( (result=tbang_modifier.match(tree) ) ?tbang(result._x) : (result=bang_modifier.match(tree) ) ?bang(result._x) :normal(tree) ) ) } ) .call(this) } ;
return( [rule( 'S[_x]' , '_x' ) ,rule( 'S[_xs + _ys]' ,concat) ,rule( 'S[_xs ^ _ys]' ,zip) ,rule( 'S[_xs - _ys]' ,cross) ,rule( 'S[(_x)]' , '(S[_x])' ) ,rule( 'S[_x[_y]]' , 'S[_x][_y]' ) ,rule( 'S[_xs(_ys)]' , 'S[_xs](_ys)' ) ,rule( 'S[[_x]]' , '[_x]' ) ,rule( 'S[_x, _y]' , 'S[_x], S[_y]' ) ,rule( 'S[_xs._p]' , 'S[_xs]._p' ) ,rule( 'S[~[_x]]' , '[S[_x]]' ) ,rule( 'S[~_xs(_ys)]' , 'S[_xs](S[_ys])' ) ,rule( 'S[_x ? _y : _z]' , '(S[_x]) ? (S[_y]) : (S[_z])' ) ,rule( 'S[_x && _y]' , '(S[_x]) && (S[_y])' ) ,rule( 'S[_x || _y]' , '(S[_x]) || (S[_y])' ) ,rule( 'S[+_xs]' , 'Array.prototype.slice.call((_xs))' ) ,rule( 'S[_xs %_thing]' ,handle_filter_forms) ,rule( 'S[_xs *_thing]' ,handle_map_forms) ,rule( 'S[_xs /_thing]' ,handle_fold_forms) ,rule( 'S[_xs |_thing]' ,handle_exists_forms) ,rule( 'S[_xs %k*_thing]' ,handle_kmap_forms) ,rule( 'S[_xs %v*_thing]' ,handle_vmap_forms) ,rule( 'S[_xs %k%_thing]' ,handle_kfilter_forms) ,rule( 'S[_xs %v%_thing]' ,handle_vfilter_forms) ] ) } ) .call(this) ) } ) .call(this) ,word_macros= (function( ) {var n=function( /* unary , node */match) {;
return n_pattern.replace($.merge( {_lower: '0' ,_step: '1' } ,match) ) } ,ni=function( /* unary , node */match) {;
return ni_pattern.replace($.merge( {_lower: '0' ,_step: '1' } ,match) ) } ,n_pattern=anon( '(function (i, u, s) {if ((u - i) * s <= 0) return [];' + 'for (var r = [], d = u - i; d > 0 ? i <  u : i >  u; i += s) r.push(i); return r})((_lower), (_upper), (_step))' ) ,ni_pattern=anon( '(function (i, u, s) {if ((u - i) * s <= 0) return [];' + 'for (var r = [], d = u - i; d > 0 ? i <= u : i >= u; i += s) r.push(i); return r})((_lower), (_upper), (_step))' ) ,scope=anon( '(function (o) {_body}).call(this, (S[_o]))' ) ,scoped=function( /* unary , node */t) {;
return scope.replace( {_body:t} ) } ,form=function( /* unary , node */p) {;
return(function( ) {var tree=scoped(anon(p) ) ;
return( (function(match) {return tree.replace(match) } ) ) } ) .call(this) } ,keys=form( 'var ks = []; for (var k in o) Object.prototype.hasOwnProperty.call(o, k) && ks.push(k); return ks' ) ,values=form( 'var vs = []; for (var k in o) Object.prototype.hasOwnProperty.call(o, k) && vs.push(o[k]); return vs' ) ,pairs=form( 'var ps = []; for (var k in o) Object.prototype.hasOwnProperty.call(o, k) && ps.push([k, o[k]]); return ps' ) ,object=form( 'for (var r = {}, i = 0, l = o.length, x; i < l; ++i) x = o[i], r[x[0]] = x[1]; return r' ) ;
return( [rule( 'S[n[_upper]]' ,n) ,rule( 'S[ni[_upper]]' ,ni) ,rule( 'S[_o /keys]' ,keys) ,rule( 'S[_o |object]' ,object) ,rule( 'S[n[_lower, _upper]]' ,n) ,rule( 'S[ni[_lower, _upper]]' ,ni) ,rule( 'S[_o /values]' ,values) ,rule( 'S[_o -object]' ,object) ,rule( 'S[n[_lower, _upper, _step]]' ,n) ,rule( 'S[ni[_lower, _upper, _step]]' ,ni) ,rule( 'S[_o /pairs]' ,pairs) ,rule( 'S[_o /object]' ,object) ] ) } ) .call(this) ;
return($.seq=function( /* unary , node */caterwaul_function) {;
return(function( ) {var anon_pattern=anon( 'S[_x]' ) ,seq_expand=$($.alternatives(operator_macros.concat(word_macros) ) ) ;
return( (function(it) {return(it.modifiers.seq=function( /* unary , node */match) {;
return(function(it) {return( ( (it) && (this(it) ) ) ) } ) .call(this, (seq_expand.call(seq_expand,anon_pattern.replace( {_x:match._expression} ) ) ) ) } ) ,it} ) .call(this, (caterwaul_function) ) ) } ) .call(this) } ) } ) .call(this) } ) ;
