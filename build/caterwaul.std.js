// Caterwaul standard library | Spencer Tipping
// Licensed under the terms of the MIT source code license

  caterwaul.module('std.all-bundle', function ($) {$.all = []});

// Internal libraries.
// These operate on caterwaul in some way, but don't necessarily have an effect on generated code.

// Macro authoring utilities | Spencer Tipping
// Licensed under the terms of the MIT source code license

// Macro definitions.
// A macro is simply a partial function from source trees to source trees. It returns a falsy value if it cannot be applied to a given tree; otherwise it returns the replacement (as shown
// above). Because most macros end up replacing one pattern with another, caterwaul lets you use strings instead of requiring you to construct recognizer functions.

// The expander() method distributes across arrays. That is, you can give it an array of things that can be converted into expanders (strings, functions, syntax trees, or arrays), and it will
// build a function that runs backwards through the array, taking the last entry.

caterwaul.module ('std.macro', function ($) {
  var syntax_manipulator = function (base_case) {
    var result = function (x) {if (x.constructor === Array) {for (var i = 0, l = x.length, ys = [ ]; i < l; ++i) ys.push (result (x [i]));
                                                             return function (tree) {for (var i = ys.length - 1, r; i >= 0; --i) if (r = ys [i].call (this, tree)) return r}}

                          else return x.constructor === String   ? result ($.parse (x)):
                                      x.constructor === $.syntax ? base_case.call (this, x): x};
    return result};

  $.pattern      = syntax_manipulator (function (pattern)     {return function (tree)  {return pattern.match (tree)}});
  $.expander     = syntax_manipulator (function (expander)    {return function (match) {return expander.replace (match)}});
  $.alternatives = syntax_manipulator (function (alternative) {throw new Error ('must use replacer functions with caterwaul.alternatives()')});

  $.reexpander   = function (expander) {var e = $.expander (expander);
                                        return function (match) {var r = e.call (this, match); return r && this (r)}};

  var composer = function (expander_base_case) {
    return function (pattern, expander) {var new_pattern = $.pattern (pattern), new_expander = expander_base_case (expander);
                                         return function (tree) {var match = new_pattern.call (this, tree); return match && new_expander.call (this, match)}}};

  $.replacer   = composer ($.expander);
  $.rereplacer = composer ($.reexpander);

// Global macroexpansion.
// This is a shorthand to enable one-off macroexpansion. The idea is that we build a temporary caterwaul function to do some temporary work.

  $.macroexpand = function (tree) {return $ ($.alternatives (Array.prototype.slice.call (arguments, 1))) (tree)}}); 

// Generated by SDoc
 caterwaul . module ('std.anon' , function ($) { 
  $.anonymizer =  function (  ) {   var xs =  arguments ; return  ( function ( ) { var table =   +xs *~![x.constructor === Array ? x: x.split (' ')] *[[x, $.gensym (x)]] /object ; return  function ( _) { return  ( ($) .parse (  _)) .replace (  table)}}) . call ( this)}}) ; 

// Language specializations.
// These provide configurations that specialize caterwaul to operate well with a given programming language. This is relevant because not all languages compile to Javascript the same way, and
// caterwaul should be able to adapt to the syntactic limitations of generated code (and thus be usable with non-Javascript languages like Coffeescript).

// Also included is a standard set of words that can be combined with the Javascript forms to produce useful macros. Together these form a base language that is used by other parts of the
// standard library.

 caterwaul . module ('std.js' ,(function ( qs , qs1 , qs2 , qs3 , qs4 , qs5 , qs6 , qs7 , qs8 , qs9 , qsa , qsb , qsc , qsd , qse , qsf , qsg , qsh , qsi , qsj , qsk , qsl , qsm , qsn) {var result1=( function ($) {

// Structured forms in Javascript.
// These aren't macros, but forms. Each language has its own ways of expressing certain idioms; in Javascript we can set up some sensible defaults to make macros more consistent. For example,
// caterwaul pre-1.0 had the problem of wildly divergent macros. The fn[] macro was always prefix and required parameters, whereas /se[] was always postfix and had a single optional parameter.
// /cps[] was similarly postfix, which was especially inappropriate considering that it could theoretically handle multiple parameters.

// In caterwaul 1.0, the macro author's job is reduced to specifying which words have which behavior; the language driver takes care of the rest. For instance, rather than specifying the full
// pattern syntax, you just specify a word and its definition with respect to an opaque expression and perhaps set of modifiers. Here are the standard Javascript macro forms:

  $.js = function (macroexpander) {

// Javascript-specific shorthands.
// Javascript has some syntactic weaknesses that it's worth correcting. These don't relate to any structured macros, but are hacks designed to make JS easier to use.

  // String interpolation.
//   Javascript normally doesn't have this, but it's straightforward enough to add. This macro implements Ruby-style interpolation; that is, "foo#{bar}" becomes "foo" + bar. A caveat (though not
//   bad one in my experience) is that single and double-quoted strings are treated identically. This is because Spidermonkey rewrites all strings to double-quoted form.

  // This version of string interpolation is considerably more sophisticated than the one implemented in prior versions of caterwaul. It still isn't possible to reuse the same quotation marks
//   used on the string itself, but you can now include balanced braces in the interpolated text. For example, this is now valid:

  // | 'foo #{{bar: "bif"}.bar}'

  // There are some caveats; if you have unbalanced braces (even in substrings), it will get confused and misread the boundary of your text. So stuff like this won't work properly:

  // | 'foo #{"{" + bar}'          // won't find the ending properly and will try to compile the closing brace

    var string_interpolator = function (node) {
      var s = node.data, q = s.charAt (0), syntax = $.syntax;
      if (q !== '\'' && q !== '"' || ! /#\{[^\}]+\}/.test (s)) return false;             // DeMorgan's applied to (! ((q === ' || q === ") && /.../test(s)))

      for (var pieces = [ ], is_code = [ ], i = 1, l = s.length - 1, brace_depth = 0, got_hash = false, start = 1, c; i < l; ++i)
        if (brace_depth) if ((c = s.charAt (i)) === '}') --brace_depth || (pieces.push (s.substring (start, i)), is_code.push (true)) && (start = i + 1), got_hash = false;
                    else                                brace_depth += c === '{';
   else                  if ((c = s.charAt (i)) === '#') got_hash = true;
                    else if (c === '{' && got_hash)     pieces.push (s.substring (start, i - 1)), is_code.push (false), start = i + 1, ++brace_depth;
                    else                                got_hash = false;

      pieces.push (s.substring (start, l)), is_code.push (false);

      for (var quoted = new RegExp ('\\\\' + q, 'g'), i = 0, l = pieces.length; i < l; ++i) pieces [i] = is_code [i] ? this ($.parse (pieces [i].replace (quoted, q)).as ('(')):
                                                                                                                    new syntax (q + pieces [i] + q);
      return new syntax ('+', pieces).unflatten ( ).as ('(')};

  // Destructuring function creation.
//   This is a beautiful hack made possible by Internet Explorer. We can intercept cases of assigning into a function and rewrite them to create a function body. For example, f(x) = y becomes the
//   regular assignment f = function (x) {return y}. Because this macro is repeatedly applied we get currying for free.

  // You can put non-formal expressions into the argument list. There are, in fact, three kinds of things you can use:

  // | 1. Formal parameters -- these are transcribed literally into the compiled function's argument list.
//     2. Before-result side effects -- these are compiled into local variables or statements prior to executing the function body.
//     3. After-result side effects -- these are compiled into statements after executing the function body; the function's result is in scope as a variable called 'result'.

  // The general form of destructuring function definitions is:

  // | f(formals, [before], [after]) = ...

  // This is the compiled output (dependent on whether 'before' and 'after' are specified):

  // | // general case                     // no 'before' cases                  // no 'after' cases                     // neither
//     f = function(formals) {             f = function (formals) {              f = function (formals) {                f = function (formals) {
//       before;                             var result = ...;                     before;                                 ;               // <- I'm too lazy to fix this
//       var result = ...;                   after;                                return ...;                             return ...;
//       after;                              return result;                      };                                      };
//       return result;                    };
//     };

  // There are some rules governing how 'before' and 'after' statements are detected and compiled. They are:

  // | 1. Everything is assumed to be a formal until the first parameter that is not a simple identifier.
//     2. Everything that isn't a formal is assumed to be a 'before' expression until the first expression that mentions 'result'.
//     3. Everything after that is assumed to be an 'after' expression.
//     4. Any 'before' or 'after' expression of the form '_variable = ...' is compiled into a local variable definition rather than a simple assignment. This prevents global scope contention.

  // This notation doesn't preclude the possibility of some form of destructuring binds in the future, since there wouldn't be much point to writing a toplevel array or object literal and
//   intending it to be used as a side-effect. (Doing that would just put the value into void context; at that point you might as well leave it out.)

    var function_local_template = qs,  function_bind_pattern = qs1,  function_result_pattern  = qs2,

        function_with_afters         = qs3,
        function_without_afters      = qs4,
        function_assignment_template = qs5,

        function_is_result           = function (n) {return n.is_empty ( ) && n.data === 'result'},

        function_destructure = $.rereplacer ( qs6,
                                            function (match) {for (var formals = [ ], befores = [ ], afters = [ ], ps = match._xs.flatten (','), i = 0, l = ps.length; i < l; ++i)
                                                                (afters.length  || ps [i].contains (function_is_result) ? afters:
                                                                 befores.length || ps [i].length                       ? befores: formals).push (ps [i]);

                                                              // Convert simple assignments into 'var' definitions in-place. Other 'before' and 'after' statements are coerced
                                                              // into expression context by wrapping them in parentheses.
                                                              for (var contains_locals = [befores, afters], i = 0, l = contains_locals.length; i < l; ++i)
                                                                for (var xs = contains_locals [i], j = 0, lj = xs.length, m; j < lj; ++j)
                                                                  xs [j] = (m = function_bind_pattern.match (xs [j])) && m._x.is_empty ( ) ? function_local_template.replace (m):
                                                                                                                                        xs [j].as ('(');
                                                              var new_formals = formals.length ? new $.syntax (',', formals).unflatten ( ): $.empty,
                                                                  new_befores = befores.length ? new $.syntax (';', befores).unflatten ( ): $.empty,
                                                                  new_afters  = afters.length  ? new $.syntax (';', afters) .unflatten ( ): $.empty,

                                                                  template    = function_assignment_template.replace (
                                                                                  {_f: match._f, _x: afters.length ? function_with_afters: function_without_afters});

                                                              return template.replace ({_formals: new_formals, _befores: new_befores, _afters: new_afters, _result: match._y})});

  // Tuple binding.
//   Tuples can be created just like functions but using *= instead of =. The right-hand side is an expression that produces a prototype. This is useful for defining container classes with a few
//   minimal methods without doing all of the setup. Note that the prototype you specify will be referenced, not copied (!) and that its .constructor property will be set to the function.

    var tuple_template    = qs7,
        tuple_constructor = qs8,
        tuple_assignment  = qs9,
        tuple_destructure = $.rereplacer ( qsa,
                                         function (match) {for (var formals = match._xs.flatten (','), assignments = new $.syntax (';'), i = 0, l = formals.length; i < l; ++i)
                                                             assignments.push (tuple_assignment.replace ({_name: formals [i]}));
                                                           return tuple_template.replace ({_f: match._f,  _g: $.gensym ('tuple_ctor'),
                                                                                       _ctor: tuple_constructor.replace ({_formals: formals, _assignments: assignments.unflatten ( )}),
                                                                                  _prototype: match._y})});

  // Infix function application.
//   Caterwaul 1.1.2 introduces infix function notation, which lets the user avoid grouping constructs. x /y /... /-f/z becomes f(x, y, ..., z). The same goes for vertical bar syntax; that is, x
//   |y |... |-f| z also becomes f(x, y, ..., z). This macro respects associativity, so you can do this:

  // | x /!f /-g/ y                // -> g(f(x), y)

  // There used to be two different syntaxes depending on whether you wanted binary or n-ary function application. I realized this was probably overkill since the macro now distributes across
//   parse trees appropriately.

    var infix_function = function (node) {var d = node.data, left, fn;
                                          if ((d === '/' || d === '|') && (left = node [0]).data === d && left [1] && left [1].data === 'u-' && (fn = left [1] [0]))
                                            return new $.syntax ('()', fn, this (left [0]).flatten (d).push (this (node [1])).with_data (',').unflatten ( ))};

  // Infix method application.
//   This is subtly different from infix function application in that a method is called. You might want this when dealing with lots of nested methods, which can otherwise become hard to manage.
//   Like infix function application, this macro respects precedence and associativity.

  // | f /g /~a/ h /~b/ i          // -> ((f).a(g, h)).b(i)

    var infix_method = function (node) {var d = node.data, left, fn;
                                        if ((d === '/' || d === '|') && (left = node [0]).data === d && left [1] && left [1].data === 'u~' && (fn = left [1] [0])) {
                                          var xs = [ ].slice.call (this (node [0] [0]).flatten (d)), object = xs.shift ( );
                                          return new $.syntax ('()', new $.syntax ('.', new $.syntax ('(', object), fn), new $.syntax (',', xs, this (node [1])).unflatten ( ))}};

  // Postfix function application.
//   This is a bit simpler than infix function application and is used when you have a unary function. Sometimes it's simpler to think of a function as a filter than as a wrapper, and this macro
//   makes it easier to do that. This is particularly useful when you have many nested function calls, for instance if you're defining multi-level function composition:

  // | compose(f, g, h)(x) = x /!h /!g /!f         // -> f(g(h(x)))
//     x /y /z /!f                                 // -> f(x, y, z)

    var postfix_function_template = qsb,
        postfix_function          = $.rereplacer ( qsc, function (match) {return postfix_function_template.replace ({_f: match._f,
                                                                                                                           _x: this (match._x).flatten ('/').with_data (',').unflatten ( )})});

  // Literal modification.
//   Caterwaul 1.1.2 introduces literal modification, which provides ways to reinterpret various types of literals at compile-time. These are always written as postfix property accesses, e.g.
//   /foo bar/.x -- here, 'x' is the modifier. Cool as it would be to be able to stack modifiers up, right now Caterwaul doesn't support this. Part of the reason is that I'm too lazy/uninsightful
//   to know how to do it performantly considering the present architecture, but another part of it is that the bugs would become strange and subtle. My goal is to keep the compilation process
//   reasonably transparent, and you can imagine the bizarre chain of events that would occur if someone wrote a modifier that, for instance, returned a different type of literal. It would be
//   utter chaos (though a really cool form of it).

  // Sadly, you can't modify object literals. The reason has to do with syntactic ambiguity. Suppose you've got a function like this:

  // | function () {
//       {foo: 'bar'}.modifier
//       return true;
//     }

  // This function fails to parse under SpiderMonkey, since it assumes that {foo: 'bar'} is a statement-level block with a label 'foo' and a discarded string literal 'bar'. Rather than open this
//   can of worms, I'm just nixing the whole idea of modifying object literals (besides, it doesn't seem particularly useful anyway, though perhaps I'm being myopic about it).

    var modified_literal_form   = $.pattern ( qsd),

        lookup_literal_modifier = function (caterwaul, type, modifier) {var hash = caterwaul.literal_modifiers [type];
                                                                        return hash.hasOwnProperty (modifier) && hash [modifier]},

        literal_modifier        = function (node) {var modified_literal = modified_literal_form.call (this, node), literal, expander;
                                                   if (modified_literal && (literal  = modified_literal._literal) &&
                                                                           (expander = literal.is_identifier ( ) ? lookup_literal_modifier (this, 'identifier', modified_literal._modifier.data):
                                                                                       literal.is_array ( )      ? lookup_literal_modifier (this, 'array',      modified_literal._modifier.data):
                                                                                       literal.is_regexp ( )     ? lookup_literal_modifier (this, 'regexp',     modified_literal._modifier.data):
                                                                                       literal.is_number ( )     ? lookup_literal_modifier (this, 'number',     modified_literal._modifier.data):
                                                                                       literal.is_string ( )     ? lookup_literal_modifier (this, 'string',     modified_literal._modifier.data):
                                                                                                                 null))
                                                     return expander.call (this, literal)};

  // Modifier syntax.
//   These are the 'structured forms' I was talking about above. Prior to caterwaul 1.1 these were stored as individual pre-expanded macros. This had a number of problems, perhaps most notably
//   that it was extremely inefficient. I loaded up caterwaul in the REPL and found that caterwaul.js_ui(caterwaul.js_all()) had 329 macros installed. This meant 329 tree-match tests for every
//   function.

  // Now modifiers are stored on the compiler function directly. Some modifiers take parameters, so there is always some degree of overhead involved in determining whether a modifier case does in
//   fact match. However, there are only a few checks that need to happen before determining whether a modifier match is possible, unlike before.

    var bracket_modifier_form = $.pattern ( qse),               slash_modifier_form = $.pattern ( qsf),
        minus_modifier_form   = $.pattern ( qsg),               in_modifier_form    = $.pattern ( qsh),
        pipe_modifier_form    = $.pattern ( qsi),               comma_modifier_form = $.pattern ( qsj),

        dot_parameters        = $.pattern ( qsk),                bracket_parameters  = $.pattern ( qsl),

        parameterized_wickets = $.pattern ( qsm),  parameterized_minus = $.pattern ( qsn),

        modifier = function (node) {var modifier, parameterized_match = parameterized_wickets.call (this, node) || parameterized_minus.call (this, node);
                                    if (parameterized_match && this.parameterized_modifiers.hasOwnProperty (modifier = parameterized_match._modifier.data)) {
                                      var r = this.parameterized_modifiers [modifier].call (this, parameterized_match);
                                      if (r) return r}

                                    var regular_match = bracket_modifier_form.call (this, node) || slash_modifier_form.call (this, node) ||
                                                        minus_modifier_form  .call (this, node) || in_modifier_form   .call (this, node) ||
                                                        pipe_modifier_form   .call (this, node) || comma_modifier_form.call (this, node);

                                    if (regular_match) {
                                      // Could still be a parameterized function; try to match one of the parameter forms against the modifier.
                                      var parameter_match = dot_parameters    .call (this, regular_match._modifier) ||
                                                            bracket_parameters.call (this, regular_match._modifier);

                                      if (parameter_match) {
                                        regular_match._modifier   = parameter_match._modifier;
                                        regular_match._parameters = parameter_match._parameters;

                                        return this.parameterized_modifiers.hasOwnProperty (modifier = regular_match._modifier.data) &&
                                               this.parameterized_modifiers [modifier].call (this, regular_match)}
                                      else
                                        return this.modifiers.hasOwnProperty (modifier = regular_match._modifier.data) && this.modifiers [modifier].call (this, regular_match)}};

  // Tying it all together.
//   This is where we write a big macroexpander to perform all of the tasks mentioned above. It just falls through cases, which is now a fairly standard pattern for macros. There is a high-level
//   optimization that we can perform: leaf nodes can only be expanded by the string interpolator, so we try this one first and reject any further matching attempts if the node has no children.
//   Because roughly half of the nodes will have no children, this saves on average 5 matching attempts per node.

  // I've got two closures here to avoid putting a conditional in either one of them. In particular, we know already whether we got a macroexpander, so there's no need to test it inside the
//   function (which will be called lots of times).

  // Version 1.3.1 removes any hash-comment prefixes, since these are illegal in Javascript. Normal Javascript comment prefixes are preserved.

    var each_node = function (node) {if (node.prefixes) {
                                     var p =   node.prefixes ( ) |/^#/.test, i =   node.infixes ( ) |/^#/.test, s =   node.suffixes ( ) |/^#/.test; p || i || s &&  

                                     node =  node.thin_clone ( ), p &&  
                                     node.prefix_data =    node.prefix_data %!/^#/.test, i &&  
                                     node.infix_data =    node.infix_data  %!/^#/.test, s &&  
                                     node.suffix_data =    node.suffix_data %!/^#/.test; }

                                     return string_interpolator.call (this, node) || literal_modifier.call (this, node) ||
                                            node.length && (modifier.call (this, node) || function_destructure.call (this, node) || tuple_destructure.call (this, node) ||
                                                            infix_function.call (this, node) || infix_method.call (this, node) || postfix_function.call (this, node))},

        result    = macroexpander ? $ (function (node) {return macroexpander.call (this, node) || each_node.call (this, node)}): $ (each_node);

    result.modifiers               = { };
    result.parameterized_modifiers = { };

    result.literal_modifiers = {regexp: { }, array: { }, string: { }, number: { }, identifier: { }};

    return result}});result1.caterwaul_expression_ref_table =  { qs : ( "new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"_y\").prefix ( \" \")).prefix ( \" \"))") , qs1 : ( "new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\") ,new caterwaul.syntax ( \"_y\").prefix ( \" \")).prefix ( \" \")") , qs2 : ( "new caterwaul.syntax ( \"result\")") , qs3 : ( "new caterwaul.syntax ( \"function\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_formals\")).prefix ( \" \") ,new caterwaul.syntax ( \"{\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"_befores\") ,new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"result\").prefix ( \" \") ,new caterwaul.syntax ( \"_result\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"_afters\").prefix ( \" \")) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"result\").prefix ( \" \")).prefix ( \" \"))).prefix ( \" \"))") , qs4 : ( "new caterwaul.syntax ( \"function\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_formals\")).prefix ( \" \") ,new caterwaul.syntax ( \"{\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"_befores\") ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_result\").prefix ( \" \")).prefix ( \" \"))).prefix ( \" \"))") , qs5 : ( "new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_f\") ,new caterwaul.syntax ( \"_x\").prefix ( \" \")).prefix ( \" \")") , qs6 : ( "new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \"_f\") ,new caterwaul.syntax ( \"_xs\")).prefix ( \" \") ,new caterwaul.syntax ( \"_y\").prefix ( \" \")).prefix ( \" \")") , qs7 : ( "new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_f\") ,new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"function\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"{\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_g\").prefix ( \" \") ,new caterwaul.syntax ( \"_ctor\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_g\").prefix ( \" \") ,new caterwaul.syntax ( \"prototype\")) ,new caterwaul.syntax ( \"_prototype\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_g\").prefix ( \" \") ,new caterwaul.syntax ( \"prototype\")) ,new caterwaul.syntax ( \"constructor\")) ,new caterwaul.syntax ( \"_g\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_g\").prefix ( \" \")).prefix ( \" \"))).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"call\")) ,new caterwaul.syntax ( \"this\")).prefix ( \" \")).prefix ( \" \")") , qs8 : ( "new caterwaul.syntax ( \"function\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_formals\")).prefix ( \" \") ,new caterwaul.syntax ( \"{\",  new caterwaul.syntax ( \"_assignments\")).prefix ( \" \"))") , qs9 : ( "new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"this\") ,new caterwaul.syntax ( \"_name\")) ,new caterwaul.syntax ( \"_name\").prefix ( \" \")).prefix ( \" \")") , qsa : ( "new caterwaul.syntax ( \"*=\", new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \"_f\") ,new caterwaul.syntax ( \"_xs\")).prefix ( \" \") ,new caterwaul.syntax ( \"_y\").prefix ( \" \")).prefix ( \" \")") , qsb : ( "new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \"_f\") ,new caterwaul.syntax ( \"_x\")).prefix ( \" \")") , qsc : ( "new caterwaul.syntax ( \"/\", new caterwaul.syntax ( \"_x\") ,new caterwaul.syntax ( \"u!\",  new caterwaul.syntax ( \"_f\"))).prefix ( \" \")") , qsd : ( "new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_literal\") ,new caterwaul.syntax ( \"_modifier\"))") , qse : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_modifier\") ,new caterwaul.syntax ( \"_expression\")).prefix ( \" \")") , qsf : ( "new caterwaul.syntax ( \"/\", new caterwaul.syntax ( \"_expression\") ,new caterwaul.syntax ( \"_modifier\")).prefix ( \" \")") , qsg : ( "new caterwaul.syntax ( \"-\", new caterwaul.syntax ( \"_expression\") ,new caterwaul.syntax ( \"_modifier\")).prefix ( \" \")") , qsh : ( "new caterwaul.syntax ( \"in\", new caterwaul.syntax ( \"_modifier\") ,new caterwaul.syntax ( \"_expression\").prefix ( \" \")).prefix ( \" \")") , qsi : ( "new caterwaul.syntax ( \"|\", new caterwaul.syntax ( \"_expression\") ,new caterwaul.syntax ( \"_modifier\")).prefix ( \" \")") , qsj : ( "new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"_expression\") ,new caterwaul.syntax ( \"_modifier\").prefix ( \" \"))") , qsk : ( "new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_modifier\") ,new caterwaul.syntax ( \"_parameters\"))") , qsl : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_modifier\") ,new caterwaul.syntax ( \"_parameters\")).prefix ( \" \")") , qsm : ( "new caterwaul.syntax ( \">\", new caterwaul.syntax ( \"<\", new caterwaul.syntax ( \"_expression\") ,new caterwaul.syntax ( \"_modifier\")).prefix ( \" \") ,new caterwaul.syntax ( \"_parameters\").prefix ( \" \"))") , qsn : ( "new caterwaul.syntax ( \"-\", new caterwaul.syntax ( \"-\", new caterwaul.syntax ( \"_expression\") ,new caterwaul.syntax ( \"_modifier\")).prefix ( \" \") ,new caterwaul.syntax ( \"_parameters\").prefix ( \" \"))")};return(result1)}).call (this, new caterwaul.syntax ( "var",  new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "_y").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x") ,new caterwaul.syntax ( "_y").prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "result") ,new caterwaul.syntax ( "function", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_formals")).prefix ( " ") ,new caterwaul.syntax ( "{",  new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "_befores") ,new caterwaul.syntax ( "var",  new caterwaul.syntax ( "=", new caterwaul.syntax ( "result").prefix ( " ") ,new caterwaul.syntax ( "_result").prefix ( " ")).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "_afters").prefix ( " ")) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "result").prefix ( " ")).prefix ( " "))).prefix ( " ")) ,new caterwaul.syntax ( "function", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_formals")).prefix ( " ") ,new caterwaul.syntax ( "{",  new caterwaul.syntax ( ";", new caterwaul.syntax ( "_befores") ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_result").prefix ( " ")).prefix ( " "))).prefix ( " ")) ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_f") ,new caterwaul.syntax ( "_x").prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "()", new caterwaul.syntax ( "_f") ,new caterwaul.syntax ( "_xs")).prefix ( " ") ,new caterwaul.syntax ( "_y").prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_f") ,new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "function", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "{",  new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( "=", new caterwaul.syntax ( "_g").prefix ( " ") ,new caterwaul.syntax ( "_ctor").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "=", new caterwaul.syntax ( ".", new caterwaul.syntax ( "_g").prefix ( " ") ,new caterwaul.syntax ( "prototype")) ,new caterwaul.syntax ( "_prototype").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "=", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( "_g").prefix ( " ") ,new caterwaul.syntax ( "prototype")) ,new caterwaul.syntax ( "constructor")) ,new caterwaul.syntax ( "_g").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_g").prefix ( " ")).prefix ( " "))).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "call")) ,new caterwaul.syntax ( "this")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "function", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_formals")).prefix ( " ") ,new caterwaul.syntax ( "{",  new caterwaul.syntax ( "_assignments")).prefix ( " ")) ,new caterwaul.syntax ( "=", new caterwaul.syntax ( ".", new caterwaul.syntax ( "this") ,new caterwaul.syntax ( "_name")) ,new caterwaul.syntax ( "_name").prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "*=", new caterwaul.syntax ( "()", new caterwaul.syntax ( "_f") ,new caterwaul.syntax ( "_xs")).prefix ( " ") ,new caterwaul.syntax ( "_y").prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "()", new caterwaul.syntax ( "_f") ,new caterwaul.syntax ( "_x")).prefix ( " ") ,new caterwaul.syntax ( "/", new caterwaul.syntax ( "_x") ,new caterwaul.syntax ( "u!",  new caterwaul.syntax ( "_f"))).prefix ( " ") ,new caterwaul.syntax ( ".", new caterwaul.syntax ( "_literal") ,new caterwaul.syntax ( "_modifier")) ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_modifier") ,new caterwaul.syntax ( "_expression")).prefix ( " ") ,new caterwaul.syntax ( "/", new caterwaul.syntax ( "_expression") ,new caterwaul.syntax ( "_modifier")).prefix ( " ") ,new caterwaul.syntax ( "-", new caterwaul.syntax ( "_expression") ,new caterwaul.syntax ( "_modifier")).prefix ( " ") ,new caterwaul.syntax ( "in", new caterwaul.syntax ( "_modifier") ,new caterwaul.syntax ( "_expression").prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "|", new caterwaul.syntax ( "_expression") ,new caterwaul.syntax ( "_modifier")).prefix ( " ") ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "_expression") ,new caterwaul.syntax ( "_modifier").prefix ( " ")) ,new caterwaul.syntax ( ".", new caterwaul.syntax ( "_modifier") ,new caterwaul.syntax ( "_parameters")) ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_modifier") ,new caterwaul.syntax ( "_parameters")).prefix ( " ") ,new caterwaul.syntax ( ">", new caterwaul.syntax ( "<", new caterwaul.syntax ( "_expression") ,new caterwaul.syntax ( "_modifier")).prefix ( " ") ,new caterwaul.syntax ( "_parameters").prefix ( " ")) ,new caterwaul.syntax ( "-", new caterwaul.syntax ( "-", new caterwaul.syntax ( "_expression") ,new caterwaul.syntax ( "_modifier")).prefix ( " ") ,new caterwaul.syntax ( "_parameters").prefix ( " ")))) ; 
 caterwaul . module ('std.js-literals' ,(function ( qs1 , qs2) {var result=( function ($) {
  $.js_literals = function (caterwaul_function) {

    var function_template = qs1;

  // Regular expression literals.
//   Right now we just support the 'x' flag, which causes all whitespace within the regular expression to be ignored. This is a straightforward preprocessing transformation, since we have access
//   to the regexp in string form anyway.

  // To make Javascript's regular expressions more useful I've also included the 'qf' modifier. This turns a regular expression into a matching function; for example, /foo/.qf becomes (function
//   (s) {return /foo/.exec(s)}).

    (function (r) {r.x  = $.reexpander (function (node) {return node.with_data (node.data.replace (/\s+/g, ''))});

                   var call_exec_template = qs2;
                   r.qf = function (node) {return function_template.replace ({_body: call_exec_template.replace ({_regexp: node})})}}) (caterwaul_function.literal_modifiers.regexp);

  // String literals.
//   There are a couple of things we can do with strings. First, there's the 'qw' modifier, which causes a string to be split into an array of words at compile-time. So, for instance, the
//   expression 'foo bar bif'.qw would be compiled into ['foo', 'bar', 'bif']. Another modifier is 'qh', which is like 'qw' but creates a hash instead. So 'foo bar bif baz'.qh would result in
//   {foo: 'bar', bif: 'baz'}. There's also qr, which converts from a string to a regular expression and does all of the appropriate escape conversions. Some care should be taken with this,
//   however, because not all regexp escapes are valid in strings. In particular, you can't do things like 'foo\[bar\]'.qr because \[ isn't recognized in strings.

  // Another modifier is 'qs', which is rarely used outside of the context of writing macros. The idea here is to have Caterwaul parse the string and return a reference to the parse tree. So, for
//   example, 'foo.bar'.qs is compiled into a reference to the parse tree for foo.bar. A caveat here is that the parse happens only once, so any mutations that happen to the syntax tree are
//   persisted across invocations. (Unlike the way that array and object literals are interpreted, which is to create a new array or object each time that node is evaluated.)

  // Functions can be written concisely using qf. This causes the string to be interpreted as the body of a function whose sole argument is called _. This may change at some point in the future.

    (function (s) {s.qw  = $.reexpander (function (node) {for (var array_node = new $.syntax ('['), comma = new $.syntax (','), delimiter = node.data.charAt (0),
                                                                  pieces = node.as_escaped_string ( ).split (/\s+/), i = 0, l = pieces.length; i < l; ++i)
                                                           comma.push (new $.syntax (delimiter + pieces [i] + delimiter));
                                                         return array_node.push (comma.unflatten ( ))});

                   s.qh  = $.reexpander (function (node) {for (var hash_node = new $.syntax ('{'), comma = new $.syntax (','), delimiter = node.data.charAt (0),
                                                                  pieces = node.as_escaped_string ( ).split (/\s+/), i = 0, l = pieces.length; i < l; i += 2)
                                                           comma.push (new $.syntax (':', new $.syntax (delimiter + pieces [i] + delimiter), new $.syntax (delimiter + pieces [i + 1] + delimiter)));
                                                         return hash_node.push (comma.unflatten ( ))});

                   s.qr  = $.reexpander (function (node) {return node.with_data ('/' + node.as_escaped_string ( ).replace (/\//g, '\\/') + '/')});

                   s.qs  = function (node) {return new $.expression_ref ($.syntax_to_expression ($.parse (node.as_unescaped_string ( ))), 'qs')};
                   s.qse = function (node) {return new $.expression_ref ($.syntax_to_expression (this.call (this, $.parse (node.as_unescaped_string ( )))), 'qse')};

                   s.qf  = $.reexpander (function (node) {return function_template.replace ({_body: $.parse (node.as_unescaped_string ( ))})})}) (caterwaul_function.literal_modifiers.string);

    return caterwaul_function}});result.caterwaul_expression_ref_table =  { qs1 : ( "new caterwaul.syntax ( \"function\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_\")).prefix ( \" \") ,new caterwaul.syntax ( \"{\",  new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_body\").prefix ( \" \"))).prefix ( \" \"))") , qs2 : ( "new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_regexp\") ,new caterwaul.syntax ( \"exec\")) ,new caterwaul.syntax ( \"_\")).prefix ( \" \")")};return(result)}).call (this, new caterwaul.syntax ( "function", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_")).prefix ( " ") ,new caterwaul.syntax ( "{",  new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_body").prefix ( " "))).prefix ( " ")) ,new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "_regexp") ,new caterwaul.syntax ( "exec")) ,new caterwaul.syntax ( "_")).prefix ( " "))) ; 
 caterwaul . module ('std.words' ,(function ( qs1 , qs2 , qs3 , qs4 , qs5 , qs6 , qs7 , qs8 , qs9 , qsa , qsb , qsc , qsd , qsf , qsg , qsh , qsi , qsj) {var result=( function ($) { ( function ( ) { var scope_template = qs1 ; return  
  $.words =  function (  caterwaul_function) {   ; return  ($.merge (caterwaul_function.modifiers,               $.words.modifiers),
                                 $.merge (caterwaul_function.parameterized_modifiers, $.words.parameterized_modifiers),
                                 caterwaul_function)},

  $.words.modifiers = { 

// Unparameterized modifiers.
// These are basically flags that you can set on chunks of code.

  // Quotation.
//   qs[] comes from pre-1.0 caterwaul; this lets you quote a piece of syntax, just like quote in Lisp. The idea is that qs[something] returns 'something' as a syntax tree. qse[] is a variant
//   that macroexpands the syntax tree before returning it; this used to be there for performance reasons (now irrelevant with the introduction of precompilation) but is also useful for macro
//   reuse.

    qs :  function (  match) {   ; return  new $.expression_ref ($.syntax_to_expression (match._expression), 'qs')} , 
    qse :  function (  match) {   ; return  new $.expression_ref ($.syntax_to_expression (this (match._expression)), 'qse')} , 

  // Macroexpansion control.
//   Sometimes it's useful to request an additional macroexpansion or suppress macroexpansion for a piece of code. The 'reexpand' and 'noexpand' modifiers do these two things, respectively.

    reexpand :  function (  match) {   ; return  this (this (match._expression))} , 
    noexpand :  function (  match) {   ; return  match._expression} ,

  // Error handling.
//   Javascript in particular has clunky error handling constructs. These words provide error handling in expression context.

    raise : $.reexpander ( qs2) , 

  // Evaluation.
//   Caterwaul 1.1.2 introduces the 'eval' modifier, which lets you force certain expressions to be evaluated at compile-time. A reference containing the resulting value is dropped into the code,
//   and any errors are reported as compile-time errors. The expression being evaluated is macroexpanded under the compiling caterwaul function.

  // Caterwaul 1.2.8 introduces a related modifier, 'ahead', which produces an expression ref. The advantage of this approach is that you can precompile code that uses ahead.

    eval :  function (  match) {   ; return  new $.ref ($.compile (this (match._expression)), 'eval')} , 
    ahead :  function (  match) {   ; return  new $.expression_ref (this (match._expression), 'ahead')} ,

  // Object construction.
//   This is similar to where[], but constructs a hash object instead of binding local variables. The idea is to be able to use the f(x) = x + 1 function notation but end up with an object. You
//   can also use regular assignments, each of which will be converted into a key/value pair:

  // | var o = capture [f(x) = 10, g(x)(y) = x + y];
//     o.g(10)(20)         // -> 30

  // A variant, wcapture, provides local 'where'-style bindings as well as returning the object. This allows the definitions to refer to one another.

    capture : function (match) {for (var comma = new $.syntax (','), bindings = match._expression.flatten (','), i = 0, l = bindings.length; i < l; ++i)
                                   comma.push (this (bindings [i]).with_data (':'));
                                 return new $.syntax ('{', comma.unflatten ( ))} ,

    wcapture : function (match) {for (var e = this (match._expression), comma = new $.syntax (','), bindings = e.flatten (','), node, i = 0, l = bindings.length; i < l; ++i)
                                   (node = this (bindings [i])) [1] = node [0], comma.push (node.with_data (':'));
                                 return scope_template.replace ({_variables: e, _expression: new $.syntax ('{', comma.unflatten ( ))})}},

// Parameterized modifiers.
// These act like binary operators in the sense that they have a left and a right-hand side.

  $.words.parameterized_modifiers = {

  // Function words.
//   These define functions in some form. given[] and bgiven[] are modifiers to turn an expression into a function; given[] creates a regular closure while bgiven[] preserves the closure binding.
//   For example:

  // | var f = x + 1 -given [x];
//     var f = x + 1 -given.x;

    given:  $.reexpander ( qs3),
    bgiven: $.reexpander ( qs4),

  // Error handling.
//   Provides expression-context catching of errors, similar to Ruby's 'rescue' postfix operator.

    rescue: $.reexpander ( qs5),

  // Side-effecting.
//   The goal here is to take an existing value, modify it somehow, and then return it without allocating an actual variable. This can be done using the /se[] adverb. Older versions of caterwaul
//   bound the variable as _; version 1.0 changes this convention to bind the variable to 'it'. For example:

  // | hash(k, v) = {} /se[it[k] = v];
//     compose(f, g)(x) = g(x) -re- f(it);                 // <- you shouldn't ever write it this way, at least not until V8 is better at inlining fictitious closures.

  // Version 1.2 adds the word 'then', which is equivalent to 'se' but doesn't bind 'it'. This removes the overhead associated with creating a closure.

    se:   $.reexpander ( qs6),
    re:   $.reexpander ( qs7),
    then: $.reexpander ( qs8),

  // Assignment.
//   These provide higher-level assignment patterns and allow you to change the precedence of assignment operations. For example, it's common to write something like (x || (x = y)) because
//   Javascript has no ||= operator. Caterwaul provides several modifiers for this:

  // | x -eq- y            -> x = y                                // assign unconditionally
//     x -ocq- y           -> x ? x : x = y                        // cache assign if falsy
//     x -acq- y           -> !x ? x : x = y                       // cache assign if truthy
//     x -dcq- y           -> x !== void 0 ? x : x = y             // cache assign if undefined
//     x -ncq- y           -> x !=  void 0 ? x : x = y             // cache assign if null or undefined

  // I've removed the -oeq-, -aeq-, and related modifiers because they were implicated in so many bugs. They were not intuitive to use because their return value was always cast to a boolean;
//   this is different from what you would expect to happen with something like ||= in Ruby or Perl.

    eq:  $.reexpander ( qs9),

    ocq: $.reexpander ( qsa),  dcq: $.reexpander ( qsb),
    acq: $.reexpander ( qsc),  ncq: $.reexpander ( qsd),

  // Scoping.
//   You can create local variables by using the where[] modifier. If you do this, the locals can all see each other since they're placed into a 'var' statement. For example:

  // | where[x = 10][alert(x)]
//     alert(x), where[x = 10]

    where: $.reexpander ( qsf),

  // Importation.
//   This is a fun one. Caterwaul 1.1.2 introduces the 'using' modifier, which lets you statically import an object. For example:

  // | log(x) -using- console              // -> (function () {var log = console.log; return log(x)}).call(this)

  // Variables are computed at compile-time, not at runtime. This is much better than using the 'with' keyword, which degrades performance ('using' has no significant performance impact).
//   However, the calling context is incomplete, as shown above. In particular, methods of the object that you're using will be called with a global 'this' rather than being bound to the object.

    using: $.reexpander (function (match) {var m = this (match._parameters), o = $.compile (m), comma = new $.syntax (','), expression_ref = new $.expression_ref (m);
                                          for (var k in o) Object.prototype.hasOwnProperty.call (o, k) && /^[_$a-zA-Z][_$0-9a-zA-Z]*$/.test (k) &&
                                                           !this.modifiers.hasOwnProperty (k) && !this.parameterized_modifiers.hasOwnProperty (k) &&
                                                           comma.push (new $.syntax ('=', k, new $.syntax ('.', expression_ref, k)));
                                          return scope_template.replace ({_variables: comma.unflatten ( ), _expression: match._expression})}),

  // Conditionals.
//   These impact whether an expression gets evaluated. x /when.y evaluates to x when y is true, and y when y is false. Similarly, x /unless[y] evaluates to x when y is false, and !y when y is
//   truthy. 'and' and 'or' are provided so that you can change the syntax of short-circuit && and ||.

    when:   $.reexpander ( qsg),    and: $.reexpander ( qsh),
    unless: $.reexpander ( qsi),  or:  $.reexpander ( qsj)}}) . call ( this)});result.caterwaul_expression_ref_table =  { qs1 : ( "new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"function\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"{\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \"_variables\").prefix ( \" \")) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_expression\").prefix ( \" \")).prefix ( \" \"))).prefix ( \" \"))) ,new caterwaul.syntax ( \"call\")) ,new caterwaul.syntax ( \"this\")).prefix ( \" \")") , qs2 : ( "new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"function\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"{\",  new caterwaul.syntax ( \"throw\",  new caterwaul.syntax ( \"_expression\").prefix ( \" \"))).prefix ( \" \"))) ,new caterwaul.syntax ( \"call\")) ,new caterwaul.syntax ( \"this\")).prefix ( \" \")") , qs3 : ( "new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"function\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_parameters\")).prefix ( \" \") ,new caterwaul.syntax ( \"{\",  new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_expression\").prefix ( \" \"))).prefix ( \" \")))") , qs4 : ( "new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"function\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"t\") ,new caterwaul.syntax ( \"f\").prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"{\",  new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"function\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"{\",  new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"f\").prefix ( \" \") ,new caterwaul.syntax ( \"apply\")) ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"t\") ,new caterwaul.syntax ( \"arguments\").prefix ( \" \"))).prefix ( \" \"))).prefix ( \" \")).prefix ( \" \"))).prefix ( \" \"))) ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"this\") ,new caterwaul.syntax ( \"function\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_parameters\")).prefix ( \" \") ,new caterwaul.syntax ( \"{\",  new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_expression\").prefix ( \" \"))).prefix ( \" \")).prefix ( \" \"))).prefix ( \" \")") , qs5 : ( "new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"function\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"{\",  new caterwaul.syntax ( \"try\", new caterwaul.syntax ( \"{\",  new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_expression\").prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"catch\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"e\")).prefix ( \" \") ,new caterwaul.syntax ( \"{\",  new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_parameters\").prefix ( \" \"))).prefix ( \" \")).prefix ( \" \"))).prefix ( \" \"))) ,new caterwaul.syntax ( \"call\")) ,new caterwaul.syntax ( \"this\")).prefix ( \" \")") , qs6 : ( "new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"function\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"it\")).prefix ( \" \") ,new caterwaul.syntax ( \"{\",  new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"_parameters\").prefix ( \" \") ,new caterwaul.syntax ( \"it\").prefix ( \" \")))).prefix ( \" \"))) ,new caterwaul.syntax ( \"call\")) ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"this\") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_expression\")).prefix ( \" \"))).prefix ( \" \")") , qs7 : ( "new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"function\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"it\")).prefix ( \" \") ,new caterwaul.syntax ( \"{\",  new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_parameters\").prefix ( \" \"))).prefix ( \" \"))) ,new caterwaul.syntax ( \"call\")) ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"this\") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_expression\")).prefix ( \" \"))).prefix ( \" \")") , qs8 : ( "new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"_expression\") ,new caterwaul.syntax ( \"_parameters\").prefix ( \" \")))") , qs9 : ( "new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_expression\") ,new caterwaul.syntax ( \"_parameters\").prefix ( \" \")).prefix ( \" \")") , qsa : ( "new caterwaul.syntax ( \"?\", new caterwaul.syntax ( \"_expression\") ,new caterwaul.syntax ( \"_expression\").prefix ( \" \").infix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_expression\").prefix ( \" \") ,new caterwaul.syntax ( \"_parameters\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")") , qsb : ( "new caterwaul.syntax ( \"?\", new caterwaul.syntax ( \"!==\", new caterwaul.syntax ( \"_expression\") ,new caterwaul.syntax ( \"void\",  new caterwaul.syntax ( \"0\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"_expression\").prefix ( \" \").infix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_expression\").prefix ( \" \") ,new caterwaul.syntax ( \"_parameters\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")") , qsc : ( "new caterwaul.syntax ( \"?\", new caterwaul.syntax ( \"u!\",  new caterwaul.syntax ( \"_expression\")) ,new caterwaul.syntax ( \"_expression\").prefix ( \" \").infix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_expression\").prefix ( \" \") ,new caterwaul.syntax ( \"_parameters\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")") , qsd : ( "new caterwaul.syntax ( \"?\", new caterwaul.syntax ( \"!=\", new caterwaul.syntax ( \"_expression\") ,new caterwaul.syntax ( \"void\",  new caterwaul.syntax ( \"0\").prefix ( \" \")).prefix ( \"  \")).prefix ( \" \") ,new caterwaul.syntax ( \"_expression\").prefix ( \" \").infix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_expression\").prefix ( \" \") ,new caterwaul.syntax ( \"_parameters\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")") , qsf : ( "new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"function\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"{\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \"_parameters\").prefix ( \" \")) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_expression\").prefix ( \" \")).prefix ( \" \"))).prefix ( \" \"))) ,new caterwaul.syntax ( \"call\")) ,new caterwaul.syntax ( \"this\")).prefix ( \" \")") , qsg : ( "new caterwaul.syntax ( \"&&\", new caterwaul.syntax ( \"_parameters\") ,new caterwaul.syntax ( \"_expression\").prefix ( \" \")).prefix ( \" \")") , qsh : ( "new caterwaul.syntax ( \"&&\", new caterwaul.syntax ( \"_expression\") ,new caterwaul.syntax ( \"_parameters\").prefix ( \" \")).prefix ( \" \")") , qsi : ( "new caterwaul.syntax ( \"&&\", new caterwaul.syntax ( \"u!\",  new caterwaul.syntax ( \"_parameters\").prefix ( \" \")) ,new caterwaul.syntax ( \"_expression\").prefix ( \" \")).prefix ( \" \")") , qsj : ( "new caterwaul.syntax ( \"||\", new caterwaul.syntax ( \"_expression\") ,new caterwaul.syntax ( \"_parameters\").prefix ( \" \")).prefix ( \" \")")};return(result)}).call (this, new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "function", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "{",  new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( "_variables").prefix ( " ")) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_expression").prefix ( " ")).prefix ( " "))).prefix ( " "))) ,new caterwaul.syntax ( "call")) ,new caterwaul.syntax ( "this")).prefix ( " ") ,new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "function", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "{",  new caterwaul.syntax ( "throw",  new caterwaul.syntax ( "_expression").prefix ( " "))).prefix ( " "))) ,new caterwaul.syntax ( "call")) ,new caterwaul.syntax ( "this")).prefix ( " ") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "function", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_parameters")).prefix ( " ") ,new caterwaul.syntax ( "{",  new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_expression").prefix ( " "))).prefix ( " "))) ,new caterwaul.syntax ( "()", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "function", new caterwaul.syntax ( "(",  new caterwaul.syntax ( ",", new caterwaul.syntax ( "t") ,new caterwaul.syntax ( "f").prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "{",  new caterwaul.syntax ( "return",  new caterwaul.syntax ( "function", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "{",  new caterwaul.syntax ( "return",  new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "f").prefix ( " ") ,new caterwaul.syntax ( "apply")) ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "t") ,new caterwaul.syntax ( "arguments").prefix ( " "))).prefix ( " "))).prefix ( " ")).prefix ( " "))).prefix ( " "))) ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "this") ,new caterwaul.syntax ( "function", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_parameters")).prefix ( " ") ,new caterwaul.syntax ( "{",  new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_expression").prefix ( " "))).prefix ( " ")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "function", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "{",  new caterwaul.syntax ( "try", new caterwaul.syntax ( "{",  new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_expression").prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "catch", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "e")).prefix ( " ") ,new caterwaul.syntax ( "{",  new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_parameters").prefix ( " "))).prefix ( " ")).prefix ( " "))).prefix ( " "))) ,new caterwaul.syntax ( "call")) ,new caterwaul.syntax ( "this")).prefix ( " ") ,new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "function", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "it")).prefix ( " ") ,new caterwaul.syntax ( "{",  new caterwaul.syntax ( "return",  new caterwaul.syntax ( ",", new caterwaul.syntax ( "_parameters").prefix ( " ") ,new caterwaul.syntax ( "it").prefix ( " ")))).prefix ( " "))) ,new caterwaul.syntax ( "call")) ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "this") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_expression")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "function", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "it")).prefix ( " ") ,new caterwaul.syntax ( "{",  new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_parameters").prefix ( " "))).prefix ( " "))) ,new caterwaul.syntax ( "call")) ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "this") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_expression")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( ",", new caterwaul.syntax ( "_expression") ,new caterwaul.syntax ( "_parameters").prefix ( " "))) ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_expression") ,new caterwaul.syntax ( "_parameters").prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "?", new caterwaul.syntax ( "_expression") ,new caterwaul.syntax ( "_expression").prefix ( " ").infix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_expression").prefix ( " ") ,new caterwaul.syntax ( "_parameters").prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "?", new caterwaul.syntax ( "!==", new caterwaul.syntax ( "_expression") ,new caterwaul.syntax ( "void",  new caterwaul.syntax ( "0").prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "_expression").prefix ( " ").infix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_expression").prefix ( " ") ,new caterwaul.syntax ( "_parameters").prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "?", new caterwaul.syntax ( "u!",  new caterwaul.syntax ( "_expression")) ,new caterwaul.syntax ( "_expression").prefix ( " ").infix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_expression").prefix ( " ") ,new caterwaul.syntax ( "_parameters").prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "?", new caterwaul.syntax ( "!=", new caterwaul.syntax ( "_expression") ,new caterwaul.syntax ( "void",  new caterwaul.syntax ( "0").prefix ( " ")).prefix ( "  ")).prefix ( " ") ,new caterwaul.syntax ( "_expression").prefix ( " ").infix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_expression").prefix ( " ") ,new caterwaul.syntax ( "_parameters").prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "function", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "{",  new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( "_parameters").prefix ( " ")) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_expression").prefix ( " ")).prefix ( " "))).prefix ( " "))) ,new caterwaul.syntax ( "call")) ,new caterwaul.syntax ( "this")).prefix ( " ") ,new caterwaul.syntax ( "&&", new caterwaul.syntax ( "_parameters") ,new caterwaul.syntax ( "_expression").prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "&&", new caterwaul.syntax ( "_expression") ,new caterwaul.syntax ( "_parameters").prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "&&", new caterwaul.syntax ( "u!",  new caterwaul.syntax ( "_parameters").prefix ( " ")) ,new caterwaul.syntax ( "_expression").prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "||", new caterwaul.syntax ( "_expression") ,new caterwaul.syntax ( "_parameters").prefix ( " ")).prefix ( " "))) ; 

// Libraries.
// These apply more advanced syntactic transforms to the code and can depend on everything above.

 caterwaul . module ('std.grammar' ,(function (  qs) {var result=( function ($) { 
  $.grammar =  function ( anonymous_symbols , options , rule_cc) {   ; return  ( function ( ) { var default_options = {fix: true, descend: true, initial: qs},
          settings        =$.merge ( { } , default_options , options),

          anon            = $.anonymizer (anonymous_symbols),
          anon_pattern    = anon (settings.initial), 
          rule =  function ( p , e) {   ; return  $ [settings.fix ? 'rereplacer': 'replacer'] (anon (p), e.constructor === $.syntax ? anon (e): e)},
          expand          = ( function ( it) { return settings.descend ? $ (it): it}) . call ( this , (  $.alternatives (   rule_cc (rule, anon)))) ; return  function ( _) { return  ( function ( it) { return this.constructor === Function ? it &&  this (it): it}) . call ( this , ( expand.call (expand, ( anon_pattern) .replace (  _))))}}) . call ( this)}});result.caterwaul_expression_ref_table =  {  qs : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"_expression\")).prefix ( \" \")")};return(result)}).call (this,  new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "_expression")).prefix ( " "))) ; 
 caterwaul . module ('std.seq' ,(function ( qs , qs1 , qs2 , qs3 , qs4 , qs5 , qs6 , qs7 , qs8 , qs9 , qsa , qsb , qsc , qsd , qse , qsf , qsg , qsh , qsi , qsj , qsk , qsl , qsm , qsn , qso , qsp , qsq , qsr , qss , qst , qsu , qsv , qsw , qsx , qsy , qsz , qs10 , qs11 , qs12 , qs13 , qs14 , qs15 , qs16 , qs17 , qs18 , qs19 , qs1a , qs1b , qs1c , qs1d , qs1e , qs1f , qs1g , qs1h , qs1i , qs1j , qs1k , qs1l , qs1m , qs1n , qs1o , qs1p , qs1q , qs1r , qs1s , qs1t , qs1u , qs1v , qs1w , qs1x , qs1y , qs1z , qs20 , qs21 , qs22 , qs23 , qs24 , qs25 , qs26 , qs27 , qs28 , qs29 , qs2a , qs2b , qs2c , qs2d , qs2e , qs2f , qs2g , qs2h , qs2i , qs2j , qs2k , qs2l , qs2m , qs2n , qs2o , qs2p) {var result=( function ($) { 
  $.seq =  function (  caterwaul_function) {   ; return  ( function ( it) { return it.modifiers.seq = $.grammar ('S', {initial: qs}, ( function ( rule, anon) { return  ( function ( ) { var operator_macros = ( function ( ) { var // Setup for form definitions (see below)
                            loop_anon   = $.anonymizer ('x', 'y', 'i', 'j', 'l', 'lj', 'r', 'o', 'k'),
                            scope       = anon ( qs1), 
                            scoped =  function (  t) {   ; return  ( scope) .replace (  {_body: t})}, 

                            form =  function (  x) {   ; return  ( function ( it) { return it.uses_x0 = /_x0\s*=/.test (x.toString ( )) , it}) . call ( this , (  loop_anon (   scoped (   anon (   x)))))},

  // Form definitions
  map         = form ( qs2),
  each        = form ( qs3),
  flatmap     = form ( qs4),

  iterate     = form ( qs5),

  filter      = form ( qs6),
  filter_not  = form ( qs7),
  map_filter  = form ( qs8),

  imap_filter = form ( qs9),

  foldl       = form ( qsa),
  foldr       = form ( qsb),
  unfold      = form ( qsc),

  ifoldl      = form ( qsd),
  ifoldr      = form ( qse),
  iunfold     = form ( qsf),

  exists      = form ( qsg),
  not_exists  = form ( qsh),
  r_exists    = form ( qsi),

  iexists     = form ( qsj),
  ir_exists   = form ( qsk),

  concat      = anon ( qsl),

  kmap        = form ( qsm),
  keach       = form ( qsn),

  kfilter     = form ( qso),
  kfilter_not = form ( qsp),
  kmap_filter = form ( qsq),

  vmap        = form ( qsr),
  veach       = form ( qss),

  vfilter     = form ( qst),
  vfilter_not = form ( qsu),
  vmap_filter = form ( qsv) ; return  ( function ( ) { var  // High-level form specializations
                            operator_case (forms) =  function (  match) {   ; return  ( function ( ) { var  use (form, iform) =  function (  body) {   ; return  render_form (match._xs, body, form, iform)} ; return  parse_modifiers (match._thing, use (forms.normal, forms.inormal), use (forms.bang, forms.ibang), use (forms.tbang, forms.itbang))}) . call ( this)},

                            map_forms                          = operator_case ({normal: map,     bang: each,        tbang: flatmap,                                    itbang: iterate}),
                            filter_forms                       = operator_case ({normal: filter,  bang: filter_not,  tbang: map_filter,                                 itbang: imap_filter}),
                            fold_forms                         = operator_case ({normal: foldl,   bang: foldr,       tbang: unfold,     inormal: ifoldl, ibang: ifoldr, itbang: iunfold}),

                            kmap_forms                         = operator_case ({normal: kmap,    bang: keach}),
                            kfilter_forms                      = operator_case ({normal: kfilter, bang: kfilter_not, tbang: kmap_filter}),
                            vmap_forms                         = operator_case ({normal: vmap,    bang: veach}),
                            vfilter_forms                      = operator_case ({normal: vfilter, bang: vfilter_not, tbang: vmap_filter}),

                            exists_forms                       = operator_case ({normal: exists,  bang: not_exists,  tbang: r_exists,   inormal: iexists,               itbang: ir_exists}), 

                            parse_modifiers =  function ( tree , n , b , tb) {   ; return  ( function ( ) { var r = null ; return  ((r = qsw.match (tree)) ? tb (r._x): (r = qsx.match (tree)) ? b (r._x): n (tree))}) . call ( this)}, 

                            render_form =  function ( xs , body , form , iform) {   ; return  ( function ( ) { var r                = null, 
                                                    use =  function ( f , match) {   ; return  f.replace ($.merge ({_f: match._x, _init: match._init, _s: xs} , names_for (match._var)))}, 
                                                    promote =  function ( f , body) {   ; return  ( ( f) .replace (  {_f: (f.uses_x0 ? qsy: qsz).replace ($.merge ({_f: body} , gensym_names)), _s: xs})) .replace (  gensym_names)} ; return  ((r = qs10.match (body) || qs11.match (body)) ? use (iform, r):
                                                                  (r = qs12.match (body) || qs13.match (body)) ? use (form,  r): promote (form, body))}) . call ( this)}, 

                            names_for =  function (  p) {   ; return  p ? {_x:  p , _x0: ( '' + (p) + '0'), _xi: ( '' + (p) + 'i'), _xl: ( '' + (p) + 'l'), _xs: ( '' + (p) + 's'), _xr: ( '' + (p) + 'r')
                                                                   }: {_x: 'x', _x0:    'x0', _xi:    'xi', _xl:    'xl', _xs:    'xs', _xr:    'xr'}},

                            // It's ok to use -seq inside the seq library due to waul precompilation
                            gensym_names                       =   names_for (null) %v*$.gensym ; return  [rule ( qs14, qs15),  rule ( qs16, concat),

                                                         // Distributive property
                                                         rule ( qs17, qs18),  rule ( qs19, qs1a),     rule ( qs1b, qs1c),
                                                         rule ( qs1d, qs1e),     rule ( qs1f, qs1g),  rule ( qs1h, qs1i),

                                                         rule ( qs1j, qs1k),                // ~ modifier on arrays
                                                         rule ( qs1l, qs1m),         // ~ modifier on function calls

                                                         rule ( qs1n, qs1o),  rule ( qs1p, qs1q),
                                                                                                                        rule ( qs1r, qs1s),
                                                         // Unary seq operators
                                                         rule ( qs1t, qs1u),

                                                         rule ( qs1v,   filter_forms),   rule ( qs1w,   map_forms),
                                                         rule ( qs1x,   fold_forms),     rule ( qs1y,   exists_forms),

                                                         rule ( qs1z, kmap_forms),     rule ( qs20, vmap_forms),
                                                         rule ( qs21, kfilter_forms),  rule ( qs22, vfilter_forms)]}) . call ( this)}) . call ( this),

          word_macros     = ( function ( ) { var  n =  function (  match) {   ; return  n_pattern .replace ($.merge ({_l: '0', _step: '1'} , match))}, 
                            ni =  function (  match) {   ; return  ni_pattern.replace ($.merge ({_l: '0', _step: '1'} , match))},

                            scope      = anon ( qs23), 
                            scoped =  function (  t) {   ; return  scope.replace ({_body: t})}, 
                            form =  function (  p) {   ; return  ( function ( ) { var tree = scoped (anon (p)) ; return  function ( _) { return tree.replace (_)}}) . call ( this)},

  n_pattern  = anon ( qs24),
  ni_pattern = anon ( qs25),

  keys       = form ( qs26),
  values     = form ( qs27),
  pairs      = form ( qs28),

  object     = form ( qs29),
  mobject    = form ( qs2a) ; return  [rule ( qs2b,            n),  rule ( qs2c,            ni),
                             rule ( qs2d,        n),  rule ( qs2e,        ni),
                             rule ( qs2f, n),  rule ( qs2g, ni),

                             rule ( qs2h,   keys),    rule ( qs2i, object),  rule ( qs2j, mobject),
                             rule ( qs2k, values),  rule ( qs2l, object),  rule ( qs2m, mobject),
                             rule ( qs2n,  pairs),   rule ( qs2o, object),  rule ( qs2p, mobject)]}) . call ( this) ; return  ( operator_macros) .concat (  word_macros)}) . call ( this)})) , it}) . call ( this , (  caterwaul_function))}});result.caterwaul_expression_ref_table =  { qs : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"_expression\")).prefix ( \" \")") , qs1 : ( "new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"function\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_xs\")).prefix ( \" \") ,new caterwaul.syntax ( \"{\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"_x0\").prefix ( \" \")) ,new caterwaul.syntax ( \"_xi\").prefix ( \" \")) ,new caterwaul.syntax ( \"_xl\").prefix ( \" \")) ,new caterwaul.syntax ( \"_xr\").prefix ( \" \"))) ,new caterwaul.syntax ( \"_body\").prefix ( \" \"))).prefix ( \" \"))) ,new caterwaul.syntax ( \"call\")) ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"this\") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\").prefix ( \" \") ,new caterwaul.syntax ( \"_s\")).prefix ( \" \"))).prefix ( \" \")") , qs2 : ( "new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xr\").prefix ( \" \") ,new caterwaul.syntax ( \"new\",  new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"constructor\")) ,new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xi\").prefix ( \" \") ,new caterwaul.syntax ( \"0\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xl\").prefix ( \" \") ,new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"length\"))).prefix ( \" \"))) ,new caterwaul.syntax ( \"<\", new caterwaul.syntax ( \"_xi\").prefix ( \" \") ,new caterwaul.syntax ( \"_xl\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"u++\",  new caterwaul.syntax ( \"_xi\")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"_xi\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xr\").prefix ( \" \") ,new caterwaul.syntax ( \"push\")) ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_f\"))).prefix ( \" \"))) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_xr\").prefix ( \" \")).prefix ( \"                                        \"))") , qs3 : ( "new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xi\").prefix ( \"                              \") ,new caterwaul.syntax ( \"0\").prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xl\").prefix ( \" \") ,new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"length\"))).prefix ( \" \"))) ,new caterwaul.syntax ( \"<\", new caterwaul.syntax ( \"_xi\").prefix ( \" \") ,new caterwaul.syntax ( \"_xl\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"u++\",  new caterwaul.syntax ( \"_xi\")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"_xi\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_f\")).prefix ( \" \"))) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_xs\").prefix ( \" \")).prefix ( \"                                                  \"))") , qs4 : ( "new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xr\").prefix ( \" \") ,new caterwaul.syntax ( \"new\",  new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"constructor\")) ,new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xi\").prefix ( \" \") ,new caterwaul.syntax ( \"0\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xl\").prefix ( \" \") ,new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"length\"))).prefix ( \" \"))) ,new caterwaul.syntax ( \"<\", new caterwaul.syntax ( \"_xi\").prefix ( \" \") ,new caterwaul.syntax ( \"_xl\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"u++\",  new caterwaul.syntax ( \"_xi\")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"_xi\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xr\").prefix ( \" \") ,new caterwaul.syntax ( \"push\")) ,new caterwaul.syntax ( \"apply\")) ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"_xr\") ,new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"Array\").prefix ( \" \") ,new caterwaul.syntax ( \"prototype\")) ,new caterwaul.syntax ( \"slice\")) ,new caterwaul.syntax ( \"call\")) ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_f\"))).prefix ( \" \"))).prefix ( \" \"))) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_xr\").prefix ( \" \")).prefix ( \" \"))") , qs5 : ( "new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"_xs\").prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xi\").prefix ( \" \") ,new caterwaul.syntax ( \"0\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"_x0\").prefix ( \" \")) ,new caterwaul.syntax ( \"_xl\").prefix ( \" \"))) ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x0\").prefix ( \" \") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_init\")).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"u++\",  new caterwaul.syntax ( \"_xi\")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_f\")).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_x\").prefix ( \" \")).prefix ( \" \"))") , qs6 : ( "new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xr\").prefix ( \" \") ,new caterwaul.syntax ( \"new\",  new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"constructor\")) ,new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xi\").prefix ( \" \") ,new caterwaul.syntax ( \"0\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xl\").prefix ( \" \") ,new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"length\"))).prefix ( \" \"))) ,new caterwaul.syntax ( \"<\", new caterwaul.syntax ( \"_xi\").prefix ( \"    \") ,new caterwaul.syntax ( \"_xl\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"u++\",  new caterwaul.syntax ( \"_xi\")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"_xi\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"&&\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_f\")).prefix ( \" \") ,new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xr\").prefix ( \" \") ,new caterwaul.syntax ( \"push\")) ,new caterwaul.syntax ( \"_x\")).prefix ( \" \")).prefix ( \" \"))) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_xr\").prefix ( \" \")).prefix ( \"      \"))") , qs7 : ( "new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xr\").prefix ( \" \") ,new caterwaul.syntax ( \"new\",  new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"constructor\")) ,new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xi\").prefix ( \" \") ,new caterwaul.syntax ( \"0\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xl\").prefix ( \" \") ,new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"length\"))).prefix ( \" \"))) ,new caterwaul.syntax ( \"<\", new caterwaul.syntax ( \"_xi\").prefix ( \"    \") ,new caterwaul.syntax ( \"_xl\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"u++\",  new caterwaul.syntax ( \"_xi\")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"_xi\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"||\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_f\")).prefix ( \" \") ,new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xr\").prefix ( \" \") ,new caterwaul.syntax ( \"push\")) ,new caterwaul.syntax ( \"_x\")).prefix ( \" \")).prefix ( \" \"))) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_xr\").prefix ( \" \")).prefix ( \"      \"))") , qs8 : ( "new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xr\").prefix ( \" \") ,new caterwaul.syntax ( \"new\",  new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"constructor\")) ,new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xi\").prefix ( \" \") ,new caterwaul.syntax ( \"0\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xl\").prefix ( \" \") ,new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"length\"))).prefix ( \" \")) ,new caterwaul.syntax ( \"y\").prefix ( \" \"))) ,new caterwaul.syntax ( \"<\", new caterwaul.syntax ( \"_xi\").prefix ( \" \") ,new caterwaul.syntax ( \"_xl\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"u++\",  new caterwaul.syntax ( \"_xi\")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"_xi\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"&&\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"y\") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_f\")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xr\").prefix ( \" \") ,new caterwaul.syntax ( \"push\")) ,new caterwaul.syntax ( \"y\")).prefix ( \" \")).prefix ( \" \"))) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_xr\").prefix ( \" \")).prefix ( \" \"))") , qs9 : ( "new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xr\").prefix ( \" \") ,new caterwaul.syntax ( \"new\",  new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"constructor\")) ,new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xi\").prefix ( \" \") ,new caterwaul.syntax ( \"0\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xl\").prefix ( \" \") ,new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"length\"))).prefix ( \" \")) ,new caterwaul.syntax ( \"_x0\").prefix ( \" \"))) ,new caterwaul.syntax ( \"<\", new caterwaul.syntax ( \"_xi\").prefix ( \" \") ,new caterwaul.syntax ( \"_xl\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"u++\",  new caterwaul.syntax ( \"_xi\")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"_xi\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"&&\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x0\") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_init\")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xr\").prefix ( \" \") ,new caterwaul.syntax ( \"push\")) ,new caterwaul.syntax ( \"_f\")).prefix ( \" \")).prefix ( \" \"))) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_xr\").prefix ( \" \")).prefix ( \" \"))") , qsa : ( "new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x0\").prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"0\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xi\").prefix ( \" \") ,new caterwaul.syntax ( \"1\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xl\").prefix ( \" \") ,new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"length\"))).prefix ( \" \"))) ,new caterwaul.syntax ( \"<\", new caterwaul.syntax ( \"_xi\").prefix ( \"            \") ,new caterwaul.syntax ( \"_xl\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"u++\",  new caterwaul.syntax ( \"_xi\")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"_xi\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x0\").prefix ( \" \") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_f\")).prefix ( \" \")).prefix ( \" \"))) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_x0\").prefix ( \" \")).prefix ( \" \"))") , qsb : ( "new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xl\").prefix ( \" \") ,new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"length\"))).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xi\").prefix ( \" \") ,new caterwaul.syntax ( \"-\", new caterwaul.syntax ( \"_xl\").prefix ( \" \") ,new caterwaul.syntax ( \"2\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x0\").prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"-\", new caterwaul.syntax ( \"_xl\") ,new caterwaul.syntax ( \"1\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \"))) ,new caterwaul.syntax ( \">=\", new caterwaul.syntax ( \"_xi\").prefix ( \" \") ,new caterwaul.syntax ( \"0\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"u--\",  new caterwaul.syntax ( \"_xi\")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"_xi\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x0\").prefix ( \" \") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_f\")).prefix ( \" \")).prefix ( \" \"))) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_x0\").prefix ( \" \")).prefix ( \" \"))") , qsc : ( "new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xr\").prefix ( \" \") ,new caterwaul.syntax ( \"[\",  new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"_xs\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xi\").prefix ( \" \") ,new caterwaul.syntax ( \"0\").prefix ( \" \")).prefix ( \" \"))) ,new caterwaul.syntax ( \"!==\", new caterwaul.syntax ( \"_x\").prefix ( \"                      \") ,new caterwaul.syntax ( \"null\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"u++\",  new caterwaul.syntax ( \"_xi\")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xr\").prefix ( \" \") ,new caterwaul.syntax ( \"push\")) ,new caterwaul.syntax ( \"_x\")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_f\")).prefix ( \" \")).prefix ( \" \"))) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_xr\").prefix ( \" \")).prefix ( \"   \"))") , qsd : ( "new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x0\").prefix ( \" \") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_init\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xi\").prefix ( \" \") ,new caterwaul.syntax ( \"0\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xl\").prefix ( \" \") ,new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"length\"))).prefix ( \" \"))) ,new caterwaul.syntax ( \"<\", new caterwaul.syntax ( \"_xi\").prefix ( \"      \") ,new caterwaul.syntax ( \"_xl\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"u++\",  new caterwaul.syntax ( \"_xi\")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"_xi\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x0\").prefix ( \" \") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_f\")).prefix ( \" \")).prefix ( \" \"))) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_x0\").prefix ( \" \")).prefix ( \"      \"))") , qse : ( "new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xl\").prefix ( \" \") ,new caterwaul.syntax ( \"-\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"length\")) ,new caterwaul.syntax ( \"1\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xi\").prefix ( \" \") ,new caterwaul.syntax ( \"_xl\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x0\").prefix ( \" \") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_init\")).prefix ( \" \")).prefix ( \" \"))) ,new caterwaul.syntax ( \">=\", new caterwaul.syntax ( \"_xi\").prefix ( \" \") ,new caterwaul.syntax ( \"0\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"u--\",  new caterwaul.syntax ( \"_xi\")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"_xi\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x0\").prefix ( \" \") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_f\")).prefix ( \" \")).prefix ( \" \"))) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_x0\").prefix ( \" \")).prefix ( \"      \"))") , qsf : ( "new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xr\").prefix ( \" \") ,new caterwaul.syntax ( \"[\",  new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"_xs\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xi\").prefix ( \" \") ,new caterwaul.syntax ( \"0\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"_x0\").prefix ( \" \"))) ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x0\").prefix ( \"          \") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_init\")).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"u++\",  new caterwaul.syntax ( \"_xi\")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xr\").prefix ( \" \") ,new caterwaul.syntax ( \"push\")) ,new caterwaul.syntax ( \"_x\")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_f\")).prefix ( \" \")).prefix ( \" \"))) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_xr\").prefix ( \" \")).prefix ( \"        \"))") , qsg : ( "new caterwaul.syntax ( \"i;\", new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"0\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xi\").prefix ( \" \") ,new caterwaul.syntax ( \"0\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xl\").prefix ( \" \") ,new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"length\"))).prefix ( \" \")) ,new caterwaul.syntax ( \"x\").prefix ( \" \"))) ,new caterwaul.syntax ( \"<\", new caterwaul.syntax ( \"_xi\").prefix ( \" \") ,new caterwaul.syntax ( \"_xl\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"u++\",  new caterwaul.syntax ( \"_xi\")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"{\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"_xi\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"if\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"x\") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_f\")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"x\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \"))).prefix ( \" \")) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"false\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")") , qsh : ( "new caterwaul.syntax ( \"i;\", new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"0\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xi\").prefix ( \" \") ,new caterwaul.syntax ( \"0\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xl\").prefix ( \" \") ,new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"length\"))).prefix ( \" \")) ,new caterwaul.syntax ( \"x\").prefix ( \" \"))) ,new caterwaul.syntax ( \"<\", new caterwaul.syntax ( \"_xi\").prefix ( \" \") ,new caterwaul.syntax ( \"_xl\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"u++\",  new caterwaul.syntax ( \"_xi\")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"{\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"_xi\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"if\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"x\") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_f\")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"false\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \"))).prefix ( \" \")) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"true\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")") , qsi : ( "new caterwaul.syntax ( \"i;\", new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xl\").prefix ( \" \") ,new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"length\"))).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xi\").prefix ( \" \") ,new caterwaul.syntax ( \"-\", new caterwaul.syntax ( \"_xl\").prefix ( \" \") ,new caterwaul.syntax ( \"1\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"_xi\")).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"x\").prefix ( \" \"))) ,new caterwaul.syntax ( \">=\", new caterwaul.syntax ( \"_xi\").prefix ( \" \") ,new caterwaul.syntax ( \"0\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"u--\",  new caterwaul.syntax ( \"_xi\")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"{\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"_xi\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"if\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"x\") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_f\")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"x\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \"))).prefix ( \" \")) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"false\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")") , qsj : ( "new caterwaul.syntax ( \"i;\", new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"0\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xi\").prefix ( \" \") ,new caterwaul.syntax ( \"0\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xl\").prefix ( \" \") ,new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"length\"))).prefix ( \" \")) ,new caterwaul.syntax ( \"x\").prefix ( \" \"))) ,new caterwaul.syntax ( \"<\", new caterwaul.syntax ( \"_xi\").prefix ( \" \") ,new caterwaul.syntax ( \"_xl\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"u++\",  new caterwaul.syntax ( \"_xi\")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"{\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"_xi\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"if\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x0\") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_init\")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_f\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \"))).prefix ( \" \")) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"false\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")") , qsk : ( "new caterwaul.syntax ( \"i;\", new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xl\").prefix ( \" \") ,new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"length\"))).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xi\").prefix ( \" \") ,new caterwaul.syntax ( \"-\", new caterwaul.syntax ( \"_xl\").prefix ( \" \") ,new caterwaul.syntax ( \"1\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"_xi\")).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"x\").prefix ( \" \"))) ,new caterwaul.syntax ( \">=\", new caterwaul.syntax ( \"_xi\").prefix ( \" \") ,new caterwaul.syntax ( \"0\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"u--\",  new caterwaul.syntax ( \"_xi\")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"{\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"_xi\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"if\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x0\") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_init\")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_f\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \"))).prefix ( \" \")) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"false\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")") , qsl : ( "new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"_xs\")).prefix ( \" \")) ,new caterwaul.syntax ( \"concat\")) ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"_ys\")).prefix ( \" \"))).prefix ( \" \")") , qsm : ( "new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xr\").prefix ( \" \") ,new caterwaul.syntax ( \"new\",  new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"constructor\")) ,new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \"in\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"_xs\").prefix ( \" \")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"if\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"Object\") ,new caterwaul.syntax ( \"prototype\")) ,new caterwaul.syntax ( \"hasOwnProperty\")) ,new caterwaul.syntax ( \"call\")) ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"_xs\") ,new caterwaul.syntax ( \"_x\").prefix ( \" \"))).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xr\").prefix ( \" \") ,new caterwaul.syntax ( \"_f\")).prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"_x\")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_xr\").prefix ( \" \")).prefix ( \" \"))") , qsn : ( "new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \"in\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"_xs\").prefix ( \" \")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"if\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"Object\") ,new caterwaul.syntax ( \"prototype\")) ,new caterwaul.syntax ( \"hasOwnProperty\")) ,new caterwaul.syntax ( \"call\")) ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"_xs\") ,new caterwaul.syntax ( \"_x\").prefix ( \" \"))).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"_f\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_xs\").prefix ( \" \")).prefix ( \"                \"))") , qso : ( "new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xr\").prefix ( \" \") ,new caterwaul.syntax ( \"new\",  new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"constructor\")) ,new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \"in\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"_xs\").prefix ( \" \")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"if\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"&&\", new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"Object\") ,new caterwaul.syntax ( \"prototype\")) ,new caterwaul.syntax ( \"hasOwnProperty\")) ,new caterwaul.syntax ( \"call\")) ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"_xs\") ,new caterwaul.syntax ( \"_x\").prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_f\")).prefix ( \"      \")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xr\").prefix ( \"  \") ,new caterwaul.syntax ( \"_x\")).prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"_x\")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \")).prefix ( \"    \")) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_xr\").prefix ( \" \")).prefix ( \" \"))") , qsp : ( "new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xr\").prefix ( \" \") ,new caterwaul.syntax ( \"new\",  new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"constructor\")) ,new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \"in\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"_xs\").prefix ( \" \")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"if\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"&&\", new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"Object\") ,new caterwaul.syntax ( \"prototype\")) ,new caterwaul.syntax ( \"hasOwnProperty\")) ,new caterwaul.syntax ( \"call\")) ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"_xs\") ,new caterwaul.syntax ( \"_x\").prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"u!\",  new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_f\")).prefix ( \" \")).prefix ( \"    \")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xr\").prefix ( \"  \") ,new caterwaul.syntax ( \"_x\")).prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"_x\")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \")).prefix ( \"    \")) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_xr\").prefix ( \" \")).prefix ( \" \"))") , qsq : ( "new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xr\").prefix ( \" \") ,new caterwaul.syntax ( \"new\",  new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"constructor\")) ,new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"x\").prefix ( \" \"))) ,new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \"in\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"_xs\").prefix ( \" \")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"if\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"&&\", new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"Object\") ,new caterwaul.syntax ( \"prototype\")) ,new caterwaul.syntax ( \"hasOwnProperty\")) ,new caterwaul.syntax ( \"call\")) ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"_xs\") ,new caterwaul.syntax ( \"_x\").prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"x\") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_f\")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xr\").prefix ( \" \") ,new caterwaul.syntax ( \"x\")).prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"_x\")).prefix ( \" \")).prefix ( \"  \")).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_xr\").prefix ( \" \")).prefix ( \" \"))") , qsr : ( "new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xr\").prefix ( \" \") ,new caterwaul.syntax ( \"new\",  new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"constructor\")) ,new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \"in\", new caterwaul.syntax ( \"k\").prefix ( \"  \") ,new caterwaul.syntax ( \"_xs\").prefix ( \" \")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"if\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"Object\") ,new caterwaul.syntax ( \"prototype\")) ,new caterwaul.syntax ( \"hasOwnProperty\")) ,new caterwaul.syntax ( \"call\")) ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"_xs\") ,new caterwaul.syntax ( \"k\").prefix ( \" \"))).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"k\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xr\").prefix ( \" \") ,new caterwaul.syntax ( \"k\")).prefix ( \" \") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_f\")).prefix ( \" \")).prefix ( \" \"))).prefix ( \" \")).prefix ( \"    \")) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_xr\").prefix ( \" \")).prefix ( \" \"))") , qss : ( "new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \"in\", new caterwaul.syntax ( \"k\").prefix ( \"  \") ,new caterwaul.syntax ( \"_xs\").prefix ( \" \")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"if\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"Object\") ,new caterwaul.syntax ( \"prototype\")) ,new caterwaul.syntax ( \"hasOwnProperty\")) ,new caterwaul.syntax ( \"call\")) ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"_xs\") ,new caterwaul.syntax ( \"k\").prefix ( \" \"))).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"k\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"_f\").prefix ( \" \"))).prefix ( \" \")) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_xs\").prefix ( \" \")).prefix ( \"            \"))") , qst : ( "new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xr\").prefix ( \" \") ,new caterwaul.syntax ( \"new\",  new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"constructor\")) ,new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \"in\", new caterwaul.syntax ( \"k\").prefix ( \"  \") ,new caterwaul.syntax ( \"_xs\").prefix ( \" \")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"if\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"Object\") ,new caterwaul.syntax ( \"prototype\")) ,new caterwaul.syntax ( \"hasOwnProperty\")) ,new caterwaul.syntax ( \"call\")) ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"_xs\") ,new caterwaul.syntax ( \"k\").prefix ( \" \"))).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"k\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"&&\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_f\")).prefix ( \"        \") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xr\") ,new caterwaul.syntax ( \"k\")).prefix ( \" \") ,new caterwaul.syntax ( \"_x\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \"))).prefix ( \" \")).prefix ( \"    \")) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_xr\").prefix ( \" \")).prefix ( \" \"))") , qsu : ( "new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xr\").prefix ( \" \") ,new caterwaul.syntax ( \"new\",  new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"constructor\")) ,new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \"in\", new caterwaul.syntax ( \"k\").prefix ( \"  \") ,new caterwaul.syntax ( \"_xs\").prefix ( \" \")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"if\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"Object\") ,new caterwaul.syntax ( \"prototype\")) ,new caterwaul.syntax ( \"hasOwnProperty\")) ,new caterwaul.syntax ( \"call\")) ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"_xs\") ,new caterwaul.syntax ( \"k\").prefix ( \" \"))).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"k\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"||\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_f\")).prefix ( \"        \") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xr\") ,new caterwaul.syntax ( \"k\")).prefix ( \" \") ,new caterwaul.syntax ( \"_x\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \"))).prefix ( \" \")).prefix ( \"    \")) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_xr\").prefix ( \" \")).prefix ( \" \"))") , qsv : ( "new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_xr\").prefix ( \" \") ,new caterwaul.syntax ( \"new\",  new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"constructor\")) ,new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"x\").prefix ( \" \"))) ,new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \"in\", new caterwaul.syntax ( \"k\").prefix ( \"  \") ,new caterwaul.syntax ( \"_xs\").prefix ( \" \")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"if\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"Object\") ,new caterwaul.syntax ( \"prototype\")) ,new caterwaul.syntax ( \"hasOwnProperty\")) ,new caterwaul.syntax ( \"call\")) ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"_xs\") ,new caterwaul.syntax ( \"k\").prefix ( \" \"))).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"_x\").prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xs\").prefix ( \" \") ,new caterwaul.syntax ( \"k\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"x\").prefix ( \" \") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_f\")).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"&&\", new caterwaul.syntax ( \"x\").prefix ( \" \") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_xr\") ,new caterwaul.syntax ( \"k\")).prefix ( \" \") ,new caterwaul.syntax ( \"x\").prefix ( \"  \")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \"))).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"_xr\").prefix ( \" \")).prefix ( \" \"))") , qsw : ( "new caterwaul.syntax ( \"u~\",  new caterwaul.syntax ( \"u!\",  new caterwaul.syntax ( \"_x\")))") , qsx : ( "new caterwaul.syntax ( \"u!\",  new caterwaul.syntax ( \"_x\"))") , qsy : ( "new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \"_f\") ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"_x\") ,new caterwaul.syntax ( \"_x0\"))).prefix ( \" \")") , qsz : ( "new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \"_f\") ,new caterwaul.syntax ( \"_x\")).prefix ( \" \")") , qs10 : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_var@0\") ,new caterwaul.syntax ( \"_init\")).prefix ( \" \") ,new caterwaul.syntax ( \"_x\")).prefix ( \" \")") , qs11 : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"[\",  new caterwaul.syntax ( \"_init\")) ,new caterwaul.syntax ( \"_x\")).prefix ( \" \")") , qs12 : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_var@0\") ,new caterwaul.syntax ( \"_x\")).prefix ( \" \")") , qs13 : ( "new caterwaul.syntax ( \"[\",  new caterwaul.syntax ( \"_x\"))") , qs14 : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"_x\")).prefix ( \" \")") , qs15 : ( "new caterwaul.syntax ( \"_x\")") , qs16 : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"+\", new caterwaul.syntax ( \"_xs\") ,new caterwaul.syntax ( \"_ys\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")") , qs17 : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_x\"))).prefix ( \" \")") , qs18 : ( "new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"_x\")).prefix ( \" \"))") , qs19 : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"_x\") ,new caterwaul.syntax ( \"_y\")).prefix ( \" \")).prefix ( \" \")") , qs1a : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"_x\")).prefix ( \" \") ,new caterwaul.syntax ( \"_y\")).prefix ( \" \")") , qs1b : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \"_xs\") ,new caterwaul.syntax ( \"_ys\")).prefix ( \" \")).prefix ( \" \")") , qs1c : ( "new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"_xs\")).prefix ( \" \") ,new caterwaul.syntax ( \"_ys\")).prefix ( \" \")") , qs1d : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"[\",  new caterwaul.syntax ( \"_x\"))).prefix ( \" \")") , qs1e : ( "new caterwaul.syntax ( \"[\",  new caterwaul.syntax ( \"_x\"))") , qs1f : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"_x\") ,new caterwaul.syntax ( \"_y\").prefix ( \" \"))).prefix ( \" \")") , qs1g : ( "new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"_x\")).prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\").prefix ( \" \") ,new caterwaul.syntax ( \"_y\")).prefix ( \" \"))") , qs1h : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"_xs\") ,new caterwaul.syntax ( \"_p\"))).prefix ( \" \")") , qs1i : ( "new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"_xs\")).prefix ( \" \") ,new caterwaul.syntax ( \"_p\"))") , qs1j : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"u~\",  new caterwaul.syntax ( \"[\",  new caterwaul.syntax ( \"_x\")))).prefix ( \" \")") , qs1k : ( "new caterwaul.syntax ( \"[\",  new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"_x\")).prefix ( \" \"))") , qs1l : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"u~\",  new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \"_xs\") ,new caterwaul.syntax ( \"_ys\")).prefix ( \" \"))).prefix ( \" \")") , qs1m : ( "new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"_xs\")).prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"_ys\")).prefix ( \" \")).prefix ( \" \")") , qs1n : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"?\", new caterwaul.syntax ( \"_x\") ,new caterwaul.syntax ( \"_y\").prefix ( \" \").infix ( \" \") ,new caterwaul.syntax ( \"_z\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")") , qs1o : ( "new caterwaul.syntax ( \"?\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"_x\")).prefix ( \" \")) ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"_y\")).prefix ( \" \")).prefix ( \" \").infix ( \" \") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"_z\")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \")") , qs1p : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"&&\", new caterwaul.syntax ( \"_x\") ,new caterwaul.syntax ( \"_y\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")") , qs1q : ( "new caterwaul.syntax ( \"&&\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"_x\")).prefix ( \" \")) ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"_y\")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \")") , qs1r : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"||\", new caterwaul.syntax ( \"_x\") ,new caterwaul.syntax ( \"_y\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")") , qs1s : ( "new caterwaul.syntax ( \"||\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"_x\")).prefix ( \" \")) ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"_y\")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \")") , qs1t : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"u+\",  new caterwaul.syntax ( \"_xs\"))).prefix ( \" \")") , qs1u : ( "new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"Array\") ,new caterwaul.syntax ( \"prototype\")) ,new caterwaul.syntax ( \"slice\")) ,new caterwaul.syntax ( \"call\")) ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"_xs\")).prefix ( \" \"))).prefix ( \" \")") , qs1v : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"%\", new caterwaul.syntax ( \"_xs\") ,new caterwaul.syntax ( \"_thing\")).prefix ( \" \")).prefix ( \" \")") , qs1w : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"*\", new caterwaul.syntax ( \"_xs\") ,new caterwaul.syntax ( \"_thing\")).prefix ( \" \")).prefix ( \" \")") , qs1x : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"/\", new caterwaul.syntax ( \"_xs\") ,new caterwaul.syntax ( \"_thing\")).prefix ( \" \")).prefix ( \" \")") , qs1y : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"|\", new caterwaul.syntax ( \"_xs\") ,new caterwaul.syntax ( \"_thing\")).prefix ( \" \")).prefix ( \" \")") , qs1z : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"*\", new caterwaul.syntax ( \"%\", new caterwaul.syntax ( \"_xs\") ,new caterwaul.syntax ( \"k\")).prefix ( \" \") ,new caterwaul.syntax ( \"_thing\"))).prefix ( \" \")") , qs20 : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"*\", new caterwaul.syntax ( \"%\", new caterwaul.syntax ( \"_xs\") ,new caterwaul.syntax ( \"v\")).prefix ( \" \") ,new caterwaul.syntax ( \"_thing\"))).prefix ( \" \")") , qs21 : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"%\", new caterwaul.syntax ( \"%\", new caterwaul.syntax ( \"_xs\") ,new caterwaul.syntax ( \"k\")).prefix ( \" \") ,new caterwaul.syntax ( \"_thing\"))).prefix ( \" \")") , qs22 : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"%\", new caterwaul.syntax ( \"%\", new caterwaul.syntax ( \"_xs\") ,new caterwaul.syntax ( \"v\")).prefix ( \" \") ,new caterwaul.syntax ( \"_thing\"))).prefix ( \" \")") , qs23 : ( "new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"function\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"o\")).prefix ( \" \") ,new caterwaul.syntax ( \"{\",  new caterwaul.syntax ( \"_body\")).prefix ( \" \"))) ,new caterwaul.syntax ( \"call\")) ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"this\") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"_o\")).prefix ( \" \")).prefix ( \" \"))).prefix ( \" \")") , qs24 : ( "new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"function\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"i\") ,new caterwaul.syntax ( \"u\").prefix ( \" \")) ,new caterwaul.syntax ( \"s\").prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"{\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"if\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"<=\", new caterwaul.syntax ( \"*\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"-\", new caterwaul.syntax ( \"u\") ,new caterwaul.syntax ( \"i\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"s\").prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"0\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"[\",  new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"r\").prefix ( \" \") ,new caterwaul.syntax ( \"[\",  new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"d\").prefix ( \" \") ,new caterwaul.syntax ( \"-\", new caterwaul.syntax ( \"u\").prefix ( \" \") ,new caterwaul.syntax ( \"i\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \"))) ,new caterwaul.syntax ( \"?\", new caterwaul.syntax ( \">\", new caterwaul.syntax ( \"d\").prefix ( \" \") ,new caterwaul.syntax ( \"0\").prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"<\", new caterwaul.syntax ( \"i\").prefix ( \" \") ,new caterwaul.syntax ( \"u\").prefix ( \"  \").infix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \">\", new caterwaul.syntax ( \"i\").prefix ( \" \") ,new caterwaul.syntax ( \"u\").prefix ( \"  \")).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"+=\", new caterwaul.syntax ( \"i\").prefix ( \" \") ,new caterwaul.syntax ( \"s\").prefix ( \" \")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"r\").prefix ( \" \") ,new caterwaul.syntax ( \"push\")) ,new caterwaul.syntax ( \"i\")).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"r\").prefix ( \" \")).prefix ( \" \"))).prefix ( \" \"))) ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_l\")) ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_u\")).prefix ( \" \")) ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_step\")).prefix ( \" \"))).prefix ( \" \")") , qs25 : ( "new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"function\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"i\") ,new caterwaul.syntax ( \"u\").prefix ( \" \")) ,new caterwaul.syntax ( \"s\").prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"{\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"if\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"||\", new caterwaul.syntax ( \"<\", new caterwaul.syntax ( \"*\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"-\", new caterwaul.syntax ( \"u\") ,new caterwaul.syntax ( \"i\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"s\").prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"0\").prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"u!\",  new caterwaul.syntax ( \"s\")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"[\",  new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"r\").prefix ( \" \") ,new caterwaul.syntax ( \"[\",  new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"d\").prefix ( \" \") ,new caterwaul.syntax ( \"-\", new caterwaul.syntax ( \"u\").prefix ( \" \") ,new caterwaul.syntax ( \"i\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \"))) ,new caterwaul.syntax ( \"?\", new caterwaul.syntax ( \">\", new caterwaul.syntax ( \"d\").prefix ( \" \") ,new caterwaul.syntax ( \"0\").prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"<=\", new caterwaul.syntax ( \"i\").prefix ( \" \") ,new caterwaul.syntax ( \"u\").prefix ( \" \").infix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \">=\", new caterwaul.syntax ( \"i\").prefix ( \" \") ,new caterwaul.syntax ( \"u\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"+=\", new caterwaul.syntax ( \"i\").prefix ( \" \") ,new caterwaul.syntax ( \"s\").prefix ( \" \")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"r\").prefix ( \" \") ,new caterwaul.syntax ( \"push\")) ,new caterwaul.syntax ( \"i\")).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"r\").prefix ( \" \")).prefix ( \" \"))).prefix ( \" \"))) ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_l\")) ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_u\")).prefix ( \" \")) ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"_step\")).prefix ( \" \"))).prefix ( \" \")") , qs26 : ( "new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"ks\").prefix ( \" \") ,new caterwaul.syntax ( \"[\",  new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \"in\", new caterwaul.syntax ( \"k\").prefix ( \" \") ,new caterwaul.syntax ( \"o\").prefix ( \" \")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"&&\", new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"Object\").prefix ( \" \") ,new caterwaul.syntax ( \"prototype\")) ,new caterwaul.syntax ( \"hasOwnProperty\")) ,new caterwaul.syntax ( \"call\")) ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"o\") ,new caterwaul.syntax ( \"k\").prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"ks\").prefix ( \" \") ,new caterwaul.syntax ( \"push\")) ,new caterwaul.syntax ( \"k\")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"ks\").prefix ( \" \")).prefix ( \" \"))") , qs27 : ( "new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"vs\").prefix ( \" \") ,new caterwaul.syntax ( \"[\",  new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \"in\", new caterwaul.syntax ( \"k\").prefix ( \" \") ,new caterwaul.syntax ( \"o\").prefix ( \" \")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"&&\", new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"Object\").prefix ( \" \") ,new caterwaul.syntax ( \"prototype\")) ,new caterwaul.syntax ( \"hasOwnProperty\")) ,new caterwaul.syntax ( \"call\")) ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"o\") ,new caterwaul.syntax ( \"k\").prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"vs\").prefix ( \" \") ,new caterwaul.syntax ( \"push\")) ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"o\") ,new caterwaul.syntax ( \"k\")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"vs\").prefix ( \" \")).prefix ( \" \"))") , qs28 : ( "new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"ps\").prefix ( \" \") ,new caterwaul.syntax ( \"[\",  new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \"in\", new caterwaul.syntax ( \"k\").prefix ( \" \") ,new caterwaul.syntax ( \"o\").prefix ( \" \")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"&&\", new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"Object\").prefix ( \" \") ,new caterwaul.syntax ( \"prototype\")) ,new caterwaul.syntax ( \"hasOwnProperty\")) ,new caterwaul.syntax ( \"call\")) ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"o\") ,new caterwaul.syntax ( \"k\").prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"ps\").prefix ( \" \") ,new caterwaul.syntax ( \"push\")) ,new caterwaul.syntax ( \"[\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"k\") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"o\").prefix ( \" \") ,new caterwaul.syntax ( \"k\")).prefix ( \" \")))).prefix ( \" \")).prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"ps\").prefix ( \" \")).prefix ( \" \"))") , qs29 : ( "new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"r\").prefix ( \" \") ,new caterwaul.syntax ( \"{\",  new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"i\").prefix ( \" \") ,new caterwaul.syntax ( \"0\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"l\").prefix ( \" \") ,new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"o\").prefix ( \" \") ,new caterwaul.syntax ( \"length\"))).prefix ( \" \")) ,new caterwaul.syntax ( \"x\").prefix ( \" \"))) ,new caterwaul.syntax ( \"<\", new caterwaul.syntax ( \"i\").prefix ( \" \") ,new caterwaul.syntax ( \"l\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"u++\",  new caterwaul.syntax ( \"i\")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"x\").prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"o\").prefix ( \" \") ,new caterwaul.syntax ( \"i\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"r\").prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"x\") ,new caterwaul.syntax ( \"0\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"x\").prefix ( \" \") ,new caterwaul.syntax ( \"1\")).prefix ( \" \")).prefix ( \" \"))) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"r\").prefix ( \" \")).prefix ( \" \"))") , qs2a : ( "new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"for\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \";\", new caterwaul.syntax ( \";\", new caterwaul.syntax ( \"var\",  new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"r\").prefix ( \" \") ,new caterwaul.syntax ( \"{\",  new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"i\").prefix ( \" \") ,new caterwaul.syntax ( \"0\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"l\").prefix ( \" \") ,new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"o\").prefix ( \" \") ,new caterwaul.syntax ( \"length\"))).prefix ( \" \")) ,new caterwaul.syntax ( \"x\").prefix ( \" \"))) ,new caterwaul.syntax ( \"<\", new caterwaul.syntax ( \"i\").prefix ( \" \") ,new caterwaul.syntax ( \"l\").prefix ( \" \")).prefix ( \" \")) ,new caterwaul.syntax ( \"u++\",  new caterwaul.syntax ( \"i\")).prefix ( \" \"))).prefix ( \" \") ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"x\").prefix ( \" \") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"o\").prefix ( \" \") ,new caterwaul.syntax ( \"i\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"()\", new caterwaul.syntax ( \".\", new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"||\", new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"r\") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"x\") ,new caterwaul.syntax ( \"0\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"(\",  new caterwaul.syntax ( \"=\", new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"r\") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"x\") ,new caterwaul.syntax ( \"0\")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"[\",  new caterwaul.syntax ( \"\").prefix ( \" \")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \")).prefix ( \" \") ,new caterwaul.syntax ( \"push\")) ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"x\") ,new caterwaul.syntax ( \"1\")).prefix ( \" \")).prefix ( \" \"))) ,new caterwaul.syntax ( \"return\",  new caterwaul.syntax ( \"r\").prefix ( \" \")).prefix ( \" \"))") , qs2b : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"n\") ,new caterwaul.syntax ( \"_u\")).prefix ( \" \")).prefix ( \" \")") , qs2c : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"ni\") ,new caterwaul.syntax ( \"_u\")).prefix ( \" \")).prefix ( \" \")") , qs2d : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"n\") ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"_l\") ,new caterwaul.syntax ( \"_u\").prefix ( \" \"))).prefix ( \" \")).prefix ( \" \")") , qs2e : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"ni\") ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"_l\") ,new caterwaul.syntax ( \"_u\").prefix ( \" \"))).prefix ( \" \")).prefix ( \" \")") , qs2f : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"n\") ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"_l\") ,new caterwaul.syntax ( \"_u\").prefix ( \" \")) ,new caterwaul.syntax ( \"_step\").prefix ( \" \"))).prefix ( \" \")).prefix ( \" \")") , qs2g : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"ni\") ,new caterwaul.syntax ( \",\", new caterwaul.syntax ( \",\", new caterwaul.syntax ( \"_l\") ,new caterwaul.syntax ( \"_u\").prefix ( \" \")) ,new caterwaul.syntax ( \"_step\").prefix ( \" \"))).prefix ( \" \")).prefix ( \" \")") , qs2h : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"/\", new caterwaul.syntax ( \"_o\") ,new caterwaul.syntax ( \"keys\")).prefix ( \" \")).prefix ( \" \")") , qs2i : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"|\", new caterwaul.syntax ( \"_o\") ,new caterwaul.syntax ( \"object\")).prefix ( \" \")).prefix ( \" \")") , qs2j : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"/\", new caterwaul.syntax ( \"_o\") ,new caterwaul.syntax ( \"mobject\")).prefix ( \" \")).prefix ( \" \")") , qs2k : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"/\", new caterwaul.syntax ( \"_o\") ,new caterwaul.syntax ( \"values\")).prefix ( \" \")).prefix ( \" \")") , qs2l : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"-\", new caterwaul.syntax ( \"_o\") ,new caterwaul.syntax ( \"object\")).prefix ( \" \")).prefix ( \" \")") , qs2m : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"-\", new caterwaul.syntax ( \"_o\") ,new caterwaul.syntax ( \"mobject\")).prefix ( \" \")).prefix ( \" \")") , qs2n : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"/\", new caterwaul.syntax ( \"_o\") ,new caterwaul.syntax ( \"pairs\")).prefix ( \" \")).prefix ( \" \")") , qs2o : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"/\", new caterwaul.syntax ( \"_o\") ,new caterwaul.syntax ( \"object\")).prefix ( \" \")).prefix ( \" \")") , qs2p : ( "new caterwaul.syntax ( \"[]\", new caterwaul.syntax ( \"S\") ,new caterwaul.syntax ( \"|\", new caterwaul.syntax ( \"_o\") ,new caterwaul.syntax ( \"mobject\")).prefix ( \" \")).prefix ( \" \")")};return(result)}).call (this, new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "_expression")).prefix ( " ") ,new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "function", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_xs")).prefix ( " ") ,new caterwaul.syntax ( "{",  new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "_x0").prefix ( " ")) ,new caterwaul.syntax ( "_xi").prefix ( " ")) ,new caterwaul.syntax ( "_xl").prefix ( " ")) ,new caterwaul.syntax ( "_xr").prefix ( " "))) ,new caterwaul.syntax ( "_body").prefix ( " "))).prefix ( " "))) ,new caterwaul.syntax ( "call")) ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "this") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S").prefix ( " ") ,new caterwaul.syntax ( "_s")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( ";", new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xr").prefix ( " ") ,new caterwaul.syntax ( "new",  new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "constructor")) ,new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xi").prefix ( " ") ,new caterwaul.syntax ( "0").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xl").prefix ( " ") ,new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "length"))).prefix ( " "))) ,new caterwaul.syntax ( "<", new caterwaul.syntax ( "_xi").prefix ( " ") ,new caterwaul.syntax ( "_xl").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "u++",  new caterwaul.syntax ( "_xi")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "_xi")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xr").prefix ( " ") ,new caterwaul.syntax ( "push")) ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_f"))).prefix ( " "))) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_xr").prefix ( " ")).prefix ( "                                        ")) ,new caterwaul.syntax ( ";", new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xi").prefix ( "                              ") ,new caterwaul.syntax ( "0").prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xl").prefix ( " ") ,new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "length"))).prefix ( " "))) ,new caterwaul.syntax ( "<", new caterwaul.syntax ( "_xi").prefix ( " ") ,new caterwaul.syntax ( "_xl").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "u++",  new caterwaul.syntax ( "_xi")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "_xi")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_f")).prefix ( " "))) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_xs").prefix ( " ")).prefix ( "                                                  ")) ,new caterwaul.syntax ( ";", new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xr").prefix ( " ") ,new caterwaul.syntax ( "new",  new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "constructor")) ,new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xi").prefix ( " ") ,new caterwaul.syntax ( "0").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xl").prefix ( " ") ,new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "length"))).prefix ( " "))) ,new caterwaul.syntax ( "<", new caterwaul.syntax ( "_xi").prefix ( " ") ,new caterwaul.syntax ( "_xl").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "u++",  new caterwaul.syntax ( "_xi")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "_xi")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xr").prefix ( " ") ,new caterwaul.syntax ( "push")) ,new caterwaul.syntax ( "apply")) ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "_xr") ,new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( "Array").prefix ( " ") ,new caterwaul.syntax ( "prototype")) ,new caterwaul.syntax ( "slice")) ,new caterwaul.syntax ( "call")) ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_f"))).prefix ( " "))).prefix ( " "))) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_xr").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( ";", new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "_xs").prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xi").prefix ( " ") ,new caterwaul.syntax ( "0").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "_x0").prefix ( " ")) ,new caterwaul.syntax ( "_xl").prefix ( " "))) ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x0").prefix ( " ") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_init")).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "u++",  new caterwaul.syntax ( "_xi")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_f")).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_x").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( ";", new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xr").prefix ( " ") ,new caterwaul.syntax ( "new",  new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "constructor")) ,new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xi").prefix ( " ") ,new caterwaul.syntax ( "0").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xl").prefix ( " ") ,new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "length"))).prefix ( " "))) ,new caterwaul.syntax ( "<", new caterwaul.syntax ( "_xi").prefix ( "    ") ,new caterwaul.syntax ( "_xl").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "u++",  new caterwaul.syntax ( "_xi")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "_xi")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "&&", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_f")).prefix ( " ") ,new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xr").prefix ( " ") ,new caterwaul.syntax ( "push")) ,new caterwaul.syntax ( "_x")).prefix ( " ")).prefix ( " "))) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_xr").prefix ( " ")).prefix ( "      ")) ,new caterwaul.syntax ( ";", new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xr").prefix ( " ") ,new caterwaul.syntax ( "new",  new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "constructor")) ,new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xi").prefix ( " ") ,new caterwaul.syntax ( "0").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xl").prefix ( " ") ,new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "length"))).prefix ( " "))) ,new caterwaul.syntax ( "<", new caterwaul.syntax ( "_xi").prefix ( "    ") ,new caterwaul.syntax ( "_xl").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "u++",  new caterwaul.syntax ( "_xi")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "_xi")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "||", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_f")).prefix ( " ") ,new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xr").prefix ( " ") ,new caterwaul.syntax ( "push")) ,new caterwaul.syntax ( "_x")).prefix ( " ")).prefix ( " "))) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_xr").prefix ( " ")).prefix ( "      ")) ,new caterwaul.syntax ( ";", new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xr").prefix ( " ") ,new caterwaul.syntax ( "new",  new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "constructor")) ,new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xi").prefix ( " ") ,new caterwaul.syntax ( "0").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xl").prefix ( " ") ,new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "length"))).prefix ( " ")) ,new caterwaul.syntax ( "y").prefix ( " "))) ,new caterwaul.syntax ( "<", new caterwaul.syntax ( "_xi").prefix ( " ") ,new caterwaul.syntax ( "_xl").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "u++",  new caterwaul.syntax ( "_xi")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "_xi")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "&&", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "=", new caterwaul.syntax ( "y") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_f")).prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xr").prefix ( " ") ,new caterwaul.syntax ( "push")) ,new caterwaul.syntax ( "y")).prefix ( " ")).prefix ( " "))) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_xr").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( ";", new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xr").prefix ( " ") ,new caterwaul.syntax ( "new",  new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "constructor")) ,new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xi").prefix ( " ") ,new caterwaul.syntax ( "0").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xl").prefix ( " ") ,new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "length"))).prefix ( " ")) ,new caterwaul.syntax ( "_x0").prefix ( " "))) ,new caterwaul.syntax ( "<", new caterwaul.syntax ( "_xi").prefix ( " ") ,new caterwaul.syntax ( "_xl").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "u++",  new caterwaul.syntax ( "_xi")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "_xi")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "&&", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x0") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_init")).prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xr").prefix ( " ") ,new caterwaul.syntax ( "push")) ,new caterwaul.syntax ( "_f")).prefix ( " ")).prefix ( " "))) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_xr").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( ";", new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x0").prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "0")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xi").prefix ( " ") ,new caterwaul.syntax ( "1").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xl").prefix ( " ") ,new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "length"))).prefix ( " "))) ,new caterwaul.syntax ( "<", new caterwaul.syntax ( "_xi").prefix ( "            ") ,new caterwaul.syntax ( "_xl").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "u++",  new caterwaul.syntax ( "_xi")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "_xi")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x0").prefix ( " ") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_f")).prefix ( " ")).prefix ( " "))) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_x0").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( ";", new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xl").prefix ( " ") ,new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "length"))).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xi").prefix ( " ") ,new caterwaul.syntax ( "-", new caterwaul.syntax ( "_xl").prefix ( " ") ,new caterwaul.syntax ( "2").prefix ( " ")).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x0").prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "-", new caterwaul.syntax ( "_xl") ,new caterwaul.syntax ( "1").prefix ( " ")).prefix ( " ")).prefix ( " ")).prefix ( " "))) ,new caterwaul.syntax ( ">=", new caterwaul.syntax ( "_xi").prefix ( " ") ,new caterwaul.syntax ( "0").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "u--",  new caterwaul.syntax ( "_xi")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "_xi")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x0").prefix ( " ") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_f")).prefix ( " ")).prefix ( " "))) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_x0").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( ";", new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xr").prefix ( " ") ,new caterwaul.syntax ( "[",  new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "_xs").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xi").prefix ( " ") ,new caterwaul.syntax ( "0").prefix ( " ")).prefix ( " "))) ,new caterwaul.syntax ( "!==", new caterwaul.syntax ( "_x").prefix ( "                      ") ,new caterwaul.syntax ( "null").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "u++",  new caterwaul.syntax ( "_xi")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xr").prefix ( " ") ,new caterwaul.syntax ( "push")) ,new caterwaul.syntax ( "_x")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_f")).prefix ( " ")).prefix ( " "))) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_xr").prefix ( " ")).prefix ( "   ")) ,new caterwaul.syntax ( ";", new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x0").prefix ( " ") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_init")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xi").prefix ( " ") ,new caterwaul.syntax ( "0").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xl").prefix ( " ") ,new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "length"))).prefix ( " "))) ,new caterwaul.syntax ( "<", new caterwaul.syntax ( "_xi").prefix ( "      ") ,new caterwaul.syntax ( "_xl").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "u++",  new caterwaul.syntax ( "_xi")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "_xi")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x0").prefix ( " ") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_f")).prefix ( " ")).prefix ( " "))) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_x0").prefix ( " ")).prefix ( "      ")) ,new caterwaul.syntax ( ";", new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xl").prefix ( " ") ,new caterwaul.syntax ( "-", new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "length")) ,new caterwaul.syntax ( "1").prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xi").prefix ( " ") ,new caterwaul.syntax ( "_xl").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x0").prefix ( " ") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_init")).prefix ( " ")).prefix ( " "))) ,new caterwaul.syntax ( ">=", new caterwaul.syntax ( "_xi").prefix ( " ") ,new caterwaul.syntax ( "0").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "u--",  new caterwaul.syntax ( "_xi")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "_xi")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x0").prefix ( " ") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_f")).prefix ( " ")).prefix ( " "))) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_x0").prefix ( " ")).prefix ( "      ")) ,new caterwaul.syntax ( ";", new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xr").prefix ( " ") ,new caterwaul.syntax ( "[",  new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "_xs").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xi").prefix ( " ") ,new caterwaul.syntax ( "0").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "_x0").prefix ( " "))) ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x0").prefix ( "          ") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_init")).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "u++",  new caterwaul.syntax ( "_xi")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xr").prefix ( " ") ,new caterwaul.syntax ( "push")) ,new caterwaul.syntax ( "_x")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_f")).prefix ( " ")).prefix ( " "))) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_xr").prefix ( " ")).prefix ( "        ")) ,new caterwaul.syntax ( "i;", new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "0")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xi").prefix ( " ") ,new caterwaul.syntax ( "0").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xl").prefix ( " ") ,new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "length"))).prefix ( " ")) ,new caterwaul.syntax ( "x").prefix ( " "))) ,new caterwaul.syntax ( "<", new caterwaul.syntax ( "_xi").prefix ( " ") ,new caterwaul.syntax ( "_xl").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "u++",  new caterwaul.syntax ( "_xi")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "{",  new caterwaul.syntax ( ";", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "_xi")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "if", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "=", new caterwaul.syntax ( "x") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_f")).prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "x").prefix ( " ")).prefix ( " ")).prefix ( " "))).prefix ( " ")) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "false").prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "i;", new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "0")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xi").prefix ( " ") ,new caterwaul.syntax ( "0").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xl").prefix ( " ") ,new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "length"))).prefix ( " ")) ,new caterwaul.syntax ( "x").prefix ( " "))) ,new caterwaul.syntax ( "<", new caterwaul.syntax ( "_xi").prefix ( " ") ,new caterwaul.syntax ( "_xl").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "u++",  new caterwaul.syntax ( "_xi")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "{",  new caterwaul.syntax ( ";", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "_xi")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "if", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "=", new caterwaul.syntax ( "x") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_f")).prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "false").prefix ( " ")).prefix ( " ")).prefix ( " "))).prefix ( " ")) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "true").prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "i;", new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xl").prefix ( " ") ,new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "length"))).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xi").prefix ( " ") ,new caterwaul.syntax ( "-", new caterwaul.syntax ( "_xl").prefix ( " ") ,new caterwaul.syntax ( "1").prefix ( " ")).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "_xi")).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "x").prefix ( " "))) ,new caterwaul.syntax ( ">=", new caterwaul.syntax ( "_xi").prefix ( " ") ,new caterwaul.syntax ( "0").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "u--",  new caterwaul.syntax ( "_xi")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "{",  new caterwaul.syntax ( ";", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "_xi")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "if", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "=", new caterwaul.syntax ( "x") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_f")).prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "x").prefix ( " ")).prefix ( " ")).prefix ( " "))).prefix ( " ")) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "false").prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "i;", new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "0")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xi").prefix ( " ") ,new caterwaul.syntax ( "0").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xl").prefix ( " ") ,new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "length"))).prefix ( " ")) ,new caterwaul.syntax ( "x").prefix ( " "))) ,new caterwaul.syntax ( "<", new caterwaul.syntax ( "_xi").prefix ( " ") ,new caterwaul.syntax ( "_xl").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "u++",  new caterwaul.syntax ( "_xi")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "{",  new caterwaul.syntax ( ";", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "_xi")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "if", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x0") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_init")).prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_f").prefix ( " ")).prefix ( " ")).prefix ( " "))).prefix ( " ")) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "false").prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "i;", new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xl").prefix ( " ") ,new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "length"))).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xi").prefix ( " ") ,new caterwaul.syntax ( "-", new caterwaul.syntax ( "_xl").prefix ( " ") ,new caterwaul.syntax ( "1").prefix ( " ")).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "_xi")).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "x").prefix ( " "))) ,new caterwaul.syntax ( ">=", new caterwaul.syntax ( "_xi").prefix ( " ") ,new caterwaul.syntax ( "0").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "u--",  new caterwaul.syntax ( "_xi")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "{",  new caterwaul.syntax ( ";", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "_xi")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "if", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x0") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_init")).prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_f").prefix ( " ")).prefix ( " ")).prefix ( " "))).prefix ( " ")) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "false").prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "_xs")).prefix ( " ")) ,new caterwaul.syntax ( "concat")) ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "_ys")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xr").prefix ( " ") ,new caterwaul.syntax ( "new",  new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "constructor")) ,new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ")).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "var",  new caterwaul.syntax ( "in", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "_xs").prefix ( " ")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "if", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( "Object") ,new caterwaul.syntax ( "prototype")) ,new caterwaul.syntax ( "hasOwnProperty")) ,new caterwaul.syntax ( "call")) ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "_xs") ,new caterwaul.syntax ( "_x").prefix ( " "))).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xr").prefix ( " ") ,new caterwaul.syntax ( "_f")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "_x")).prefix ( " ")).prefix ( " ")).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_xr").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( ";", new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "var",  new caterwaul.syntax ( "in", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "_xs").prefix ( " ")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "if", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( "Object") ,new caterwaul.syntax ( "prototype")) ,new caterwaul.syntax ( "hasOwnProperty")) ,new caterwaul.syntax ( "call")) ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "_xs") ,new caterwaul.syntax ( "_x").prefix ( " "))).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "_f").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_xs").prefix ( " ")).prefix ( "                ")) ,new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xr").prefix ( " ") ,new caterwaul.syntax ( "new",  new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "constructor")) ,new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ")).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "var",  new caterwaul.syntax ( "in", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "_xs").prefix ( " ")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "if", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "&&", new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( "Object") ,new caterwaul.syntax ( "prototype")) ,new caterwaul.syntax ( "hasOwnProperty")) ,new caterwaul.syntax ( "call")) ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "_xs") ,new caterwaul.syntax ( "_x").prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_f")).prefix ( "      ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xr").prefix ( "  ") ,new caterwaul.syntax ( "_x")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "_x")).prefix ( " ")).prefix ( " ")).prefix ( " ")).prefix ( "    ")) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_xr").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xr").prefix ( " ") ,new caterwaul.syntax ( "new",  new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "constructor")) ,new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ")).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "var",  new caterwaul.syntax ( "in", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "_xs").prefix ( " ")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "if", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "&&", new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( "Object") ,new caterwaul.syntax ( "prototype")) ,new caterwaul.syntax ( "hasOwnProperty")) ,new caterwaul.syntax ( "call")) ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "_xs") ,new caterwaul.syntax ( "_x").prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "u!",  new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_f")).prefix ( " ")).prefix ( "    ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xr").prefix ( "  ") ,new caterwaul.syntax ( "_x")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "_x")).prefix ( " ")).prefix ( " ")).prefix ( " ")).prefix ( "    ")) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_xr").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xr").prefix ( " ") ,new caterwaul.syntax ( "new",  new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "constructor")) ,new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "x").prefix ( " "))) ,new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "var",  new caterwaul.syntax ( "in", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "_xs").prefix ( " ")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "if", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "&&", new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( "Object") ,new caterwaul.syntax ( "prototype")) ,new caterwaul.syntax ( "hasOwnProperty")) ,new caterwaul.syntax ( "call")) ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "_xs") ,new caterwaul.syntax ( "_x").prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "=", new caterwaul.syntax ( "x") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_f")).prefix ( " ")).prefix ( " ")).prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xr").prefix ( " ") ,new caterwaul.syntax ( "x")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "_x")).prefix ( " ")).prefix ( "  ")).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_xr").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xr").prefix ( " ") ,new caterwaul.syntax ( "new",  new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "constructor")) ,new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ")).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "var",  new caterwaul.syntax ( "in", new caterwaul.syntax ( "k").prefix ( "  ") ,new caterwaul.syntax ( "_xs").prefix ( " ")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "if", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( "Object") ,new caterwaul.syntax ( "prototype")) ,new caterwaul.syntax ( "hasOwnProperty")) ,new caterwaul.syntax ( "call")) ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "_xs") ,new caterwaul.syntax ( "k").prefix ( " "))).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "k")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xr").prefix ( " ") ,new caterwaul.syntax ( "k")).prefix ( " ") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_f")).prefix ( " ")).prefix ( " "))).prefix ( " ")).prefix ( "    ")) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_xr").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( ";", new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "var",  new caterwaul.syntax ( "in", new caterwaul.syntax ( "k").prefix ( "  ") ,new caterwaul.syntax ( "_xs").prefix ( " ")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "if", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( "Object") ,new caterwaul.syntax ( "prototype")) ,new caterwaul.syntax ( "hasOwnProperty")) ,new caterwaul.syntax ( "call")) ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "_xs") ,new caterwaul.syntax ( "k").prefix ( " "))).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "k")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "_f").prefix ( " "))).prefix ( " ")) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_xs").prefix ( " ")).prefix ( "            ")) ,new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xr").prefix ( " ") ,new caterwaul.syntax ( "new",  new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "constructor")) ,new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ")).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "var",  new caterwaul.syntax ( "in", new caterwaul.syntax ( "k").prefix ( "  ") ,new caterwaul.syntax ( "_xs").prefix ( " ")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "if", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( "Object") ,new caterwaul.syntax ( "prototype")) ,new caterwaul.syntax ( "hasOwnProperty")) ,new caterwaul.syntax ( "call")) ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "_xs") ,new caterwaul.syntax ( "k").prefix ( " "))).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "k")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "&&", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_f")).prefix ( "        ") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "=", new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xr") ,new caterwaul.syntax ( "k")).prefix ( " ") ,new caterwaul.syntax ( "_x").prefix ( " ")).prefix ( " ")).prefix ( " ")).prefix ( " "))).prefix ( " ")).prefix ( "    ")) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_xr").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xr").prefix ( " ") ,new caterwaul.syntax ( "new",  new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "constructor")) ,new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ")).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "var",  new caterwaul.syntax ( "in", new caterwaul.syntax ( "k").prefix ( "  ") ,new caterwaul.syntax ( "_xs").prefix ( " ")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "if", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( "Object") ,new caterwaul.syntax ( "prototype")) ,new caterwaul.syntax ( "hasOwnProperty")) ,new caterwaul.syntax ( "call")) ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "_xs") ,new caterwaul.syntax ( "k").prefix ( " "))).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "k")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "||", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_f")).prefix ( "        ") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "=", new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xr") ,new caterwaul.syntax ( "k")).prefix ( " ") ,new caterwaul.syntax ( "_x").prefix ( " ")).prefix ( " ")).prefix ( " ")).prefix ( " "))).prefix ( " ")).prefix ( "    ")) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_xr").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_xr").prefix ( " ") ,new caterwaul.syntax ( "new",  new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "constructor")) ,new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "x").prefix ( " "))) ,new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "var",  new caterwaul.syntax ( "in", new caterwaul.syntax ( "k").prefix ( "  ") ,new caterwaul.syntax ( "_xs").prefix ( " ")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "if", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( "Object") ,new caterwaul.syntax ( "prototype")) ,new caterwaul.syntax ( "hasOwnProperty")) ,new caterwaul.syntax ( "call")) ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "_xs") ,new caterwaul.syntax ( "k").prefix ( " "))).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "_x").prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xs").prefix ( " ") ,new caterwaul.syntax ( "k")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "x").prefix ( " ") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_f")).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "&&", new caterwaul.syntax ( "x").prefix ( " ") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "=", new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_xr") ,new caterwaul.syntax ( "k")).prefix ( " ") ,new caterwaul.syntax ( "x").prefix ( "  ")).prefix ( " ")).prefix ( " ")).prefix ( " "))).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "_xr").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "u~",  new caterwaul.syntax ( "u!",  new caterwaul.syntax ( "_x"))) ,new caterwaul.syntax ( "u!",  new caterwaul.syntax ( "_x")) ,new caterwaul.syntax ( "()", new caterwaul.syntax ( "_f") ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "_x") ,new caterwaul.syntax ( "_x0"))).prefix ( " ") ,new caterwaul.syntax ( "()", new caterwaul.syntax ( "_f") ,new caterwaul.syntax ( "_x")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_var@0") ,new caterwaul.syntax ( "_init")).prefix ( " ") ,new caterwaul.syntax ( "_x")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "[",  new caterwaul.syntax ( "_init")) ,new caterwaul.syntax ( "_x")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_var@0") ,new caterwaul.syntax ( "_x")).prefix ( " ") ,new caterwaul.syntax ( "[",  new caterwaul.syntax ( "_x")) ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "_x")).prefix ( " ") ,new caterwaul.syntax ( "_x") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "+", new caterwaul.syntax ( "_xs") ,new caterwaul.syntax ( "_ys").prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_x"))).prefix ( " ") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "_x")).prefix ( " ")) ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "_x") ,new caterwaul.syntax ( "_y")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "_x")).prefix ( " ") ,new caterwaul.syntax ( "_y")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "()", new caterwaul.syntax ( "_xs") ,new caterwaul.syntax ( "_ys")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "()", new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "_xs")).prefix ( " ") ,new caterwaul.syntax ( "_ys")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "[",  new caterwaul.syntax ( "_x"))).prefix ( " ") ,new caterwaul.syntax ( "[",  new caterwaul.syntax ( "_x")) ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "_x") ,new caterwaul.syntax ( "_y").prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "_x")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S").prefix ( " ") ,new caterwaul.syntax ( "_y")).prefix ( " ")) ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( ".", new caterwaul.syntax ( "_xs") ,new caterwaul.syntax ( "_p"))).prefix ( " ") ,new caterwaul.syntax ( ".", new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "_xs")).prefix ( " ") ,new caterwaul.syntax ( "_p")) ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "u~",  new caterwaul.syntax ( "[",  new caterwaul.syntax ( "_x")))).prefix ( " ") ,new caterwaul.syntax ( "[",  new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "_x")).prefix ( " ")) ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "u~",  new caterwaul.syntax ( "()", new caterwaul.syntax ( "_xs") ,new caterwaul.syntax ( "_ys")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "()", new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "_xs")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "_ys")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "?", new caterwaul.syntax ( "_x") ,new caterwaul.syntax ( "_y").prefix ( " ").infix ( " ") ,new caterwaul.syntax ( "_z").prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "?", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "_x")).prefix ( " ")) ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "_y")).prefix ( " ")).prefix ( " ").infix ( " ") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "_z")).prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "&&", new caterwaul.syntax ( "_x") ,new caterwaul.syntax ( "_y").prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "&&", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "_x")).prefix ( " ")) ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "_y")).prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "||", new caterwaul.syntax ( "_x") ,new caterwaul.syntax ( "_y").prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "||", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "_x")).prefix ( " ")) ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "_y")).prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "u+",  new caterwaul.syntax ( "_xs"))).prefix ( " ") ,new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( "Array") ,new caterwaul.syntax ( "prototype")) ,new caterwaul.syntax ( "slice")) ,new caterwaul.syntax ( "call")) ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "_xs")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "%", new caterwaul.syntax ( "_xs") ,new caterwaul.syntax ( "_thing")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "*", new caterwaul.syntax ( "_xs") ,new caterwaul.syntax ( "_thing")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "/", new caterwaul.syntax ( "_xs") ,new caterwaul.syntax ( "_thing")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "|", new caterwaul.syntax ( "_xs") ,new caterwaul.syntax ( "_thing")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "*", new caterwaul.syntax ( "%", new caterwaul.syntax ( "_xs") ,new caterwaul.syntax ( "k")).prefix ( " ") ,new caterwaul.syntax ( "_thing"))).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "*", new caterwaul.syntax ( "%", new caterwaul.syntax ( "_xs") ,new caterwaul.syntax ( "v")).prefix ( " ") ,new caterwaul.syntax ( "_thing"))).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "%", new caterwaul.syntax ( "%", new caterwaul.syntax ( "_xs") ,new caterwaul.syntax ( "k")).prefix ( " ") ,new caterwaul.syntax ( "_thing"))).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "%", new caterwaul.syntax ( "%", new caterwaul.syntax ( "_xs") ,new caterwaul.syntax ( "v")).prefix ( " ") ,new caterwaul.syntax ( "_thing"))).prefix ( " ") ,new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "function", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "o")).prefix ( " ") ,new caterwaul.syntax ( "{",  new caterwaul.syntax ( "_body")).prefix ( " "))) ,new caterwaul.syntax ( "call")) ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "this") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "_o")).prefix ( " ")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "()", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "function", new caterwaul.syntax ( "(",  new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( "i") ,new caterwaul.syntax ( "u").prefix ( " ")) ,new caterwaul.syntax ( "s").prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "{",  new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "if", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "<=", new caterwaul.syntax ( "*", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "-", new caterwaul.syntax ( "u") ,new caterwaul.syntax ( "i").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "s").prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "0").prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "[",  new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "r").prefix ( " ") ,new caterwaul.syntax ( "[",  new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "d").prefix ( " ") ,new caterwaul.syntax ( "-", new caterwaul.syntax ( "u").prefix ( " ") ,new caterwaul.syntax ( "i").prefix ( " ")).prefix ( " ")).prefix ( " "))) ,new caterwaul.syntax ( "?", new caterwaul.syntax ( ">", new caterwaul.syntax ( "d").prefix ( " ") ,new caterwaul.syntax ( "0").prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "<", new caterwaul.syntax ( "i").prefix ( " ") ,new caterwaul.syntax ( "u").prefix ( "  ").infix ( " ")).prefix ( " ") ,new caterwaul.syntax ( ">", new caterwaul.syntax ( "i").prefix ( " ") ,new caterwaul.syntax ( "u").prefix ( "  ")).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "+=", new caterwaul.syntax ( "i").prefix ( " ") ,new caterwaul.syntax ( "s").prefix ( " ")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "r").prefix ( " ") ,new caterwaul.syntax ( "push")) ,new caterwaul.syntax ( "i")).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "r").prefix ( " ")).prefix ( " "))).prefix ( " "))) ,new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_l")) ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_u")).prefix ( " ")) ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_step")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "()", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "function", new caterwaul.syntax ( "(",  new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( "i") ,new caterwaul.syntax ( "u").prefix ( " ")) ,new caterwaul.syntax ( "s").prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "{",  new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "if", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "||", new caterwaul.syntax ( "<", new caterwaul.syntax ( "*", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "-", new caterwaul.syntax ( "u") ,new caterwaul.syntax ( "i").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "s").prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "0").prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "u!",  new caterwaul.syntax ( "s")).prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "[",  new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "r").prefix ( " ") ,new caterwaul.syntax ( "[",  new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "d").prefix ( " ") ,new caterwaul.syntax ( "-", new caterwaul.syntax ( "u").prefix ( " ") ,new caterwaul.syntax ( "i").prefix ( " ")).prefix ( " ")).prefix ( " "))) ,new caterwaul.syntax ( "?", new caterwaul.syntax ( ">", new caterwaul.syntax ( "d").prefix ( " ") ,new caterwaul.syntax ( "0").prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "<=", new caterwaul.syntax ( "i").prefix ( " ") ,new caterwaul.syntax ( "u").prefix ( " ").infix ( " ")).prefix ( " ") ,new caterwaul.syntax ( ">=", new caterwaul.syntax ( "i").prefix ( " ") ,new caterwaul.syntax ( "u").prefix ( " ")).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "+=", new caterwaul.syntax ( "i").prefix ( " ") ,new caterwaul.syntax ( "s").prefix ( " ")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "r").prefix ( " ") ,new caterwaul.syntax ( "push")) ,new caterwaul.syntax ( "i")).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "r").prefix ( " ")).prefix ( " "))).prefix ( " "))) ,new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_l")) ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_u")).prefix ( " ")) ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "_step")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( "=", new caterwaul.syntax ( "ks").prefix ( " ") ,new caterwaul.syntax ( "[",  new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "var",  new caterwaul.syntax ( "in", new caterwaul.syntax ( "k").prefix ( " ") ,new caterwaul.syntax ( "o").prefix ( " ")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "&&", new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( "Object").prefix ( " ") ,new caterwaul.syntax ( "prototype")) ,new caterwaul.syntax ( "hasOwnProperty")) ,new caterwaul.syntax ( "call")) ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "o") ,new caterwaul.syntax ( "k").prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "ks").prefix ( " ") ,new caterwaul.syntax ( "push")) ,new caterwaul.syntax ( "k")).prefix ( " ")).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "ks").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( "=", new caterwaul.syntax ( "vs").prefix ( " ") ,new caterwaul.syntax ( "[",  new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "var",  new caterwaul.syntax ( "in", new caterwaul.syntax ( "k").prefix ( " ") ,new caterwaul.syntax ( "o").prefix ( " ")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "&&", new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( "Object").prefix ( " ") ,new caterwaul.syntax ( "prototype")) ,new caterwaul.syntax ( "hasOwnProperty")) ,new caterwaul.syntax ( "call")) ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "o") ,new caterwaul.syntax ( "k").prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "vs").prefix ( " ") ,new caterwaul.syntax ( "push")) ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "o") ,new caterwaul.syntax ( "k")).prefix ( " ")).prefix ( " ")).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "vs").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( "=", new caterwaul.syntax ( "ps").prefix ( " ") ,new caterwaul.syntax ( "[",  new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "var",  new caterwaul.syntax ( "in", new caterwaul.syntax ( "k").prefix ( " ") ,new caterwaul.syntax ( "o").prefix ( " ")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "&&", new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( ".", new caterwaul.syntax ( "Object").prefix ( " ") ,new caterwaul.syntax ( "prototype")) ,new caterwaul.syntax ( "hasOwnProperty")) ,new caterwaul.syntax ( "call")) ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "o") ,new caterwaul.syntax ( "k").prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "ps").prefix ( " ") ,new caterwaul.syntax ( "push")) ,new caterwaul.syntax ( "[",  new caterwaul.syntax ( ",", new caterwaul.syntax ( "k") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "o").prefix ( " ") ,new caterwaul.syntax ( "k")).prefix ( " ")))).prefix ( " ")).prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "ps").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( ";", new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "r").prefix ( " ") ,new caterwaul.syntax ( "{",  new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "i").prefix ( " ") ,new caterwaul.syntax ( "0").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "l").prefix ( " ") ,new caterwaul.syntax ( ".", new caterwaul.syntax ( "o").prefix ( " ") ,new caterwaul.syntax ( "length"))).prefix ( " ")) ,new caterwaul.syntax ( "x").prefix ( " "))) ,new caterwaul.syntax ( "<", new caterwaul.syntax ( "i").prefix ( " ") ,new caterwaul.syntax ( "l").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "u++",  new caterwaul.syntax ( "i")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "x").prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "o").prefix ( " ") ,new caterwaul.syntax ( "i")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "[]", new caterwaul.syntax ( "r").prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "x") ,new caterwaul.syntax ( "0")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "x").prefix ( " ") ,new caterwaul.syntax ( "1")).prefix ( " ")).prefix ( " "))) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "r").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( ";", new caterwaul.syntax ( "for", new caterwaul.syntax ( "(",  new caterwaul.syntax ( ";", new caterwaul.syntax ( ";", new caterwaul.syntax ( "var",  new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "r").prefix ( " ") ,new caterwaul.syntax ( "{",  new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "i").prefix ( " ") ,new caterwaul.syntax ( "0").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "=", new caterwaul.syntax ( "l").prefix ( " ") ,new caterwaul.syntax ( ".", new caterwaul.syntax ( "o").prefix ( " ") ,new caterwaul.syntax ( "length"))).prefix ( " ")) ,new caterwaul.syntax ( "x").prefix ( " "))) ,new caterwaul.syntax ( "<", new caterwaul.syntax ( "i").prefix ( " ") ,new caterwaul.syntax ( "l").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "u++",  new caterwaul.syntax ( "i")).prefix ( " "))).prefix ( " ") ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "=", new caterwaul.syntax ( "x").prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "o").prefix ( " ") ,new caterwaul.syntax ( "i")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "()", new caterwaul.syntax ( ".", new caterwaul.syntax ( "(",  new caterwaul.syntax ( "||", new caterwaul.syntax ( "[]", new caterwaul.syntax ( "r") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "x") ,new caterwaul.syntax ( "0")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "(",  new caterwaul.syntax ( "=", new caterwaul.syntax ( "[]", new caterwaul.syntax ( "r") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "x") ,new caterwaul.syntax ( "0")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "[",  new caterwaul.syntax ( "").prefix ( " ")).prefix ( " ")).prefix ( " ")).prefix ( " ")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "push")) ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "x") ,new caterwaul.syntax ( "1")).prefix ( " ")).prefix ( " "))) ,new caterwaul.syntax ( "return",  new caterwaul.syntax ( "r").prefix ( " ")).prefix ( " ")) ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "n") ,new caterwaul.syntax ( "_u")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "ni") ,new caterwaul.syntax ( "_u")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "n") ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "_l") ,new caterwaul.syntax ( "_u").prefix ( " "))).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "ni") ,new caterwaul.syntax ( ",", new caterwaul.syntax ( "_l") ,new caterwaul.syntax ( "_u").prefix ( " "))).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "n") ,new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( "_l") ,new caterwaul.syntax ( "_u").prefix ( " ")) ,new caterwaul.syntax ( "_step").prefix ( " "))).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "ni") ,new caterwaul.syntax ( ",", new caterwaul.syntax ( ",", new caterwaul.syntax ( "_l") ,new caterwaul.syntax ( "_u").prefix ( " ")) ,new caterwaul.syntax ( "_step").prefix ( " "))).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "/", new caterwaul.syntax ( "_o") ,new caterwaul.syntax ( "keys")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "|", new caterwaul.syntax ( "_o") ,new caterwaul.syntax ( "object")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "/", new caterwaul.syntax ( "_o") ,new caterwaul.syntax ( "mobject")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "/", new caterwaul.syntax ( "_o") ,new caterwaul.syntax ( "values")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "-", new caterwaul.syntax ( "_o") ,new caterwaul.syntax ( "object")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "-", new caterwaul.syntax ( "_o") ,new caterwaul.syntax ( "mobject")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "/", new caterwaul.syntax ( "_o") ,new caterwaul.syntax ( "pairs")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "/", new caterwaul.syntax ( "_o") ,new caterwaul.syntax ( "object")).prefix ( " ")).prefix ( " ") ,new caterwaul.syntax ( "[]", new caterwaul.syntax ( "S") ,new caterwaul.syntax ( "|", new caterwaul.syntax ( "_o") ,new caterwaul.syntax ( "mobject")).prefix ( " ")).prefix ( " "))) ; 

  caterwaul.module('std', function ($) {$.js_all = function () {return this('js js_literals words seq')};
                                        $.all.push('js_all')});

// Generated by SDoc
