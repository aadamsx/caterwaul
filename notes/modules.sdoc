Modules.
Modules are for extensions as much as they are for fundamentals. This sounds weird perhaps, but it's true. For example, the replication behavior of caterwaul is useful outside of just the
caterwaul main library, so we could reasonably want to reuse it:

| var replicator = caterwaul.replica();
  replicator.clone();

In this case, caterwaul itself must be a replicating function. This is kind of interesting, because the publicly available caterwaul.replica assumes the existence of caterwaul already.
Fortunately the initialization is guaranteed to be single-threaded. (And if you have created a world in which this isn't true, then you deserve what you get.)

Fundamental toplevel modules.
These modules are actually parts of Caterwaul's basis:

| 1. Replica. This handles the inteface for configurable and replicable functions.
  2. Macroexpansion. This handles the boilerplate involved in writing macroexpanders for array-like trees of syntax nodes. (It doesn't, however, handle the macro definitions themselves.)

Replication is fairly straightforward; there isn't much of an interface required of the function being replicated. Macroexpansion, on the other hand, involves some inversion of control with
respect to syntax trees. So, in order to work with this macroexpander, the tree should support an rmap() method. (More details in the code.)