caterwaul("js_all")(function(a){a.invariant=wcapture[node(behavior)=n/-a.merge/wcapture[to(b,p)=n-se-set_edge(b,p)-se-set_sibling(b,p),send(v,visited)=behavior(n,v,seen)-se-broadcast(v)-where[seen=(visited||{})-se[it[id]=n]],unlink()=n-se-siblings*![x/false/~to/n]/seq,signal()=broadcast,set_edge(b,p)=b?(siblings[p.id]=p,p.siblings[id]=n):(delete siblings[p.id],delete p.siblings[id]),set_sibling(b,p)=b?edges[p.id]=p.edges[id]=b:(delete edges[p.id],delete p.edges[id]),id=gensym(),edges={},siblings={}]-where[n()=n.send.apply(n,arguments),broadcast=caterwaul.future()],node_repeat()(n,v,seen)=n.edges%k%![seen[x]]/pairs*[x[1](v,seen,siblings[x[0]])]/seq/!future/~map/"v".qf-where[siblings=n.siblings],node_cache(eq)(n,v,seen)=!eq(v,n.val()),filter_node(f)(n)=node(f(v)?n(v,seen):future()(v),given[v,seen]),linear_edge(v,visited,n)=n(v,visited),silent_edge(v,visited,n)=future()(v),fail_edge(v,visited,n)=future()(null)],using.caterwaul})(caterwaul);