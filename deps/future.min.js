caterwaul.js_all()(function(a){(a.future=construct_future)/-a.merge/static_future_methods-where[static_future_methods=capture[array(xs)=transpose_array(xs),object(o)=transpose_object(o),k(x)=callback_future()(x)],construct_future(xs)=xs?xs.constructor===Object?a.future.object(xs):xs.constructor===Array?a.future.array(xs):new Error("unrecognized argument for future constructor: #{xs}")/raise:callback_future(),callback_future()=calls_its_send_method()-se-it/future_initials_for(it)/-a.merge/future_operations_for(it)-where[calls_its_send_method()=f-where[f()=f.send.apply(f,arguments)]],componentwise(init,each)(xs)=result-se-each(xs,v/~push/receive(k)-given[k,v])-where[result=caterwaul.future(),received=init(),queue={},enqueue(k,v)=(queue[k]||(queue[k]=[])).push(v),replay_queue()=queue/pairs*![receive(x[0])(x[1].shift())-when-x[1].length]-seq,expected_count=each(xs,++count-delay)-re-count-where[count=0],received_count=0,receive(k)(v)=received.hasOwnProperty(k)?enqueue(k,v):(received[k]=v)-re-result(received)/se[received=init(),received_count=0,replay_queue()]/when[++received_count===expected_count]],transpose_array=componentwise("[]".qf,given[xs,f] in xs*![f(xi,x)]-seq),transpose_object=componentwise("{}".qf,given[o,f] in o/pairs*![f(x[0],x[1])]-seq),call_vc(f,xs)=f.apply(continuation,xs)-re[continuation_result||[it]]-where[continuation_result=null,continuation(xs=arguments)=continuation_result=Array.prototype.slice.call(xs)],future_initials_for(future)={listeners:[],decided:null},future_operations_for(future)=wcapture[send(xs=arguments)=future-se[it.decided=xs,future.listeners*![future/-x.apply/xs]-seq],push(f)=future-se-future.listeners/~push/f-se-future/-f.apply/future.decided/when[future.decided],map(f)=callback_future()-se-push("it /-it.apply/ call_vc(f, arguments)".qf),flat_map(f)=callback_future()-se-map(f/~push/"future /~push/ it".qf),scan(size)=result-se-observe/!push-where[xs=[],result=callback_future()-se[it.queue()=xs],observe(x)=xs/~push/x-se-check_window(),check_window()=xs.shift()-se-result(+xs-seq)-when[elements.length>size]],fold(f,initial)=result-se-observe/!push-where[result=callback_future()-se[it.state()=initial],observe(x)=result(initial=f(initial,x))],filter(f)=caterwaul_future()-se-"it(_) -when- f(_)".qf/!push]]})(caterwaul);